This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: target/**, *.class, *.jar, *.war, **/node_modules/**, **/.git/**, **/.idea/**, **/logs/**, **/log/**, **/.DS_Store, **/derby-data/**, **/data/**, **/*.lck, **/repomix-output.txt, **/springcloud-summary.txt
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
docs/
  distributed-cache-guide.md
  load-balancer-guide.md
  monitoring-logging-guide.md
  sentinel-config-guide.md
eleme-business-service/
  src/
    main/
      java/
        org/
          example/
            config/
              FeignConfig.java
              GlobalExceptionHandler.java
              JacksonConfig.java
            controller/
              BusinessController.java
            feign/
              FoodClient.java
              FoodClientFallback.java
            mapper/
              BusinessMapper.java
            service/
              impl/
                BusinessServiceImpl.java
              BusinessService.java
            BusinessServiceApplication.java
      resources/
        application.yml
  pom.xml
eleme-captcha-service/
  src/
    main/
      java/
        org/
          example/
            controller/
              CaptchaController.java
            dto/
              CaptchaGenerateRequest.java
              CaptchaResponse.java
              CaptchaValidateRequest.java
            service/
              impl/
                CaptchaServiceImpl.java
              CaptchaService.java
            CaptchaServiceApplication.java
      resources/
        application.yml
  pom.xml
eleme-common/
  src/
    main/
      java/
        org/
          example/
            cache/
              CacheService.java
            config/
              RedisConfig.java
              SentinelConfig.java
            constants/
              CommonConstants.java
            dto/
              IdsWrapper.java
              OrderDetailDTO.java
              OrderRequestDTO.java
              R.java
            entity/
              Business.java
              Food.java
              User.java
              UserOrder.java
            exception/
              SentinelExceptionHandler.java
            loadbalancer/
              HealthCheckLoadBalancer.java
              WeightedLoadBalancer.java
            lock/
              DistributedLock.java
            utils/
              JwtUtil.java
  pom.xml
eleme-food-service/
  src/
    main/
      java/
        org/
          example/
            config/
              GlobalExceptionHandler.java
              JacksonConfig.java
            controller/
              FoodController.java
            mapper/
              FoodMapper.java
            service/
              impl/
                FoodServiceImpl.java
              FoodService.java
            FoodServiceApplication.java
      resources/
        application.yml
  pom.xml
eleme-gateway/
  src/
    main/
      java/
        org/
          example/
            config/
              SwaggerConfig.java
            filter/
              AuthFilter.java
              LoggingFilter.java
              RateLimitFilter.java
            GatewayApplication.java
      resources/
        application.yml
  pom.xml
eleme-monitor/
  src/
    main/
      java/
        org/
          example/
            config/
              MetricsConfig.java
              SecurityConfig.java
            MonitorApplication.java
      resources/
        application.yml
  pom.xml
eleme-notification-service/
  src/
    main/
      java/
        org/
          example/
            config/
              GlobalExceptionHandler.java
            controller/
              NotificationController.java
            dto/
              EmailAttachmentDTO.java
              EmailRequestDTO.java
              NotificationResponseDTO.java
              SmsRequestDTO.java
              VerificationCodeRequestDTO.java
              VerificationCodeValidateDTO.java
            entity/
              Notification.java
              NotificationStatus.java
              NotificationType.java
              VerificationCode.java
            repository/
              NotificationRepository.java
              VerificationCodeRepository.java
            service/
              impl/
                EmailServiceImpl.java
                NotificationServiceImpl.java
                VerificationCodeServiceImpl.java
              EmailService.java
              NotificationService.java
              SmsService.java
              VerificationCodeService.java
            NotificationServiceApplication.java
      resources/
        application.yml
  pom.xml
eleme-order-service/
  src/
    main/
      java/
        org/
          example/
            config/
              FeignConfig.java
              GlobalExceptionHandler.java
              JacksonConfig.java
            controller/
              OrderController.java
            feign/
              BusinessClient.java
              BusinessClientFallback.java
              FoodClient.java
              FoodClientFallback.java
              UserClient.java
              UserClientFallback.java
            mapper/
              UserOrderMapper.java
            service/
              impl/
                OrderServiceImpl.java
              OrderService.java
            OrderServiceApplication.java
      resources/
        application.yml
  pom.xml
eleme-payment-service/
  src/
    main/
      java/
        org/
          example/
            dto/
              PaymentRequestDTO.java
              PaymentResponseDTO.java
              RefundRequestDTO.java
            entity/
              Payment.java
            PaymentServiceApplication.java
      resources/
        application.yml
  pom.xml
eleme-user-service/
  src/
    main/
      java/
        org/
          example/
            config/
              FeignConfig.java
              GlobalExceptionHandler.java
              JacksonConfig.java
            controller/
              UserController.java
            dto/
              UserLoginDTO.java
              UserRegisterDTO.java
              UserUpdateDTO.java
            mapper/
              UserMapper.java
            service/
              impl/
                EmailServiceImpl.java
                UserServiceImpl.java
              EmailService.java
              UserService.java
            UserServiceApplication.java
      resources/
        application.yml
  pom.xml
infrastructure/
  elk/
    elasticsearch/
      config/
        elasticsearch.yml
    filebeat/
      config/
        filebeat.yml
    kibana/
      config/
        kibana.yml
    logstash/
      config/
        logstash.yml
      pipeline/
        logstash.conf
    docker-compose.yml
  mysql/
    init/
      01-init-database.sql
  redis/
    sentinel1/
      conf/
        sentinel.conf
    sentinel2/
      conf/
        sentinel.conf
    sentinel3/
      conf/
        sentinel.conf
  sentinel/
    sentinel-rules.json
  docker-compose.yml
  README.md
scripts/
  check-services.sh
  restart-services.sh
  start-all.sh
  start-services.sh
  stop-all.sh
  stop-services.sh
test-simple-service/
  src/
    main/
      java/
        org/
          example/
            TestSimpleApplication.java
      resources/
        application.yml
  pom.xml
pom.xml
README.md

================================================================
Files
================================================================

================
File: docs/distributed-cache-guide.md
================
# Redis分布式缓存配置指南

## 概述

本指南说明如何在饿了么Spring Cloud微服务项目中配置和使用Redis实现分布式缓存，提高系统性能和数据访问效率。

## 架构说明

### 1. Redis集群架构

- **Redis Master**: 主节点，处理读写操作
- **Redis Slave**: 从节点，处理读操作，提供高可用性
- **Redis Sentinel**: 哨兵节点，监控主从节点，实现故障转移

### 2. 缓存层次结构

```
应用层
    ↓
本地缓存 (L1 Cache)
    ↓
分布式缓存 (L2 Cache - Redis)
    ↓
数据库 (MySQL)
```

## 缓存策略

### 1. 缓存分类和TTL配置

| 缓存类型 | 过期时间 | 使用场景 | 更新策略 |
|----------|----------|----------|----------|
| 用户缓存 | 1小时 | 用户信息、权限 | 用户更新时删除 |
| 商家缓存 | 2小时 | 商家信息、分类 | 商家更新时删除 |
| 食物缓存 | 30分钟 | 食物信息、价格 | 食物更新时删除 |
| 订单缓存 | 10分钟 | 订单详情 | 订单状态变更时删除 |
| 支付缓存 | 5分钟 | 支付状态 | 支付完成时删除 |
| 验证码缓存 | 5分钟 | 验证码 | 验证后删除 |
| 热点数据 | 1天 | 热门商家、推荐食物 | 定时更新 |
| 统计数据 | 1小时 | 访问统计、销量统计 | 定时更新 |
| 配置数据 | 2小时 | 系统配置、字典数据 | 配置更新时删除 |

### 2. 缓存模式

#### Cache-Aside（旁路缓存）
```java
// 读操作
public User getUserById(Integer userId) {
    // 1. 先从缓存查询
    User user = cacheService.get("user:" + userId, User.class);
    if (user != null) {
        return user;
    }
    
    // 2. 缓存未命中，从数据库查询
    user = userMapper.selectById(userId);
    if (user != null) {
        // 3. 写入缓存
        cacheService.set("user:" + userId, user, 1, TimeUnit.HOURS);
    }
    
    return user;
}

// 写操作
public void updateUser(User user) {
    // 1. 更新数据库
    userMapper.updateById(user);
    
    // 2. 删除缓存
    cacheService.delete("user:" + user.getId());
}
```

#### Write-Through（写透缓存）
```java
@Cacheable(value = "user", key = "#userId")
public User getUserById(Integer userId) {
    return userMapper.selectById(userId);
}

@CacheEvict(value = "user", key = "#user.id")
public void updateUser(User user) {
    userMapper.updateById(user);
}
```

#### Write-Behind（写回缓存）
```java
@Async
@CacheEvict(value = "user", key = "#user.id")
public void updateUserAsync(User user) {
    // 异步更新数据库
    userMapper.updateById(user);
}
```

## 缓存实现

### 1. Spring Cache注解

#### @Cacheable - 缓存查询结果
```java
@Service
public class BusinessService {
    
    @Cacheable(value = "business", key = "#businessId")
    public Business getBusinessById(Integer businessId) {
        return businessMapper.selectById(businessId);
    }
    
    @Cacheable(value = "business", key = "'list:' + #page + ':' + #size")
    public List<Business> getBusinessList(int page, int size) {
        return businessMapper.selectPage(page, size);
    }
}
```

#### @CachePut - 更新缓存
```java
@CachePut(value = "business", key = "#business.id")
public Business updateBusiness(Business business) {
    businessMapper.updateById(business);
    return business;
}
```

#### @CacheEvict - 删除缓存
```java
@CacheEvict(value = "business", key = "#businessId")
public void deleteBusiness(Integer businessId) {
    businessMapper.deleteById(businessId);
}

// 删除所有商家缓存
@CacheEvict(value = "business", allEntries = true)
public void clearAllBusinessCache() {
    // 清空所有商家缓存
}
```

#### @Caching - 组合操作
```java
@Caching(
    evict = {
        @CacheEvict(value = "business", key = "#business.id"),
        @CacheEvict(value = "business", key = "'list:*'")
    }
)
public void updateBusinessWithClearList(Business business) {
    businessMapper.updateById(business);
}
```

### 2. 手动缓存操作

```java
@Service
@RequiredArgsConstructor
public class FoodService {
    
    private final CacheService cacheService;
    private final FoodMapper foodMapper;
    
    public List<Food> getHotFoods() {
        String key = "hotfoods";
        
        // 尝试从缓存获取
        List<Food> foods = cacheService.get(key, List.class);
        if (foods != null) {
            return foods;
        }
        
        // 从数据库查询
        foods = foodMapper.selectHotFoods();
        
        // 写入缓存
        cacheService.set(key, foods, 30, TimeUnit.MINUTES);
        
        return foods;
    }
}
```

### 3. 分布式锁防止缓存击穿

```java
@Service
@RequiredArgsConstructor
public class OrderService {
    
    private final DistributedLock distributedLock;
    private final CacheService cacheService;
    private final OrderMapper orderMapper;
    
    public Order getOrderById(Long orderId) {
        String cacheKey = "order:" + orderId;
        
        // 先尝试从缓存获取
        Order order = cacheService.get(cacheKey, Order.class);
        if (order != null) {
            return order;
        }
        
        // 使用分布式锁防止缓存击穿
        String lockKey = "lock:order:" + orderId;
        return distributedLock.executeWithLock(lockKey, 10, TimeUnit.SECONDS, () -> {
            // 双重检查
            Order cachedOrder = cacheService.get(cacheKey, Order.class);
            if (cachedOrder != null) {
                return cachedOrder;
            }
            
            // 从数据库查询
            Order dbOrder = orderMapper.selectById(orderId);
            if (dbOrder != null) {
                cacheService.set(cacheKey, dbOrder, 10, TimeUnit.MINUTES);
            }
            
            return dbOrder;
        });
    }
}
```

## 缓存预热和更新

### 1. 系统启动时预热

```java
@Component
@RequiredArgsConstructor
public class CacheWarmup {
    
    private final BusinessService businessService;
    private final FoodService foodService;
    
    @EventListener(ApplicationReadyEvent.class)
    public void warmupCache() {
        log.info("开始缓存预热...");
        
        // 预热热门商家
        businessService.getHotBusinesses();
        
        // 预热热门食物
        foodService.getHotFoods();
        
        // 预热商家分类
        businessService.getBusinessCategories();
        
        log.info("缓存预热完成");
    }
}
```

### 2. 定时更新热点数据

```java
@Component
@RequiredArgsConstructor
public class CacheUpdateScheduler {
    
    private final CacheService cacheService;
    private final StatisticsService statisticsService;
    
    @Scheduled(fixedRate = 3600000) // 每小时执行一次
    public void updateHotData() {
        log.info("开始更新热点数据缓存...");
        
        // 更新热门商家
        List<Business> hotBusinesses = statisticsService.getHotBusinesses();
        cacheService.set("hotBusinesses", hotBusinesses, 1, TimeUnit.DAYS);
        
        // 更新热门食物
        List<Food> hotFoods = statisticsService.getHotFoods();
        cacheService.set("hotFoods", hotFoods, 1, TimeUnit.DAYS);
        
        log.info("热点数据缓存更新完成");
    }
}
```

## 缓存监控和指标

### 1. 缓存指标

```java
@Component
@RequiredArgsConstructor
public class CacheMetrics {
    
    private final MeterRegistry meterRegistry;
    private final CacheManager cacheManager;
    
    @EventListener
    public void handleCacheGetEvent(CacheGetEvent event) {
        Counter.builder("cache.get")
            .tag("cache", event.getCacheName())
            .tag("result", event.isHit() ? "hit" : "miss")
            .register(meterRegistry)
            .increment();
    }
    
    @Scheduled(fixedRate = 60000) // 每分钟统计一次
    public void recordCacheSize() {
        cacheManager.getCacheNames().forEach(cacheName -> {
            Cache cache = cacheManager.getCache(cacheName);
            if (cache instanceof RedisCache) {
                // 记录缓存大小
                Gauge.builder("cache.size")
                    .tag("cache", cacheName)
                    .register(meterRegistry, cache, this::getCacheSize);
            }
        });
    }
    
    private double getCacheSize(Cache cache) {
        // 获取缓存大小的逻辑
        return 0.0;
    }
}
```

### 2. 缓存健康检查

```yaml
# application.yml
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,caches
  endpoint:
    health:
      show-details: always
  health:
    redis:
      enabled: true
```

```java
@Component
public class CacheHealthIndicator implements HealthIndicator {
    
    private final RedisTemplate<String, Object> redisTemplate;
    
    @Override
    public Health health() {
        try {
            // 测试Redis连接
            redisTemplate.opsForValue().set("health:check", "OK", 1, TimeUnit.SECONDS);
            String result = (String) redisTemplate.opsForValue().get("health:check");
            
            if ("OK".equals(result)) {
                return Health.up()
                    .withDetail("redis", "Available")
                    .build();
            } else {
                return Health.down()
                    .withDetail("redis", "Unavailable")
                    .build();
            }
        } catch (Exception e) {
            return Health.down()
                .withDetail("redis", "Error: " + e.getMessage())
                .build();
        }
    }
}
```

## 缓存最佳实践

### 1. 缓存键设计

```java
// 好的键命名规范
"user:12345"                    // 用户信息
"business:list:page:1:size:10"  // 商家列表
"food:business:12345"           // 商家的食物列表
"order:user:12345:status:paid"  // 用户的已支付订单

// 避免的键命名
"u12345"                        // 不明确
"businesslist"                  // 不够具体
"temp_data_123"                 // 临时数据应该有明确用途
```

### 2. 缓存雪崩防护

```java
@Service
public class CacheProtectionService {
    
    // 使用随机过期时间防止缓存雪崩
    public void setWithRandomExpire(String key, Object value, long baseSeconds) {
        long randomSeconds = (long) (baseSeconds * (0.8 + Math.random() * 0.4));
        cacheService.set(key, value, randomSeconds, TimeUnit.SECONDS);
    }
    
    // 使用互斥锁防止缓存击穿
    public <T> T getWithMutex(String key, Supplier<T> dataLoader) {
        T value = cacheService.get(key, (Class<T>) Object.class);
        if (value != null) {
            return value;
        }
        
        String lockKey = "mutex:" + key;
        return distributedLock.executeWithLock(lockKey, 10, TimeUnit.SECONDS, () -> {
            // 双重检查
            T cachedValue = cacheService.get(key, (Class<T>) Object.class);
            if (cachedValue != null) {
                return cachedValue;
            }
            
            // 从数据源加载
            T newValue = dataLoader.get();
            if (newValue != null) {
                setWithRandomExpire(key, newValue, 300); // 5分钟基础过期时间
            }
            
            return newValue;
        });
    }
}
```

### 3. 缓存穿透防护

```java
@Service
public class BloomFilterService {
    
    private final BloomFilter<String> bloomFilter;
    
    public BloomFilterService() {
        // 初始化布隆过滤器
        this.bloomFilter = BloomFilter.create(Funnels.stringFunnel(Charset.defaultCharset()), 1000000, 0.01);
    }
    
    public boolean mightContain(String key) {
        return bloomFilter.mightContain(key);
    }
    
    public void add(String key) {
        bloomFilter.put(key);
    }
}

@Service
@RequiredArgsConstructor
public class DataService {
    
    private final BloomFilterService bloomFilterService;
    private final CacheService cacheService;
    
    public Data getDataById(String id) {
        // 布隆过滤器检查
        if (!bloomFilterService.mightContain(id)) {
            return null; // 确定不存在
        }
        
        // 检查缓存
        Data data = cacheService.get("data:" + id, Data.class);
        if (data != null) {
            return data;
        }
        
        // 从数据库查询
        data = dataMapper.selectById(id);
        if (data != null) {
            cacheService.set("data:" + id, data, 30, TimeUnit.MINUTES);
        } else {
            // 缓存空值，防止穿透
            cacheService.set("data:" + id, "NULL", 5, TimeUnit.MINUTES);
        }
        
        return data;
    }
}
```

## 部署和配置

### 1. Redis集群配置

```yaml
# application.yml
spring:
  redis:
    # 单机配置
    host: localhost
    port: 6379
    password: redis123
    timeout: 10000ms
    
    # 连接池配置
    lettuce:
      pool:
        max-active: 20
        max-wait: -1ms
        max-idle: 10
        min-idle: 5
    
    # 集群配置
    cluster:
      nodes:
        - 192.168.1.101:6379
        - 192.168.1.102:6379
        - 192.168.1.103:6379
      max-redirects: 3
    
    # 哨兵配置
    sentinel:
      master: mymaster
      nodes:
        - 192.168.1.101:26379
        - 192.168.1.102:26379
        - 192.168.1.103:26379
```

### 2. 缓存配置

```yaml
# 缓存配置
spring:
  cache:
    type: redis
    redis:
      time-to-live: 30m
      key-prefix: "eleme:"
      use-key-prefix: true
      cache-null-values: false
```

## 故障排除

### 1. 常见问题

- **缓存雪崩**: 大量缓存同时过期
  - 解决方案: 随机过期时间、多级缓存
  
- **缓存击穿**: 热点数据过期，大量请求击穿到数据库
  - 解决方案: 分布式锁、热点数据永不过期
  
- **缓存穿透**: 查询不存在的数据
  - 解决方案: 布隆过滤器、缓存空值

### 2. 性能优化

- **序列化优化**: 使用高效的序列化方式
- **网络优化**: 使用管道、批量操作
- **内存优化**: 合理设置过期时间、压缩数据

### 3. 监控告警

```yaml
# 监控配置
management:
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: eleme-app
```

## 总结

通过合理配置Redis分布式缓存，可以显著提高系统性能和用户体验。关键是要根据业务特点选择合适的缓存策略，做好缓存预热和更新，并实施有效的防护措施防止缓存问题。

================
File: docs/load-balancer-guide.md
================
# Spring Cloud LoadBalancer 配置指南

## 概述

本指南说明如何在饿了么Spring Cloud微服务项目中配置和使用Spring Cloud LoadBalancer实现客户端负载均衡。

## 架构说明

### 1. 负载均衡器类型

- **RoundRobinLoadBalancer**: 轮询策略，按顺序分配请求
- **RandomLoadBalancer**: 随机策略，随机选择实例
- **WeightedLoadBalancer**: 权重策略，根据实例权重分配请求
- **HealthCheckLoadBalancer**: 健康检查策略，过滤不健康实例

### 2. 负载均衡策略分配

| 服务 | 负载均衡策略 | 原因 |
|------|-------------|------|
| 用户服务 | RoundRobin | 请求分布均匀，适合认证场景 |
| 商家服务 | RoundRobin | 查询负载均匀分布 |
| 食物服务 | RoundRobin | 查询负载均匀分布 |
| 订单服务 | Random | 避免热点，分散创建订单压力 |
| 支付服务 | RoundRobin | 重要服务，确保稳定性 |
| 通知服务 | Random | 分散通知发送压力 |
| 验证码服务 | RoundRobin | 高频访问，均匀分布 |

## 配置详情

### 1. 基础配置

在`application.yml`中配置负载均衡：

```yaml
spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false  # 禁用Ribbon
      cache:
        enabled: true   # 启用缓存
        ttl: 35s       # 缓存TTL
        capacity: 256  # 缓存容量
```

### 2. 服务级别配置

#### 针对特定服务配置负载均衡策略：

```yaml
# 为特定服务配置负载均衡策略
eleme-user-service:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
    
eleme-order-service:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
```

### 3. 自定义负载均衡配置

```java
@Configuration
public class LoadBalancerConfig {
    
    @Bean
    public ReactorLoadBalancer<ServiceInstance> userServiceLoadBalancer(
            Environment environment,
            LoadBalancerClientFactory loadBalancerClientFactory) {
        
        String name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);
        if ("eleme-user-service".equals(name)) {
            return new RoundRobinLoadBalancer(
                loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), 
                name);
        }
        return null;
    }
}
```

## 负载均衡策略详解

### 1. 轮询策略 (RoundRobin)

**使用场景**：
- 各实例性能相当
- 需要均匀分配请求
- 适合无状态服务

**配置示例**：
```java
@Bean
public ReactorLoadBalancer<ServiceInstance> roundRobinLoadBalancer(
        Environment environment,
        LoadBalancerClientFactory loadBalancerClientFactory) {
    return new RoundRobinLoadBalancer(
        loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), 
        name);
}
```

### 2. 随机策略 (Random)

**使用场景**：
- 避免热点问题
- 实例性能差异不大
- 简单的负载分散

**配置示例**：
```java
@Bean
public ReactorLoadBalancer<ServiceInstance> randomLoadBalancer(
        Environment environment,
        LoadBalancerClientFactory loadBalancerClientFactory) {
    return new RandomLoadBalancer(
        loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), 
        name);
}
```

### 3. 权重策略 (Weighted)

**使用场景**：
- 实例性能差异较大
- 需要根据服务器能力分配负载
- 灰度发布场景

**配置示例**：
```java
@Bean
public ReactorLoadBalancer<ServiceInstance> weightedLoadBalancer(
        Environment environment,
        LoadBalancerClientFactory loadBalancerClientFactory) {
    return new WeightedLoadBalancer(
        loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), 
        name);
}
```

**权重设置**：
```yaml
# 在Nacos中设置实例权重
spring:
  cloud:
    nacos:
      discovery:
        metadata:
          weight: 3  # 设置当前实例权重
```

### 4. 健康检查策略 (HealthCheck)

**使用场景**：
- 需要过滤不健康实例
- 服务可用性要求高
- 自动故障转移

**配置示例**：
```java
@Bean
public ReactorLoadBalancer<ServiceInstance> healthCheckLoadBalancer(
        Environment environment,
        LoadBalancerClientFactory loadBalancerClientFactory) {
    return new HealthCheckLoadBalancer(
        loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), 
        name);
}
```

**健康状态设置**：
```yaml
# 在实例metadata中设置健康状态
spring:
  cloud:
    nacos:
      discovery:
        metadata:
          health.status: UP    # 健康状态：UP/DOWN
          enabled: true        # 是否启用：true/false
```

## OpenFeign 集成

### 1. 基础配置

```java
@FeignClient(name = "eleme-user-service", 
             fallback = UserClientFallback.class,
             configuration = FeignConfig.class)
public interface UserClient {
    
    @GetMapping("/api/user/{userId}")
    User getUserById(@PathVariable("userId") Integer userId);
}
```

### 2. Feign配置

```java
@Configuration
public class FeignConfig {
    
    @Bean
    public Logger.Level feignLoggerLevel() {
        return Logger.Level.FULL;
    }
    
    @Bean
    public Retryer feignRetryer() {
        return new Retryer.Default(100, 1000, 3);
    }
    
    @Bean
    public Request.Options feignOptions() {
        return new Request.Options(5000, 10000);
    }
}
```

### 3. 超时配置

```yaml
# Feign超时配置
feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 10000
        loggerLevel: FULL
      eleme-user-service:
        connectTimeout: 3000
        readTimeout: 8000
```

## 监控和指标

### 1. 负载均衡指标

```yaml
# 启用负载均衡指标
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,loadbalancer
  endpoint:
    health:
      show-details: always
```

### 2. 关键指标

- **请求分布**: 各实例请求数量分布
- **响应时间**: 各实例平均响应时间
- **错误率**: 各实例错误率统计
- **健康检查**: 实例健康状态变化

### 3. 监控示例

```java
@Component
public class LoadBalancerMetrics {
    
    private final MeterRegistry meterRegistry;
    
    public LoadBalancerMetrics(MeterRegistry meterRegistry) {
        this.meterRegistry = meterRegistry;
    }
    
    public void recordRequest(String serviceName, String instanceId) {
        Timer.Sample sample = Timer.start(meterRegistry);
        sample.stop(Timer.builder("loadbalancer.request")
                .tag("service", serviceName)
                .tag("instance", instanceId)
                .register(meterRegistry));
    }
}
```

## 最佳实践

### 1. 策略选择

- **性能均衡**: 选择RoundRobin
- **避免热点**: 选择Random
- **性能差异**: 选择Weighted
- **高可用性**: 选择HealthCheck

### 2. 配置优化

- **缓存配置**: 合理设置缓存TTL
- **超时设置**: 根据服务特性设置超时
- **重试策略**: 配置合理的重试次数

### 3. 故障处理

- **健康检查**: 定期检查实例健康状态
- **自动摘除**: 自动摘除不健康实例
- **故障转移**: 快速切换到健康实例

## 部署配置

### 1. 多实例部署

```yaml
# 服务实例配置
spring:
  application:
    name: eleme-user-service
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        metadata:
          weight: 2
          zone: zone1
          version: v1.0
```

### 2. 跨区域部署

```yaml
# 跨区域负载均衡
spring:
  cloud:
    loadbalancer:
      zone: zone1
      cross-zone-enabled: true
```

### 3. 灰度发布

```yaml
# 灰度发布配置
spring:
  cloud:
    nacos:
      discovery:
        metadata:
          version: v1.1     # 新版本
          weight: 1         # 较低权重
          gray: true        # 灰度标识
```

## 故障排除

### 1. 常见问题

- **负载不均**: 检查负载均衡策略配置
- **实例不可用**: 检查健康检查配置
- **请求超时**: 调整超时配置
- **服务发现失败**: 检查注册中心连接

### 2. 调试方法

```bash
# 查看负载均衡状态
curl http://localhost:8080/actuator/loadbalancer

# 查看服务实例列表
curl http://localhost:8080/actuator/services

# 查看健康状态
curl http://localhost:8080/actuator/health
```

### 3. 日志分析

```yaml
# 启用负载均衡日志
logging:
  level:
    org.springframework.cloud.loadbalancer: DEBUG
    org.springframework.cloud.openfeign: DEBUG
```

## 总结

通过合理配置Spring Cloud LoadBalancer，可以实现高效、稳定的客户端负载均衡。选择合适的负载均衡策略，配置合理的参数，并做好监控和故障处理，是保障微服务系统高可用性的关键。

================
File: docs/monitoring-logging-guide.md
================
# 饿了么微服务监控和日志系统指南

## 概述

本指南详细介绍了饿了么微服务项目的监控和日志系统的配置和使用方法。我们使用Spring Boot Admin进行应用监控，ELK Stack进行日志收集和分析。

## 系统架构

### 监控系统
- **Spring Boot Admin Server**: 微服务监控中心
- **Prometheus**: 指标收集
- **Micrometer**: 指标生成和导出
- **Grafana**: 可视化展示（可选）

### 日志系统
- **Elasticsearch**: 日志存储和搜索
- **Logstash**: 日志处理和转换
- **Kibana**: 日志可视化和分析
- **Filebeat**: 日志收集

## 快速开始

### 1. 启动监控服务

```bash
# 进入监控服务目录
cd elemeSpringCloud/eleme-monitor

# 启动监控服务
mvn spring-boot:run

# 或者使用Docker
docker-compose up -d
```

监控服务将在 http://localhost:8009 启动，使用用户名 `admin` 和密码 `admin` 登录。

### 2. 启动ELK Stack

```bash
# 进入ELK配置目录
cd elemeSpringCloud/infrastructure/elk

# 启动ELK Stack
docker-compose up -d

# 检查服务状态
docker-compose ps
```

各服务访问地址：
- **Elasticsearch**: http://localhost:9200
- **Kibana**: http://localhost:5601
- **Logstash**: http://localhost:5000 (TCP), http://localhost:5044 (Beats)

### 3. 配置微服务

为每个微服务添加监控和日志配置：

#### 3.1 添加依赖

```xml
<!-- Spring Boot Admin Client -->
<dependency>
    <groupId>de.codecentric</groupId>
    <artifactId>spring-boot-admin-starter-client</artifactId>
</dependency>

<!-- Micrometer Prometheus -->
<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-registry-prometheus</artifactId>
</dependency>

<!-- Logstash Encoder -->
<dependency>
    <groupId>net.logstash.logback</groupId>
    <artifactId>logstash-logback-encoder</artifactId>
</dependency>
```

#### 3.2 配置application.yml

```yaml
spring:
  boot:
    admin:
      client:
        url: http://localhost:8009
        instance:
          prefer-ip: true
        username: admin
        password: admin

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    root: INFO
    org.example: DEBUG
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{50}] - %msg%n"
  file:
    name: logs/${spring.application.name}.log
    max-size: 100MB
    max-history: 30
```

#### 3.3 配置Logback

创建 `src/main/resources/logback-spring.xml`：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    
    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    
    <!-- 文件输出 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/${spring.application.name}.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{50}] - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/${spring.application.name}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>
    
    <!-- Logstash输出 -->
    <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>localhost:5000</destination>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <timestamp/>
                <logLevel/>
                <loggerName/>
                <message/>
                <mdc/>
                <arguments/>
                <stackTrace/>
                <pattern>
                    <pattern>
                        {
                            "service": "${spring.application.name:-unknown}",
                            "environment": "${spring.profiles.active:-dev}"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
    </appender>
    
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="LOGSTASH"/>
    </root>
</configuration>
```

## 监控功能

### 1. 应用状态监控

Spring Boot Admin提供以下监控功能：

- **应用状态**: 运行状态、启动时间、版本信息
- **健康检查**: 数据库连接、Redis连接、磁盘空间等
- **性能指标**: CPU使用率、内存使用率、GC信息
- **HTTP追踪**: 请求响应时间、错误率
- **日志级别**: 动态修改日志级别

### 2. 自定义指标

在代码中添加自定义指标：

```java
@Component
public class CustomMetrics {
    
    private final Counter orderCounter;
    private final Timer orderProcessingTimer;
    private final Gauge onlineUsers;
    
    public CustomMetrics(MeterRegistry meterRegistry) {
        this.orderCounter = Counter.builder("eleme.orders.total")
                .description("Total orders")
                .register(meterRegistry);
        
        this.orderProcessingTimer = Timer.builder("eleme.orders.processing.time")
                .description("Order processing time")
                .register(meterRegistry);
        
        this.onlineUsers = Gauge.builder("eleme.users.online")
                .description("Online users")
                .register(meterRegistry, this, CustomMetrics::getOnlineUserCount);
    }
    
    public void incrementOrderCount() {
        orderCounter.increment();
    }
    
    public void recordOrderProcessingTime(long timeInMs) {
        orderProcessingTimer.record(timeInMs, TimeUnit.MILLISECONDS);
    }
    
    private double getOnlineUserCount() {
        // 实际业务逻辑
        return 100.0;
    }
}
```

### 3. 告警配置

Spring Boot Admin支持多种告警方式：

```yaml
spring:
  boot:
    admin:
      notify:
        mail:
          enabled: true
          from: admin@eleme.com
          to: dev-team@eleme.com
          subject: "【警告】${spring.application.name} 服务异常"
```

## 日志管理

### 1. 日志级别

- **ERROR**: 系统错误，需要立即处理
- **WARN**: 警告信息，可能影响系统运行
- **INFO**: 一般信息，业务流程记录
- **DEBUG**: 调试信息，开发环境使用

### 2. 日志格式

标准日志格式：
```
2024-01-15 10:30:45 [http-nio-8001-exec-1] INFO  [o.e.c.UserController] - 用户登录成功: user123
```

JSON格式日志（发送到Logstash）：
```json
{
  "@timestamp": "2024-01-15T10:30:45.123Z",
  "level": "INFO",
  "logger": "org.example.controller.UserController",
  "message": "用户登录成功: user123",
  "service": "eleme-user-service",
  "environment": "dev",
  "thread": "http-nio-8001-exec-1"
}
```

### 3. 日志查询

在Kibana中可以使用以下查询：

```
# 查询错误日志
level: ERROR

# 查询特定服务日志
service: "eleme-user-service"

# 查询包含异常的日志
has_exception: true

# 查询HTTP请求日志
http_method: POST AND http_path: "/api/user/login"

# 时间范围查询
@timestamp: [2024-01-15T00:00:00 TO 2024-01-15T23:59:59]
```

## 性能优化

### 1. 日志性能优化

```yaml
logging:
  level:
    # 减少不必要的DEBUG日志
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
    
  # 异步日志
  async:
    enabled: true
    queue-size: 1024
    discarding-threshold: 256
```

### 2. 监控性能优化

```yaml
management:
  metrics:
    export:
      prometheus:
        step: 10s  # 降低采集频率
  endpoint:
    health:
      cache:
        time-to-live: 10s  # 缓存健康检查结果
```

## 故障排查

### 1. 常见问题

#### 问题1: 服务无法注册到监控中心
**解决方案**:
1. 检查网络连接
2. 确认监控服务地址配置正确
3. 检查用户名密码是否正确

#### 问题2: 日志无法发送到Logstash
**解决方案**:
1. 检查Logstash服务状态
2. 确认端口配置正确
3. 查看应用日志中的错误信息

#### 问题3: Kibana无法显示日志
**解决方案**:
1. 检查索引模式是否正确
2. 确认时间范围设置
3. 检查Elasticsearch中是否有数据

### 2. 健康检查

```bash
# 检查Elasticsearch健康状态
curl -X GET "localhost:9200/_cluster/health?pretty"

# 检查Logstash状态
curl -X GET "localhost:9600/_node/stats?pretty"

# 检查应用健康状态
curl -X GET "localhost:8001/actuator/health"
```

## 最佳实践

### 1. 日志记录规范

```java
@RestController
public class UserController {
    
    private static final Logger logger = LoggerFactory.getLogger(UserController.class);
    
    @PostMapping("/login")
    public ResponseEntity<UserVO> login(@RequestBody UserLoginDTO loginDto) {
        logger.info("用户登录请求: {}", loginDto.getUsername());
        
        try {
            UserVO user = userService.login(loginDto);
            logger.info("用户登录成功: {}", loginDto.getUsername());
            return ResponseEntity.ok(user);
        } catch (Exception e) {
            logger.error("用户登录失败: {}, 错误: {}", loginDto.getUsername(), e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }
}
```

### 2. 监控指标规范

- 使用有意义的指标名称
- 添加适当的标签
- 避免高基数标签
- 定期清理无用指标

### 3. 告警策略

- 设置合适的告警阈值
- 避免告警风暴
- 根据业务重要性分级告警
- 建立告警处理流程

## 扩展功能

### 1. 集成APM工具

可以集成SkyWalking或Zipkin进行分布式追踪：

```xml
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-zipkin</artifactId>
</dependency>
```

### 2. 集成Grafana

使用Grafana创建更丰富的监控仪表板：

```yaml
# docker-compose.yml
grafana:
  image: grafana/grafana
  ports:
    - "3000:3000"
  environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin
```

### 3. 集成告警系统

集成钉钉、微信等告警通知：

```java
@Component
public class CustomNotifier extends AbstractStatusChangeNotifier {
    
    @Override
    protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {
        return Mono.fromRunnable(() -> {
            // 发送钉钉通知
            sendDingTalkNotification(event, instance);
        });
    }
}
```

## 总结

通过本指南，您可以：

1. 搭建完整的监控和日志系统
2. 实现微服务的统一监控
3. 集中化日志管理和分析
4. 快速定位和解决问题
5. 建立完善的告警机制

监控和日志系统是微服务架构中不可或缺的部分，能够帮助开发团队更好地了解系统运行状态，及时发现和解决问题，提高系统的可靠性和稳定性。

================
File: docs/sentinel-config-guide.md
================
# Sentinel服务降级和熔断配置指南

## 概述

本指南说明如何在饿了么Spring Cloud微服务项目中配置Sentinel实现服务降级和熔断。

## 架构说明

### 1. 核心组件

- **Sentinel Dashboard**: 可视化的规则配置和监控平台
- **Sentinel Core**: 核心限流熔断库
- **Spring Cloud Alibaba Sentinel**: Spring Cloud集成组件

### 2. 规则类型

- **限流规则**: 控制访问频率，防止系统过载
- **熔断规则**: 在服务异常时自动熔断，保护系统
- **系统规则**: 系统级别的保护规则
- **热点参数规则**: 针对热点参数的限流
- **授权规则**: 访问控制规则

## 配置详情

### 1. 服务配置

每个服务都需要在`application.yml`中添加Sentinel配置：

```yaml
spring:
  cloud:
    sentinel:
      transport:
        dashboard: localhost:8080
        port: 8719
      eager: true
      web-context-unify: false
      
# Sentinel规则配置
sentinel:
  flow:
    enabled: true
  degrade:
    enabled: true
  system:
    enabled: true
```

### 2. 限流规则

各服务的QPS限制：

| 服务 | QPS限制 | 说明 |
|------|---------|------|
| 用户服务 | 100 | 用户认证和管理 |
| 商家服务 | 150 | 商家信息查询 |
| 食物服务 | 200 | 食物信息查询 |
| 订单服务 | 80 | 订单处理 |
| 支付服务 | 50 | 支付处理 |
| 通知服务 | 120 | 通知发送 |
| 验证码服务 | 300 | 验证码生成 |

### 3. 熔断规则

关键业务的熔断配置：

#### 订单创建熔断
- 资源名：`createOrder`
- 熔断策略：慢调用比例
- 响应时间阈值：100ms
- 慢调用比例：50%
- 熔断时长：10s
- 最小请求数：5

#### 支付处理熔断
- 资源名：`processPayment`
- 熔断策略：慢调用比例
- 响应时间阈值：200ms
- 慢调用比例：60%
- 熔断时长：15s
- 最小请求数：3

#### 邮件发送熔断
- 资源名：`sendEmail`
- 熔断策略：慢调用比例
- 响应时间阈值：500ms
- 慢调用比例：40%
- 熔断时长：5s
- 最小请求数：3

### 4. 系统规则

系统级别保护：

- **系统负载**：最高3.0
- **平均响应时间**：25ms
- **最大线程数**：10
- **QPS**：20
- **CPU使用率**：70%

## 服务降级实现

### 1. 注解方式

```java
@SentinelResource(value = "createOrder", fallback = "createOrderFallback")
public OrderResponse createOrder(OrderRequest request) {
    // 业务逻辑
}

public OrderResponse createOrderFallback(OrderRequest request, Throwable ex) {
    // 降级逻辑
    return new OrderResponse("系统繁忙，请稍后再试");
}
```

### 2. 配置类方式

通过`SentinelConfig`类自动加载规则：

```java
@Configuration
public class SentinelConfig {
    @Bean
    public CommandLineRunner initSentinelRules() {
        return args -> {
            // 初始化限流规则
            initFlowRules();
            // 初始化熔断规则
            initDegradeRules();
            // 初始化系统规则
            initSystemRules();
        };
    }
}
```

## 监控和管理

### 1. Sentinel Dashboard

访问地址：`http://localhost:8080`

功能：
- 实时监控
- 规则配置
- 流量控制
- 熔断管理

### 2. 日志监控

各服务会记录Sentinel相关日志：

```
2024-01-01 10:00:00 [WARN] 触发限流规则: FlowException
2024-01-01 10:00:01 [WARN] 触发熔断规则: DegradeException
```

## 异常处理

### 1. 全局异常处理

`SentinelExceptionHandler`处理所有Sentinel异常：

- **FlowException**: 限流异常
- **DegradeException**: 熔断异常
- **SystemBlockException**: 系统保护异常
- **ParamFlowException**: 热点参数限流异常
- **AuthorityException**: 授权异常

### 2. 响应格式

```json
{
    "success": false,
    "code": 429,
    "message": "请求过于频繁，请稍后再试",
    "type": "FLOW_LIMIT",
    "timestamp": 1640995200000
}
```

## 最佳实践

### 1. 规则配置

- **渐进式配置**: 从宽松到严格
- **业务区分**: 不同业务设置不同规则
- **动态调整**: 根据实际情况调整规则

### 2. 降级策略

- **快速失败**: 立即返回错误
- **默认值**: 返回缓存或默认数据
- **异步处理**: 将请求放入队列异步处理

### 3. 监控告警

- **关键指标**: QPS、响应时间、成功率
- **告警机制**: 异常情况及时通知
- **自动恢复**: 熔断后自动恢复检测

## 部署和运维

### 1. 启动顺序

1. 启动基础设施（MySQL、Redis、Nacos）
2. 启动Sentinel Dashboard
3. 启动各个微服务
4. 验证Sentinel规则生效

### 2. 配置文件

Sentinel规则配置文件：`infrastructure/sentinel/sentinel-rules.json`

### 3. 监控命令

```bash
# 查看Sentinel日志
docker logs sentinel-dashboard

# 查看服务状态
curl http://localhost:8080/sentinel/api/overview
```

## 故障排除

### 1. 常见问题

- **规则不生效**: 检查Dashboard连接
- **熔断误触**: 调整熔断阈值
- **限流过严**: 调整QPS限制

### 2. 调试方法

- 查看Sentinel Dashboard
- 检查应用日志
- 验证规则配置

### 3. 性能优化

- 合理设置规则参数
- 优化业务逻辑
- 使用缓存减少请求

## 总结

通过Sentinel的服务降级和熔断机制，可以有效保护微服务系统的稳定性和可用性。合理配置规则，及时监控和调整，是保障系统高可用的关键。

================
File: eleme-business-service/src/main/java/org/example/config/FeignConfig.java
================
package org.example.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import feign.codec.Decoder;
import feign.codec.Encoder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
import org.springframework.cloud.openfeign.support.SpringDecoder;
import org.springframework.cloud.openfeign.support.SpringEncoder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;

/**
 * Feign配置类
 * 配置Feign客户端使用统一的日期时间格式
 */
@Configuration
public class FeignConfig {

    @Autowired
    private ObjectMapper objectMapper;

    @Bean
    public Encoder feignEncoder() {
        HttpMessageConverter jacksonConverter = new MappingJackson2HttpMessageConverter(objectMapper);
        return new SpringEncoder(() -> new HttpMessageConverters(jacksonConverter));
    }

    @Bean
    public Decoder feignDecoder() {
        HttpMessageConverter jacksonConverter = new MappingJackson2HttpMessageConverter(objectMapper);
        return new SpringDecoder(() -> new HttpMessageConverters(jacksonConverter));
    }
}

================
File: eleme-business-service/src/main/java/org/example/config/GlobalExceptionHandler.java
================
package org.example.config;

import lombok.extern.slf4j.Slf4j;
import org.example.constants.CommonConstants;
import org.example.dto.R;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import java.util.stream.Collectors;

/**
 * 全局异常处理器
 */
@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {

    /**
     * 处理参数校验异常
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public R<Object> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {
        String message = e.getBindingResult().getFieldErrors().stream()
                .map(FieldError::getDefaultMessage)
                .collect(Collectors.joining(", "));
        log.warn("参数校验失败: {}", message);
        return R.error(CommonConstants.ERROR_CODE, message);
    }

    /**
     * 处理绑定异常
     */
    @ExceptionHandler(BindException.class)
    public R<Object> handleBindException(BindException e) {
        String message = e.getBindingResult().getFieldErrors().stream()
                .map(FieldError::getDefaultMessage)
                .collect(Collectors.joining(", "));
        log.warn("参数绑定失败: {}", message);
        return R.error(CommonConstants.ERROR_CODE, message);
    }

    /**
     * 处理约束违反异常
     */
    @ExceptionHandler(ConstraintViolationException.class)
    public R<Object> handleConstraintViolationException(ConstraintViolationException e) {
        String message = e.getConstraintViolations().stream()
                .map(ConstraintViolation::getMessage)
                .collect(Collectors.joining(", "));
        log.warn("约束违反: {}", message);
        return R.error(CommonConstants.ERROR_CODE, message);
    }

    /**
     * 处理运行时异常
     */
    @ExceptionHandler(RuntimeException.class)
    public R<Object> handleRuntimeException(RuntimeException e) {
        log.error("运行时异常", e);
        return R.error(CommonConstants.ERROR_CODE, "系统内部错误，请稍后重试");
    }

    /**
     * 处理所有异常
     */
    @ExceptionHandler(Exception.class)
    public R<Object> handleException(Exception e) {
        log.error("系统异常", e);
        return R.error(CommonConstants.ERROR_CODE, "系统繁忙，请稍后重试");
    }
}

================
File: eleme-business-service/src/main/java/org/example/config/JacksonConfig.java
================
package org.example.config;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Jackson配置类
 * 统一配置日期时间的序列化和反序列化格式
 */
@Configuration
public class JacksonConfig {

    private static final String DATE_TIME_PATTERN = "yyyy-MM-dd HH:mm:ss";
    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(DATE_TIME_PATTERN);

    @Bean
    @Primary
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        
        // 注册Java时间模块
        JavaTimeModule javaTimeModule = new JavaTimeModule();
        
        // 配置LocalDateTime的序列化和反序列化
        javaTimeModule.addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(DATE_TIME_FORMATTER));
        javaTimeModule.addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(DATE_TIME_FORMATTER));
        
        mapper.registerModule(javaTimeModule);
        
        // 禁用将日期写为时间戳的功能
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        
        // 忽略未知字段，避免反序列化时出错
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        
        return mapper;
    }
}

================
File: eleme-business-service/src/main/java/org/example/controller/BusinessController.java
================
package org.example.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.R;
import org.example.entity.Business;
import org.example.service.BusinessService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

/**
 * 商家控制器
 */
@Slf4j
@RestController
@RequestMapping("/business")
@Tag(name = "商家管理", description = "商家信息查询、搜索、分类等功能")
@Validated
public class BusinessController {

    @Autowired
    private BusinessService businessService;

    /**
     * 根据ID获取商家详细信息
     */
    @PostMapping("/getBusinessById")
    @Operation(summary = "获取商家详情", description = "根据商家ID获取详细信息，包含食物列表")
    public R<Business> getBusinessById(@RequestBody Map<String, Integer> request) {
        Integer id = request.get("ID");
        log.info("获取商家详情请求: {}", id);
        return businessService.getBusinessById(id);
    }

    /**
     * 根据ID获取商家详细信息（供其他服务调用）
     */
    @GetMapping("/{id}")
    @Operation(summary = "获取商家详情", description = "根据商家ID获取详细信息（供其他服务调用）")
    public R<Business> getBusinessByIdForService(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable("id") Integer id) {
        log.info("获取商家详情请求（服务调用）: {}", id);
        return businessService.getBusinessById(id);
    }

    /**
     * 获取所有商家
     */
    @PostMapping("/getAll")
    @Operation(summary = "获取所有商家", description = "获取所有正常营业的商家列表")
    public R<List<Business>> getAllBusiness() {
        log.info("获取所有商家请求");
        return businessService.getAllBusiness();
    }

    /**
     * 根据类型获取商家
     */
    @PostMapping("/getBusinessByType")
    @Operation(summary = "按类型获取商家", description = "根据商家类型获取商家列表")
    public R<List<Business>> getBusinessByType(@RequestBody Map<String, String> request) {
        String type = request.get("type");
        log.info("根据类型获取商家请求: {}", type);
        return businessService.getBusinessByType(type);
    }

    /**
     * 搜索商家
     */
    @PostMapping("/search")
    @Operation(summary = "搜索商家", description = "根据关键字搜索商家")
    public R<List<Business>> searchBusiness(@RequestBody Map<String, String> request) {
        String keyword = request.get("keyword");
        log.info("搜索商家请求: {}", keyword);
        return businessService.searchBusiness(keyword);
    }

    /**
     * 获取推荐商家
     */
    @GetMapping("/recommend")
    @Operation(summary = "获取推荐商家", description = "获取推荐的商家列表（按评分和销量排序）")
    public R<List<Business>> getRecommendBusiness(
            @Parameter(description = "限制数量，默认10个") 
            @RequestParam(defaultValue = "10") Integer limit) {
        log.info("获取推荐商家请求，数量: {}", limit);
        return businessService.getRecommendBusiness(limit);
    }

    /**
     * 获取新商家
     */
    @GetMapping("/new")
    @Operation(summary = "获取新商家", description = "获取新开的商家列表（按创建时间排序）")
    public R<List<Business>> getNewBusiness(
            @Parameter(description = "限制数量，默认10个") 
            @RequestParam(defaultValue = "10") Integer limit) {
        log.info("获取新商家请求，数量: {}", limit);
        return businessService.getNewBusiness(limit);
    }

    /**
     * 获取热门商家
     */
    @GetMapping("/popular")
    @Operation(summary = "获取热门商家", description = "获取热门商家列表（按销量排序）")
    public R<List<Business>> getPopularBusiness(
            @Parameter(description = "限制数量，默认10个") 
            @RequestParam(defaultValue = "10") Integer limit) {
        log.info("获取热门商家请求，数量: {}", limit);
        return businessService.getPopularBusiness(limit);
    }

    /**
     * 根据评分获取商家
     */
    @GetMapping("/byRating")
    @Operation(summary = "按评分获取商家", description = "获取评分不低于指定值的商家")
    public R<List<Business>> getBusinessByRating(
            @Parameter(description = "最低评分，0-5之间") 
            @RequestParam Double minRating) {
        log.info("根据评分获取商家请求，最低评分: {}", minRating);
        return businessService.getBusinessByRating(minRating);
    }

    /**
     * 按距离获取商家
     */
    @GetMapping("/byDistance")
    @Operation(summary = "按距离获取商家", description = "按距离远近排序获取商家")
    public R<List<Business>> getBusinessByDistance() {
        log.info("按距离获取商家请求");
        return businessService.getBusinessByDistance();
    }

    /**
     * 获取所有商家类型
     */
    @GetMapping("/types")
    @Operation(summary = "获取商家类型", description = "获取所有可用的商家类型列表")
    public R<List<String>> getAllBusinessTypes() {
        log.info("获取商家类型请求");
        return businessService.getAllBusinessTypes();
    }

    /**
     * 健康检查
     */
    @GetMapping("/health")
    @Operation(summary = "健康检查", description = "服务健康状态检查")
    public R<Object> health() {
        return R.success("商家服务运行正常");
    }
}

================
File: eleme-business-service/src/main/java/org/example/feign/FoodClient.java
================
package org.example.feign;

import org.example.dto.R;
import org.example.entity.Food;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.List;

/**
 * 食物服务Feign客户端
 */
@FeignClient(name = "eleme-food-service", fallback = FoodClientFallback.class, configuration = org.example.config.FeignConfig.class)
public interface FoodClient {

    /**
     * 根据商家ID获取食物列表
     *
     * @param businessId 商家ID
     * @return 食物列表
     */
    @GetMapping("/food/business/{businessId}/onsale")
    R<List<Food>> getFoodsByBusinessId(@PathVariable("businessId") Integer businessId);
}

================
File: eleme-business-service/src/main/java/org/example/feign/FoodClientFallback.java
================
package org.example.feign;

import lombok.extern.slf4j.Slf4j;
import org.example.dto.R;
import org.example.entity.Food;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

/**
 * 食物服务降级回调
 */
@Slf4j
@Component
public class FoodClientFallback implements FoodClient {

    @Override
    public R<List<Food>> getFoodsByBusinessId(Integer businessId) {
        log.warn("食物服务调用失败，执行降级逻辑，商家ID: {}", businessId);
        return R.success("食物服务暂时不可用", new ArrayList<>());
    }
}

================
File: eleme-business-service/src/main/java/org/example/mapper/BusinessMapper.java
================
package org.example.mapper;

import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.example.entity.Business;

import java.util.List;

/**
 * 商家Mapper接口
 */
@Mapper
public interface BusinessMapper extends BaseMapper<Business> {

    /**
     * 根据ID查找商家
     *
     * @param id 商家ID
     * @return 商家信息
     */
    @Select("SELECT * FROM business WHERE id = #{id} AND status = 1")
    Business findBusinessById(@Param("id") Integer id);

    /**
     * 查找所有正常营业的商家
     *
     * @return 商家列表
     */
    @Select("SELECT * FROM business WHERE status = 1 ORDER BY created_at DESC")
    List<Business> findAllActiveBusiness();

    /**
     * 根据类型查找商家
     *
     * @param type 商家类型
     * @return 商家列表
     */
    @Select("SELECT * FROM business WHERE type = #{type} AND status = 1 ORDER BY rating DESC")
    List<Business> findByType(@Param("type") String type);

    /**
     * 根据商家名称模糊查询
     *
     * @param keyword 关键字
     * @return 商家列表
     */
    @Select("SELECT * FROM business WHERE business_name LIKE CONCAT('%', #{keyword}, '%') AND status = 1 ORDER BY rating DESC")
    List<Business> findByBusinessNameContaining(@Param("keyword") String keyword);

    /**
     * 根据评分范围查询商家
     *
     * @param minRating 最低评分
     * @return 商家列表
     */
    @Select("SELECT * FROM business WHERE CAST(rating AS DECIMAL(3,1)) >= #{minRating} AND status = 1 ORDER BY rating DESC")
    List<Business> findByRatingGreaterThanEqual(@Param("minRating") Double minRating);

    /**
     * 获取推荐商家（评分高且销量好）
     *
     * @param limit 限制数量
     * @return 商家列表
     */
    @Select("SELECT * FROM business WHERE status = 1 ORDER BY CAST(rating AS DECIMAL(3,1)) DESC, CAST(sales AS UNSIGNED) DESC LIMIT #{limit}")
    List<Business> findRecommendBusiness(@Param("limit") Integer limit);

    /**
     * 获取新商家（按创建时间排序）
     *
     * @param limit 限制数量
     * @return 商家列表
     */
    @Select("SELECT * FROM business WHERE status = 1 ORDER BY created_at DESC LIMIT #{limit}")
    List<Business> findNewBusiness(@Param("limit") Integer limit);

    /**
     * 获取热门商家（按销量排序）
     *
     * @param limit 限制数量
     * @return 商家列表
     */
    @Select("SELECT * FROM business WHERE status = 1 ORDER BY CAST(sales AS UNSIGNED) DESC LIMIT #{limit}")
    List<Business> findPopularBusiness(@Param("limit") Integer limit);

    /**
     * 按距离查找商家（模拟，实际应该用地理位置计算）
     *
     * @param maxDistance 最大距离（字符串形式，如"1.2km"）
     * @return 商家列表
     */
    @Select("SELECT * FROM business WHERE status = 1 ORDER BY CAST(SUBSTRING(distance, 1, LENGTH(distance)-2) AS DECIMAL(3,1)) ASC")
    List<Business> findByDistance();

    /**
     * 获取商家类型列表
     *
     * @return 类型列表
     */
    @Select("SELECT DISTINCT type FROM business WHERE type IS NOT NULL AND type != '' AND status = 1")
    List<String> findAllTypes();
}

================
File: eleme-business-service/src/main/java/org/example/service/impl/BusinessServiceImpl.java
================
package org.example.service.impl;

import cn.hutool.core.util.StrUtil;
import com.alibaba.csp.sentinel.annotation.SentinelResource;
import lombok.extern.slf4j.Slf4j;
import org.example.constants.CommonConstants;
import org.example.dto.R;
import org.example.entity.Business;
import org.example.entity.Food;
import org.example.feign.FoodClient;
import org.example.mapper.BusinessMapper;
import org.example.service.BusinessService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * 商家服务实现类
 */
@Slf4j
@Service
public class BusinessServiceImpl implements BusinessService {

    @Autowired
    private BusinessMapper businessMapper;

    @Autowired
    private FoodClient foodClient;

    @Autowired
    private StringRedisTemplate redisTemplate;

    @Override
    @SentinelResource(value = "get-business-by-id", fallback = "getBusinessByIdFallback")
    public R<Business> getBusinessById(Integer id) {
        try {
            if (id == null || id <= 0) {
                return R.error(CommonConstants.ERROR_CODE, "商家ID不能为空");
            }

            // 先从缓存获取
            String cacheKey = CommonConstants.BUSINESS_CACHE_PREFIX + id;
            Business cachedBusiness = getCachedBusiness(cacheKey);
            if (cachedBusiness != null) {
                log.debug("从缓存获取商家信息: {}", id);
                return R.success(cachedBusiness);
            }

            // 从数据库获取商家信息
            Business business = businessMapper.findBusinessById(id);
            if (business == null) {
                return R.error(CommonConstants.NOT_FOUND_CODE, "商家不存在");
            }

            // 处理商家的折扣和侧边栏数据
            processBusinessData(business);

            // 获取商家的食物列表
            try {
                R<List<Food>> foodResult = foodClient.getFoodsByBusinessId(id);
                if (foodResult.isSuccess() && foodResult.getData() != null) {
                    business.setFoodList(foodResult.getData());
                } else {
                    business.setFoodList(new ArrayList<>());
                    log.warn("获取商家 {} 的食物列表失败", id);
                }
            } catch (Exception e) {
                log.error("调用食物服务失败", e);
                business.setFoodList(new ArrayList<>());
            }

            // 缓存商家信息
            cacheBusiness(cacheKey, business);

            log.info("获取商家详情成功: {}", id);
            return R.success(business);

        } catch (Exception e) {
            log.error("获取商家详情异常", e);
            return R.error("获取商家信息失败");
        }
    }

    @Override
    @SentinelResource(value = "get-all-business", fallback = "getAllBusinessFallback")
    public R<List<Business>> getAllBusiness() {
        try {
            List<Business> businessList = businessMapper.findAllActiveBusiness();
            
            // 处理每个商家的数据
            businessList.forEach(this::processBusinessData);
            
            log.info("获取所有商家成功，数量: {}", businessList.size());
            return R.success(businessList);

        } catch (Exception e) {
            log.error("获取所有商家异常", e);
            return R.error("获取商家列表失败");
        }
    }

    @Override
    @SentinelResource(value = "get-business-by-type", fallback = "getBusinessByTypeFallback")
    public R<List<Business>> getBusinessByType(String type) {
        try {
            if (StrUtil.isBlank(type)) {
                return R.error(CommonConstants.ERROR_CODE, "商家类型不能为空");
            }

            List<Business> businessList = businessMapper.findByType(type);
            
            // 处理每个商家的数据
            businessList.forEach(this::processBusinessData);
            
            log.info("根据类型获取商家成功，类型: {}, 数量: {}", type, businessList.size());
            return R.success(businessList);

        } catch (Exception e) {
            log.error("根据类型获取商家异常", e);
            return R.error("获取商家列表失败");
        }
    }

    @Override
    @SentinelResource(value = "search-business", fallback = "searchBusinessFallback")
    public R<List<Business>> searchBusiness(String keyword) {
        try {
            if (StrUtil.isBlank(keyword)) {
                return R.error(CommonConstants.ERROR_CODE, "搜索关键字不能为空");
            }

            List<Business> businessList = businessMapper.findByBusinessNameContaining(keyword);
            
            // 处理每个商家的数据
            businessList.forEach(this::processBusinessData);
            
            log.info("搜索商家成功，关键字: {}, 数量: {}", keyword, businessList.size());
            return R.success(businessList);

        } catch (Exception e) {
            log.error("搜索商家异常", e);
            return R.error("搜索商家失败");
        }
    }

    @Override
    @SentinelResource(value = "get-recommend-business", fallback = "getRecommendBusinessFallback")
    public R<List<Business>> getRecommendBusiness(Integer limit) {
        try {
            if (limit == null || limit <= 0) {
                limit = 10; // 默认10个
            }

            List<Business> businessList = businessMapper.findRecommendBusiness(limit);
            
            // 处理每个商家的数据
            businessList.forEach(this::processBusinessData);
            
            log.info("获取推荐商家成功，数量: {}", businessList.size());
            return R.success(businessList);

        } catch (Exception e) {
            log.error("获取推荐商家异常", e);
            return R.error("获取推荐商家失败");
        }
    }

    @Override
    @SentinelResource(value = "get-new-business", fallback = "getNewBusinessFallback")
    public R<List<Business>> getNewBusiness(Integer limit) {
        try {
            if (limit == null || limit <= 0) {
                limit = 10; // 默认10个
            }

            List<Business> businessList = businessMapper.findNewBusiness(limit);
            
            // 处理每个商家的数据
            businessList.forEach(this::processBusinessData);
            
            log.info("获取新商家成功，数量: {}", businessList.size());
            return R.success(businessList);

        } catch (Exception e) {
            log.error("获取新商家异常", e);
            return R.error("获取新商家失败");
        }
    }

    @Override
    @SentinelResource(value = "get-popular-business", fallback = "getPopularBusinessFallback")
    public R<List<Business>> getPopularBusiness(Integer limit) {
        try {
            if (limit == null || limit <= 0) {
                limit = 10; // 默认10个
            }

            List<Business> businessList = businessMapper.findPopularBusiness(limit);
            
            // 处理每个商家的数据
            businessList.forEach(this::processBusinessData);
            
            log.info("获取热门商家成功，数量: {}", businessList.size());
            return R.success(businessList);

        } catch (Exception e) {
            log.error("获取热门商家异常", e);
            return R.error("获取热门商家失败");
        }
    }

    @Override
    @SentinelResource(value = "get-business-by-rating", fallback = "getBusinessByRatingFallback")
    public R<List<Business>> getBusinessByRating(Double minRating) {
        try {
            if (minRating == null || minRating < 0 || minRating > 5) {
                return R.error(CommonConstants.ERROR_CODE, "评分范围应在0-5之间");
            }

            List<Business> businessList = businessMapper.findByRatingGreaterThanEqual(minRating);
            
            // 处理每个商家的数据
            businessList.forEach(this::processBusinessData);
            
            log.info("根据评分获取商家成功，最低评分: {}, 数量: {}", minRating, businessList.size());
            return R.success(businessList);

        } catch (Exception e) {
            log.error("根据评分获取商家异常", e);
            return R.error("获取商家列表失败");
        }
    }

    @Override
    @SentinelResource(value = "get-business-by-distance", fallback = "getBusinessByDistanceFallback")
    public R<List<Business>> getBusinessByDistance() {
        try {
            List<Business> businessList = businessMapper.findByDistance();
            
            // 处理每个商家的数据
            businessList.forEach(this::processBusinessData);
            
            log.info("按距离获取商家成功，数量: {}", businessList.size());
            return R.success(businessList);

        } catch (Exception e) {
            log.error("按距离获取商家异常", e);
            return R.error("获取商家列表失败");
        }
    }

    @Override
    @SentinelResource(value = "get-business-types", fallback = "getAllBusinessTypesFallback")
    public R<List<String>> getAllBusinessTypes() {
        try {
            List<String> types = businessMapper.findAllTypes();
            
            log.info("获取商家类型成功，数量: {}", types.size());
            return R.success(types);

        } catch (Exception e) {
            log.error("获取商家类型异常", e);
            return R.error("获取商家类型失败");
        }
    }

    /**
     * 处理商家数据（折扣、侧边栏等）
     */
    private void processBusinessData(Business business) {
        if (business == null) return;
        
        // 处理折扣信息
        if (StrUtil.isNotBlank(business.getDiscounts())) {
            business.setDiscounts(business.getDiscounts());
        }
        
        // 处理侧边栏信息
        if (StrUtil.isNotBlank(business.getSidebarItems())) {
            business.setSidebarItems(business.getSidebarItems());
        }
    }

    /**
     * 从缓存获取商家信息
     */
    private Business getCachedBusiness(String cacheKey) {
        try {
            // 这里可以实现Redis缓存逻辑
            // 由于JSON序列化复杂，这里暂时返回null
            return null;
        } catch (Exception e) {
            log.warn("从缓存获取商家信息失败", e);
            return null;
        }
    }

    /**
     * 缓存商家信息
     */
    private void cacheBusiness(String cacheKey, Business business) {
        try {
            // 这里可以实现Redis缓存逻辑
            // 由于JSON序列化复杂，这里暂时不实现
            log.debug("缓存商家信息: {}", business.getId());
        } catch (Exception e) {
            log.warn("缓存商家信息失败", e);
        }
    }

    // Sentinel 降级方法
    public R<Business> getBusinessByIdFallback(Integer id, Throwable ex) {
        log.error("获取商家详情服务降级", ex);
        return R.error("商家服务暂时不可用");
    }

    public R<List<Business>> getAllBusinessFallback(Throwable ex) {
        log.error("获取所有商家服务降级", ex);
        return R.error("商家服务暂时不可用");
    }

    public R<List<Business>> getBusinessByTypeFallback(String type, Throwable ex) {
        log.error("根据类型获取商家服务降级", ex);
        return R.error("商家服务暂时不可用");
    }

    public R<List<Business>> searchBusinessFallback(String keyword, Throwable ex) {
        log.error("搜索商家服务降级", ex);
        return R.error("搜索服务暂时不可用");
    }

    public R<List<Business>> getRecommendBusinessFallback(Integer limit, Throwable ex) {
        log.error("获取推荐商家服务降级", ex);
        return R.error("推荐服务暂时不可用");
    }

    public R<List<Business>> getNewBusinessFallback(Integer limit, Throwable ex) {
        log.error("获取新商家服务降级", ex);
        return R.error("商家服务暂时不可用");
    }

    public R<List<Business>> getPopularBusinessFallback(Integer limit, Throwable ex) {
        log.error("获取热门商家服务降级", ex);
        return R.error("商家服务暂时不可用");
    }

    public R<List<Business>> getBusinessByRatingFallback(Double minRating, Throwable ex) {
        log.error("根据评分获取商家服务降级", ex);
        return R.error("商家服务暂时不可用");
    }

    public R<List<Business>> getBusinessByDistanceFallback(Throwable ex) {
        log.error("按距离获取商家服务降级", ex);
        return R.error("商家服务暂时不可用");
    }

    public R<List<String>> getAllBusinessTypesFallback(Throwable ex) {
        log.error("获取商家类型服务降级", ex);
        return R.error("商家服务暂时不可用");
    }
}

================
File: eleme-business-service/src/main/java/org/example/service/BusinessService.java
================
package org.example.service;

import org.example.dto.R;
import org.example.entity.Business;

import java.util.List;

/**
 * 商家服务接口
 */
public interface BusinessService {

    /**
     * 根据ID获取商家详细信息（包含食物列表）
     *
     * @param id 商家ID
     * @return 商家详细信息
     */
    R<Business> getBusinessById(Integer id);

    /**
     * 获取所有正常营业的商家
     *
     * @return 商家列表
     */
    R<List<Business>> getAllBusiness();

    /**
     * 根据类型获取商家
     *
     * @param type 商家类型
     * @return 商家列表
     */
    R<List<Business>> getBusinessByType(String type);

    /**
     * 搜索商家
     *
     * @param keyword 搜索关键字
     * @return 商家列表
     */
    R<List<Business>> searchBusiness(String keyword);

    /**
     * 获取推荐商家
     *
     * @param limit 限制数量
     * @return 商家列表
     */
    R<List<Business>> getRecommendBusiness(Integer limit);

    /**
     * 获取新商家
     *
     * @param limit 限制数量
     * @return 商家列表
     */
    R<List<Business>> getNewBusiness(Integer limit);

    /**
     * 获取热门商家
     *
     * @param limit 限制数量
     * @return 商家列表
     */
    R<List<Business>> getPopularBusiness(Integer limit);

    /**
     * 根据评分获取商家
     *
     * @param minRating 最低评分
     * @return 商家列表
     */
    R<List<Business>> getBusinessByRating(Double minRating);

    /**
     * 按距离获取商家
     *
     * @return 商家列表
     */
    R<List<Business>> getBusinessByDistance();

    /**
     * 获取所有商家类型
     *
     * @return 类型列表
     */
    R<List<String>> getAllBusinessTypes();
}

================
File: eleme-business-service/src/main/java/org/example/BusinessServiceApplication.java
================
package org.example;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

/**
 * 商家服务启动类
 */
@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
@MapperScan("org.example.mapper")
public class BusinessServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(BusinessServiceApplication.class, args);
    }
}

================
File: eleme-business-service/src/main/resources/application.yml
================
server:
  port: 8002

spring:
  application:
    name: eleme-business-service
  
  config:
    import: "optional:nacos:eleme-business-service.yml"
  
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: public
        group: DEFAULT_GROUP
        username: nacos
        password: nacos
      config:
        server-addr: localhost:8848
        file-extension: yml
        namespace: public
        group: DEFAULT_GROUP
        username: nacos
        password: nacos
        shared-configs:
          - data-id: eleme-business-service.yml
            group: DEFAULT_GROUP
            refresh: true
    
    sentinel:
      transport:
        dashboard: localhost:8080
        port: 8722
      eager: true
      log:
        dir: logs/sentinel
      datasource:
        ds1:
          nacos:
            server-addr: localhost:8848
            dataId: business-service-flow-rules
            groupId: SENTINEL_GROUP
            rule-type: flow
        ds2:
          nacos:
            server-addr: localhost:8848
            dataId: business-service-degraded-rules
            groupId: SENTINEL_GROUP
            rule-type: degrade

  # 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/eleme_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false&allowPublicKeyRetrieval=true
    username: eleme
    password: eleme123
    druid:
      initial-size: 5
      min-idle: 5
      max-active: 20
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      filter:
        stat:
          enabled: true
          log-slow-sql: true
          slow-sql-millis: 2000
          merge-sql: true
        wall:
          enabled: true
          config:
            multi-statement-allow: true

  # Redis配置
  redis:
    host: localhost
    port: 6379
    password: redis123
    database: 1
    jedis:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
    timeout: 3000ms

# MyBatis Plus 配置
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
  global-config:
    db-config:
      id-type: auto
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
  mapper-locations: classpath*:/mapper/**/*.xml

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}

# Swagger配置
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  info:
    title: 饿了么商家服务API
    description: 商家信息查询、搜索、分类等功能
    version: 1.0.0
    contact:
      name: 开发团队
      email: dev@eleme.com

# 日志配置
logging:
  level:
    org.example: DEBUG
    com.baomidou.mybatisplus: DEBUG
  file:
    name: logs/business-service.log
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

================
File: eleme-business-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-business-service</artifactId>
    <packaging>jar</packaging>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Nacos 服务发现 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!-- Nacos 配置中心 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!-- Spring Cloud OpenFeign -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

        <!-- Spring Cloud LoadBalancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>

        <!-- Sentinel 熔断降级 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>

        <!-- MySQL 驱动 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
        </dependency>

        <!-- MyBatis Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>

        <!-- Druid 数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
        </dependency>

        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Jackson JSR310 for LocalDateTime serialization -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- 公共模块 -->
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>eleme-common</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- Hutool 工具包 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <!-- FastJSON -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>

        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

================
File: eleme-captcha-service/src/main/java/org/example/controller/CaptchaController.java
================
package org.example.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.CaptchaGenerateRequest;
import org.example.dto.CaptchaValidateRequest;
import org.example.dto.CaptchaResponse;
import org.example.service.CaptchaService;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.util.Map;

/**
 * 验证码控制器
 */
@Slf4j
@RestController
@RequestMapping("/captcha")
@RequiredArgsConstructor
@Validated
@Tag(name = "验证码服务", description = "提供各种类型的验证码生成和验证功能")
public class CaptchaController {
    
    private final CaptchaService captchaService;
    
    /**
     * 生成验证码
     */
    @PostMapping("/generate")
    @Operation(summary = "生成验证码", description = "根据类型生成不同的验证码")
    public ResponseEntity<CaptchaResponse> generateCaptcha(
            @Valid @RequestBody CaptchaGenerateRequest request,
            HttpServletRequest httpRequest) {
        
        // 设置客户端信息
        if (request.getClientIp() == null) {
            request.setClientIp(getClientIp(httpRequest));
        }
        if (request.getUserAgent() == null) {
            request.setUserAgent(httpRequest.getHeader("User-Agent"));
        }
        
        log.info("收到验证码生成请求，类型：{}", request.getType());
        
        CaptchaResponse response = captchaService.generateCaptcha(request);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 验证验证码
     */
    @PostMapping("/validate")
    @Operation(summary = "验证验证码", description = "验证各种类型的验证码")
    public ResponseEntity<Map<String, Object>> validateCaptcha(
            @Valid @RequestBody CaptchaValidateRequest request,
            HttpServletRequest httpRequest) {
        
        // 设置客户端信息
        if (request.getClientIp() == null) {
            request.setClientIp(getClientIp(httpRequest));
        }
        
        log.info("收到验证码验证请求，类型：{}，Key：{}", request.getType(), request.getKey());
        
        boolean isValid = captchaService.validateCaptcha(request);
        
        Map<String, Object> result = Map.of(
            "valid", isValid,
            "message", isValid ? "验证码验证成功" : "验证码验证失败"
        );
        
        return ResponseEntity.ok(result);
    }
    
    /**
     * 生成图形验证码
     */
    @PostMapping("/image")
    @Operation(summary = "生成图形验证码", description = "生成图形验证码")
    public ResponseEntity<CaptchaResponse> generateImageCaptcha(
            @RequestBody(required = false) CaptchaGenerateRequest request,
            HttpServletRequest httpRequest) {
        
        if (request == null) {
            request = new CaptchaGenerateRequest();
        }
        request.setType("image");
        request.setClientIp(getClientIp(httpRequest));
        request.setUserAgent(httpRequest.getHeader("User-Agent"));
        
        log.info("收到图形验证码生成请求");
        
        CaptchaResponse response = captchaService.generateImageCaptcha(request);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 生成短信验证码
     */
    @PostMapping("/sms")
    @Operation(summary = "生成短信验证码", description = "生成短信验证码")
    public ResponseEntity<CaptchaResponse> generateSmsVerificationCode(
            @RequestParam String phone,
            @RequestParam(required = false) String scene,
            HttpServletRequest httpRequest) {
        
        CaptchaGenerateRequest request = new CaptchaGenerateRequest();
        request.setType("sms");
        request.setReceiver(phone);
        request.setScene(scene);
        request.setClientIp(getClientIp(httpRequest));
        request.setUserAgent(httpRequest.getHeader("User-Agent"));
        
        log.info("收到短信验证码生成请求，手机号：{}", phone);
        
        CaptchaResponse response = captchaService.generateSmsVerificationCode(request);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 生成邮箱验证码
     */
    @PostMapping("/email")
    @Operation(summary = "生成邮箱验证码", description = "生成邮箱验证码")
    public ResponseEntity<CaptchaResponse> generateEmailVerificationCode(
            @RequestParam String email,
            @RequestParam(required = false) String scene,
            HttpServletRequest httpRequest) {
        
        CaptchaGenerateRequest request = new CaptchaGenerateRequest();
        request.setType("email");
        request.setReceiver(email);
        request.setScene(scene);
        request.setClientIp(getClientIp(httpRequest));
        request.setUserAgent(httpRequest.getHeader("User-Agent"));
        
        log.info("收到邮箱验证码生成请求，邮箱：{}", email);
        
        CaptchaResponse response = captchaService.generateEmailVerificationCode(request);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 生成滑动验证码
     */
    @PostMapping("/slider")
    @Operation(summary = "生成滑动验证码", description = "生成滑动验证码")
    public ResponseEntity<CaptchaResponse> generateSliderCaptcha(
            @RequestBody(required = false) CaptchaGenerateRequest request,
            HttpServletRequest httpRequest) {
        
        if (request == null) {
            request = new CaptchaGenerateRequest();
        }
        request.setType("slider");
        request.setClientIp(getClientIp(httpRequest));
        request.setUserAgent(httpRequest.getHeader("User-Agent"));
        
        log.info("收到滑动验证码生成请求");
        
        CaptchaResponse response = captchaService.generateSliderCaptcha(request);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 生成点选验证码
     */
    @PostMapping("/click")
    @Operation(summary = "生成点选验证码", description = "生成点选验证码")
    public ResponseEntity<CaptchaResponse> generateClickCaptcha(
            @RequestBody(required = false) CaptchaGenerateRequest request,
            HttpServletRequest httpRequest) {
        
        if (request == null) {
            request = new CaptchaGenerateRequest();
        }
        request.setType("click");
        request.setClientIp(getClientIp(httpRequest));
        request.setUserAgent(httpRequest.getHeader("User-Agent"));
        
        log.info("收到点选验证码生成请求");
        
        CaptchaResponse response = captchaService.generateClickCaptcha(request);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 验证图形验证码
     */
    @PostMapping("/image/validate")
    @Operation(summary = "验证图形验证码", description = "验证图形验证码")
    public ResponseEntity<Map<String, Object>> validateImageCaptcha(
            @RequestParam String key,
            @RequestParam String value,
            HttpServletRequest httpRequest) {
        
        CaptchaValidateRequest request = new CaptchaValidateRequest();
        request.setType("image");
        request.setKey(key);
        request.setValue(value);
        request.setClientIp(getClientIp(httpRequest));
        
        log.info("收到图形验证码验证请求，Key：{}", key);
        
        boolean isValid = captchaService.validateCaptcha(request);
        
        Map<String, Object> result = Map.of(
            "valid", isValid,
            "message", isValid ? "验证码验证成功" : "验证码验证失败"
        );
        
        return ResponseEntity.ok(result);
    }
    
    /**
     * 验证短信验证码
     */
    @PostMapping("/sms/validate")
    @Operation(summary = "验证短信验证码", description = "验证短信验证码")
    public ResponseEntity<Map<String, Object>> validateSmsVerificationCode(
            @RequestParam String key,
            @RequestParam String code,
            @RequestParam String phone,
            HttpServletRequest httpRequest) {
        
        CaptchaValidateRequest request = new CaptchaValidateRequest();
        request.setType("sms");
        request.setKey(key);
        request.setValue(code);
        request.setReceiver(phone);
        request.setClientIp(getClientIp(httpRequest));
        
        log.info("收到短信验证码验证请求，Key：{}，手机号：{}", key, phone);
        
        boolean isValid = captchaService.validateCaptcha(request);
        
        Map<String, Object> result = Map.of(
            "valid", isValid,
            "message", isValid ? "验证码验证成功" : "验证码验证失败"
        );
        
        return ResponseEntity.ok(result);
    }
    
    /**
     * 验证邮箱验证码
     */
    @PostMapping("/email/validate")
    @Operation(summary = "验证邮箱验证码", description = "验证邮箱验证码")
    public ResponseEntity<Map<String, Object>> validateEmailVerificationCode(
            @RequestParam String key,
            @RequestParam String code,
            @RequestParam String email,
            HttpServletRequest httpRequest) {
        
        CaptchaValidateRequest request = new CaptchaValidateRequest();
        request.setType("email");
        request.setKey(key);
        request.setValue(code);
        request.setReceiver(email);
        request.setClientIp(getClientIp(httpRequest));
        
        log.info("收到邮箱验证码验证请求，Key：{}，邮箱：{}", key, email);
        
        boolean isValid = captchaService.validateCaptcha(request);
        
        Map<String, Object> result = Map.of(
            "valid", isValid,
            "message", isValid ? "验证码验证成功" : "验证码验证失败"
        );
        
        return ResponseEntity.ok(result);
    }
    
    /**
     * 健康检查
     */
    @GetMapping("/health")
    @Operation(summary = "健康检查", description = "检查验证码服务健康状态")
    public ResponseEntity<Map<String, Object>> health() {
        Map<String, Object> health = Map.of(
            "status", "UP",
            "service", "eleme-captcha-service",
            "timestamp", System.currentTimeMillis()
        );
        return ResponseEntity.ok(health);
    }
    
    /**
     * 清理过期验证码
     */
    @PostMapping("/cleanup")
    @Operation(summary = "清理过期验证码", description = "清理过期的验证码")
    public ResponseEntity<Map<String, String>> cleanup() {
        log.info("开始清理过期验证码");
        
        try {
            captchaService.cleanupExpiredCaptcha();
            return ResponseEntity.ok(Map.of("message", "清理过期验证码成功"));
        } catch (Exception e) {
            log.error("清理过期验证码失败", e);
            return ResponseEntity.ok(Map.of("message", "清理过期验证码失败：" + e.getMessage()));
        }
    }
    
    /**
     * 获取客户端IP
     */
    private String getClientIp(HttpServletRequest request) {
        String ip = request.getHeader("X-Forwarded-For");
        if (ip == null || ip.isEmpty() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("X-Real-IP");
        }
        if (ip == null || ip.isEmpty() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("Proxy-Client-IP");
        }
        if (ip == null || ip.isEmpty() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("WL-Proxy-Client-IP");
        }
        if (ip == null || ip.isEmpty() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getRemoteAddr();
        }
        
        // 处理多个IP的情况
        if (ip != null && ip.contains(",")) {
            ip = ip.split(",")[0].trim();
        }
        
        return ip;
    }
}

================
File: eleme-captcha-service/src/main/java/org/example/dto/CaptchaGenerateRequest.java
================
package org.example.dto;

import lombok.Data;
import jakarta.validation.constraints.NotBlank;

/**
 * 验证码生成请求DTO
 */
@Data
public class CaptchaGenerateRequest {
    
    /**
     * 验证码类型：image, sms, email, slider, click
     */
    @NotBlank(message = "验证码类型不能为空")
    private String type;
    
    /**
     * 接收者（手机号或邮箱，用于短信和邮箱验证码）
     */
    private String receiver;
    
    /**
     * 验证码长度（可选，使用默认配置）
     */
    private Integer length;
    
    /**
     * 图片宽度（图形验证码）
     */
    private Integer width;
    
    /**
     * 图片高度（图形验证码）
     */
    private Integer height;
    
    /**
     * 客户端IP
     */
    private String clientIp;
    
    /**
     * 用户代理
     */
    private String userAgent;
    
    /**
     * 业务场景：login, register, resetPassword等
     */
    private String scene;
}

================
File: eleme-captcha-service/src/main/java/org/example/dto/CaptchaResponse.java
================
package org.example.dto;

import lombok.Data;
import java.time.LocalDateTime;

/**
 * 验证码响应DTO
 */
@Data
public class CaptchaResponse {
    
    /**
     * 验证码Key
     */
    private String key;
    
    /**
     * 验证码类型
     */
    private String type;
    
    /**
     * 图形验证码Base64编码（图形验证码）
     */
    private String imageBase64;
    
    /**
     * 图形验证码DataURL（图形验证码）
     */
    private String imageDataUrl;
    
    /**
     * 滑动验证码背景图片（滑动验证码）
     */
    private String backgroundImage;
    
    /**
     * 滑动验证码拼图图片（滑动验证码）
     */
    private String sliderImage;
    
    /**
     * 滑动验证码正确位置（服务端不返回，仅用于内部验证）
     */
    private Integer correctPosition;
    
    /**
     * 点选验证码图片（点选验证码）
     */
    private String clickImage;
    
    /**
     * 点选验证码提示文字（点选验证码）
     */
    private String clickText;
    
    /**
     * 验证码过期时间
     */
    private LocalDateTime expireTime;
    
    /**
     * 验证码过期时间（秒）
     */
    private Integer expireSeconds;
    
    /**
     * 创建时间
     */
    private LocalDateTime createTime;
    
    /**
     * 接收者（短信和邮箱验证码）
     */
    private String receiver;
    
    /**
     * 发送状态（短信和邮箱验证码）
     */
    private String sendStatus;
    
    /**
     * 成功标志
     */
    private Boolean success = true;
    
    /**
     * 错误信息
     */
    private String message;
}

================
File: eleme-captcha-service/src/main/java/org/example/dto/CaptchaValidateRequest.java
================
package org.example.dto;

import lombok.Data;
import jakarta.validation.constraints.NotBlank;
import java.util.List;

/**
 * 验证码验证请求DTO
 */
@Data
public class CaptchaValidateRequest {
    
    /**
     * 验证码类型：image, sms, email, slider, click
     */
    @NotBlank(message = "验证码类型不能为空")
    private String type;
    
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    private String key;
    
    /**
     * 验证码值
     */
    @NotBlank(message = "验证码值不能为空")
    private String value;
    
    /**
     * 接收者（手机号或邮箱，用于短信和邮箱验证码）
     */
    private String receiver;
    
    /**
     * 滑动验证码位置（滑动验证码）
     */
    private Integer sliderPosition;
    
    /**
     * 点选验证码坐标（点选验证码）
     */
    private List<CaptchaPoint> clickPoints;
    
    /**
     * 验证成功后是否立即使用（标记为已使用）
     */
    private Boolean useImmediately = true;
    
    /**
     * 客户端IP
     */
    private String clientIp;
    
    /**
     * 点选验证码坐标点
     */
    @Data
    public static class CaptchaPoint {
        private Integer x;
        private Integer y;
    }
}

================
File: eleme-captcha-service/src/main/java/org/example/service/impl/CaptchaServiceImpl.java
================
package org.example.service.impl;

import com.alibaba.csp.sentinel.annotation.SentinelResource;
import com.wf.captcha.ArithmeticCaptcha;
import com.wf.captcha.ChineseCaptcha;
import com.wf.captcha.SpecCaptcha;
import com.wf.captcha.base.Captcha;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.CaptchaGenerateRequest;
import org.example.dto.CaptchaValidateRequest;
import org.example.dto.CaptchaResponse;
import org.example.service.CaptchaService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

/**
 * 验证码服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CaptchaServiceImpl implements CaptchaService {
    
    private final StringRedisTemplate redisTemplate;
    
    @Value("${captcha.image.type:arithmetic}")
    private String imageCaptchaType;
    
    @Value("${captcha.image.length:4}")
    private Integer imageCaptchaLength;
    
    @Value("${captcha.image.width:120}")
    private Integer imageCaptchaWidth;
    
    @Value("${captcha.image.height:40}")
    private Integer imageCaptchaHeight;
    
    @Value("${captcha.image.expire-seconds:300}")
    private Integer imageCaptchaExpireSeconds;
    
    @Value("${captcha.sms.length:6}")
    private Integer smsCodeLength;
    
    @Value("${captcha.sms.expire-seconds:300}")
    private Integer smsCodeExpireSeconds;
    
    @Value("${captcha.sms.rate-limit-seconds:60}")
    private Integer smsRateLimitSeconds;
    
    @Value("${captcha.email.length:6}")
    private Integer emailCodeLength;
    
    @Value("${captcha.email.expire-seconds:300}")
    private Integer emailCodeExpireSeconds;
    
    @Value("${captcha.email.rate-limit-seconds:60}")
    private Integer emailRateLimitSeconds;
    
    private static final String CAPTCHA_PREFIX = "captcha:";
    private static final String RATE_LIMIT_PREFIX = "rate_limit:";
    
    @Override
    @SentinelResource(value = "generateCaptcha", fallback = "generateCaptchaFallback")
    public CaptchaResponse generateCaptcha(CaptchaGenerateRequest request) {
        log.info("生成验证码请求，类型：{}", request.getType());
        
        // 检查频率限制
        if (!checkRateLimit(request.getType(), getIdentifier(request))) {
            CaptchaResponse response = new CaptchaResponse();
            response.setSuccess(false);
            response.setMessage("请求过于频繁，请稍后再试");
            return response;
        }
        
        switch (request.getType().toLowerCase()) {
            case "image":
                return generateImageCaptcha(request);
            case "sms":
                return generateSmsVerificationCode(request);
            case "email":
                return generateEmailVerificationCode(request);
            case "slider":
                return generateSliderCaptcha(request);
            case "click":
                return generateClickCaptcha(request);
            default:
                throw new IllegalArgumentException("不支持的验证码类型: " + request.getType());
        }
    }
    
    @Override
    public boolean validateCaptcha(CaptchaValidateRequest request) {
        log.info("验证验证码请求，类型：{}，Key：{}", request.getType(), request.getKey());
        
        String key = CAPTCHA_PREFIX + request.getKey();
        String storedValue = redisTemplate.opsForValue().get(key);
        
        if (!StringUtils.hasText(storedValue)) {
            log.warn("验证码不存在或已过期，Key：{}", request.getKey());
            return false;
        }
        
        boolean isValid = false;
        
        switch (request.getType().toLowerCase()) {
            case "image":
            case "sms":
            case "email":
                isValid = storedValue.equalsIgnoreCase(request.getValue());
                break;
            case "slider":
                isValid = validateSliderCaptcha(storedValue, request.getSliderPosition());
                break;
            case "click":
                isValid = validateClickCaptcha(storedValue, request.getClickPoints());
                break;
            default:
                log.error("不支持的验证码类型: {}", request.getType());
                return false;
        }
        
        if (isValid && request.getUseImmediately()) {
            // 验证成功后立即删除验证码
            redisTemplate.delete(key);
            log.info("验证码验证成功并已删除，Key：{}", request.getKey());
        }
        
        return isValid;
    }
    
    @Override
    public CaptchaResponse generateImageCaptcha(CaptchaGenerateRequest request) {
        try {
            // 创建验证码对象
            Captcha captcha = createCaptcha(request);
            
            // 生成验证码
            String captchaText = captcha.text();
            String captchaBase64 = captcha.toBase64();
            
            // 生成唯一Key
            String key = generateCaptchaKey();
            
            // 存储到Redis
            String redisKey = CAPTCHA_PREFIX + key;
            redisTemplate.opsForValue().set(redisKey, captchaText, imageCaptchaExpireSeconds, TimeUnit.SECONDS);
            
            // 构造响应
            CaptchaResponse response = new CaptchaResponse();
            response.setKey(key);
            response.setType("image");
            response.setImageBase64(captchaBase64);
            response.setImageDataUrl("data:image/png;base64," + captchaBase64);
            response.setExpireSeconds(imageCaptchaExpireSeconds);
            response.setExpireTime(LocalDateTime.now().plusSeconds(imageCaptchaExpireSeconds));
            response.setCreateTime(LocalDateTime.now());
            
            log.info("图形验证码生成成功，Key：{}", key);
            return response;
            
        } catch (Exception e) {
            log.error("图形验证码生成失败", e);
            throw new RuntimeException("图形验证码生成失败: " + e.getMessage());
        }
    }
    
    @Override
    public CaptchaResponse generateSmsVerificationCode(CaptchaGenerateRequest request) {
        if (!StringUtils.hasText(request.getReceiver())) {
            throw new IllegalArgumentException("手机号不能为空");
        }
        
        // 生成验证码
        String code = generateRandomCode(smsCodeLength);
        String key = generateCaptchaKey();
        
        // 存储到Redis
        String redisKey = CAPTCHA_PREFIX + key;
        redisTemplate.opsForValue().set(redisKey, code, smsCodeExpireSeconds, TimeUnit.SECONDS);
        
        // 设置频率限制
        String rateLimitKey = RATE_LIMIT_PREFIX + "sms:" + request.getReceiver();
        redisTemplate.opsForValue().set(rateLimitKey, "1", smsRateLimitSeconds, TimeUnit.SECONDS);
        
        // 构造响应
        CaptchaResponse response = new CaptchaResponse();
        response.setKey(key);
        response.setType("sms");
        response.setReceiver(request.getReceiver());
        response.setSendStatus("sent");
        response.setExpireSeconds(smsCodeExpireSeconds);
        response.setExpireTime(LocalDateTime.now().plusSeconds(smsCodeExpireSeconds));
        response.setCreateTime(LocalDateTime.now());
        
        log.info("短信验证码生成成功，Key：{}，接收者：{}", key, request.getReceiver());
        return response;
    }
    
    @Override
    public CaptchaResponse generateEmailVerificationCode(CaptchaGenerateRequest request) {
        if (!StringUtils.hasText(request.getReceiver())) {
            throw new IllegalArgumentException("邮箱地址不能为空");
        }
        
        // 生成验证码
        String code = generateRandomCode(emailCodeLength);
        String key = generateCaptchaKey();
        
        // 存储到Redis
        String redisKey = CAPTCHA_PREFIX + key;
        redisTemplate.opsForValue().set(redisKey, code, emailCodeExpireSeconds, TimeUnit.SECONDS);
        
        // 设置频率限制
        String rateLimitKey = RATE_LIMIT_PREFIX + "email:" + request.getReceiver();
        redisTemplate.opsForValue().set(rateLimitKey, "1", emailRateLimitSeconds, TimeUnit.SECONDS);
        
        // 构造响应
        CaptchaResponse response = new CaptchaResponse();
        response.setKey(key);
        response.setType("email");
        response.setReceiver(request.getReceiver());
        response.setSendStatus("sent");
        response.setExpireSeconds(emailCodeExpireSeconds);
        response.setExpireTime(LocalDateTime.now().plusSeconds(emailCodeExpireSeconds));
        response.setCreateTime(LocalDateTime.now());
        
        log.info("邮箱验证码生成成功，Key：{}，接收者：{}", key, request.getReceiver());
        return response;
    }
    
    @Override
    public CaptchaResponse generateSliderCaptcha(CaptchaGenerateRequest request) {
        // 这里简化实现，实际应用中需要生成带缺口的背景图和拼图
        String key = generateCaptchaKey();
        int correctPosition = new SecureRandom().nextInt(200) + 50; // 50-250像素范围
        
        // 存储正确位置到Redis
        String redisKey = CAPTCHA_PREFIX + key;
        redisTemplate.opsForValue().set(redisKey, String.valueOf(correctPosition), 300, TimeUnit.SECONDS);
        
        CaptchaResponse response = new CaptchaResponse();
        response.setKey(key);
        response.setType("slider");
        response.setBackgroundImage("/api/captcha/slider/background/" + key);
        response.setSliderImage("/api/captcha/slider/piece/" + key);
        response.setExpireSeconds(300);
        response.setExpireTime(LocalDateTime.now().plusSeconds(300));
        response.setCreateTime(LocalDateTime.now());
        
        log.info("滑动验证码生成成功，Key：{}", key);
        return response;
    }
    
    @Override
    public CaptchaResponse generateClickCaptcha(CaptchaGenerateRequest request) {
        // 这里简化实现，实际应用中需要生成带文字的图片
        String key = generateCaptchaKey();
        String clickText = "请点击文字：春";
        
        // 存储点击答案到Redis（简化为固定坐标）
        String redisKey = CAPTCHA_PREFIX + key;
        redisTemplate.opsForValue().set(redisKey, "100,150", 300, TimeUnit.SECONDS);
        
        CaptchaResponse response = new CaptchaResponse();
        response.setKey(key);
        response.setType("click");
        response.setClickImage("/api/captcha/click/image/" + key);
        response.setClickText(clickText);
        response.setExpireSeconds(300);
        response.setExpireTime(LocalDateTime.now().plusSeconds(300));
        response.setCreateTime(LocalDateTime.now());
        
        log.info("点选验证码生成成功，Key：{}", key);
        return response;
    }
    
    @Override
    public boolean checkRateLimit(String type, String identifier) {
        if (!StringUtils.hasText(identifier)) {
            return true;
        }
        
        String rateLimitKey = RATE_LIMIT_PREFIX + type + ":" + identifier;
        String exists = redisTemplate.opsForValue().get(rateLimitKey);
        
        return !StringUtils.hasText(exists);
    }
    
    @Override
    public void cleanupExpiredCaptcha() {
        // Redis的过期策略会自动清理过期的验证码
        log.info("验证码清理任务执行完成");
    }
    
    /**
     * 创建验证码对象
     */
    private Captcha createCaptcha(CaptchaGenerateRequest request) {
        int width = request.getWidth() != null ? request.getWidth() : imageCaptchaWidth;
        int height = request.getHeight() != null ? request.getHeight() : imageCaptchaHeight;
        int length = request.getLength() != null ? request.getLength() : imageCaptchaLength;
        
        Captcha captcha;
        switch (imageCaptchaType) {
            case "chinese":
                captcha = new ChineseCaptcha(width, height, length);
                break;
            case "spec":
                captcha = new SpecCaptcha(width, height, length);
                break;
            case "arithmetic":
            default:
                captcha = new ArithmeticCaptcha(width, height);
                break;
        }
        
        captcha.setCharType(Captcha.TYPE_DEFAULT);
        return captcha;
    }
    
    /**
     * 生成随机验证码
     */
    private String generateRandomCode(int length) {
        String chars = "0123456789";
        StringBuilder code = new StringBuilder();
        SecureRandom random = new SecureRandom();
        
        for (int i = 0; i < length; i++) {
            code.append(chars.charAt(random.nextInt(chars.length())));
        }
        
        return code.toString();
    }
    
    /**
     * 生成验证码Key
     */
    private String generateCaptchaKey() {
        return UUID.randomUUID().toString().replace("-", "");
    }
    
    /**
     * 获取标识符
     */
    private String getIdentifier(CaptchaGenerateRequest request) {
        if (StringUtils.hasText(request.getReceiver())) {
            return request.getReceiver();
        }
        return request.getClientIp();
    }
    
    /**
     * 验证滑动验证码
     */
    private boolean validateSliderCaptcha(String storedValue, Integer position) {
        try {
            int correctPosition = Integer.parseInt(storedValue);
            int tolerance = 5; // 允许5像素误差
            return Math.abs(correctPosition - position) <= tolerance;
        } catch (NumberFormatException e) {
            log.error("滑动验证码位置解析失败", e);
            return false;
        }
    }
    
    /**
     * 验证点选验证码
     */
    private boolean validateClickCaptcha(String storedValue, java.util.List<CaptchaValidateRequest.CaptchaPoint> clickPoints) {
        try {
            String[] coords = storedValue.split(",");
            if (coords.length != 2 || clickPoints == null || clickPoints.isEmpty()) {
                return false;
            }
            
            int correctX = Integer.parseInt(coords[0]);
            int correctY = Integer.parseInt(coords[1]);
            int tolerance = 10; // 允许10像素误差
            
            for (CaptchaValidateRequest.CaptchaPoint point : clickPoints) {
                if (Math.abs(point.getX() - correctX) <= tolerance && 
                    Math.abs(point.getY() - correctY) <= tolerance) {
                    return true;
                }
            }
            
            return false;
        } catch (NumberFormatException e) {
            log.error("点选验证码坐标解析失败", e);
            return false;
        }
    }
    
    /**
     * 生成验证码失败回调
     */
    public CaptchaResponse generateCaptchaFallback(CaptchaGenerateRequest request, Throwable ex) {
        log.error("验证码生成服务降级，类型：{}，错误：{}", request.getType(), ex.getMessage());
        
        CaptchaResponse response = new CaptchaResponse();
        response.setSuccess(false);
        response.setMessage("验证码服务暂时不可用，请稍后再试");
        response.setType(request.getType());
        response.setCreateTime(LocalDateTime.now());
        
        return response;
    }
}

================
File: eleme-captcha-service/src/main/java/org/example/service/CaptchaService.java
================
package org.example.service;

import org.example.dto.CaptchaGenerateRequest;
import org.example.dto.CaptchaValidateRequest;
import org.example.dto.CaptchaResponse;

/**
 * 验证码服务接口
 */
public interface CaptchaService {
    
    /**
     * 生成验证码
     */
    CaptchaResponse generateCaptcha(CaptchaGenerateRequest request);
    
    /**
     * 验证验证码
     */
    boolean validateCaptcha(CaptchaValidateRequest request);
    
    /**
     * 生成图形验证码
     */
    CaptchaResponse generateImageCaptcha(CaptchaGenerateRequest request);
    
    /**
     * 生成短信验证码
     */
    CaptchaResponse generateSmsVerificationCode(CaptchaGenerateRequest request);
    
    /**
     * 生成邮箱验证码
     */
    CaptchaResponse generateEmailVerificationCode(CaptchaGenerateRequest request);
    
    /**
     * 生成滑动验证码
     */
    CaptchaResponse generateSliderCaptcha(CaptchaGenerateRequest request);
    
    /**
     * 生成点选验证码
     */
    CaptchaResponse generateClickCaptcha(CaptchaGenerateRequest request);
    
    /**
     * 检查频率限制
     */
    boolean checkRateLimit(String type, String identifier);
    
    /**
     * 清理过期验证码
     */
    void cleanupExpiredCaptcha();
}

================
File: eleme-captcha-service/src/main/java/org/example/CaptchaServiceApplication.java
================
package org.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

/**
 * 验证码服务启动类
 */
@SpringBootApplication
@EnableDiscoveryClient
public class CaptchaServiceApplication {
    
    public static void main(String[] args) {
        SpringApplication.run(CaptchaServiceApplication.class, args);
    }
}

================
File: eleme-captcha-service/src/main/resources/application.yml
================
server:
  port: 8007

spring:
  application:
    name: eleme-captcha-service
  
  config:
    import: "optional:nacos:eleme-captcha-service.yml"
  
  profiles:
    active: dev
  
  # 禁用数据库自动配置
  autoconfigure:
    exclude: 
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
  
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: public
        group: DEFAULT_GROUP
      config:
        server-addr: localhost:8848
        namespace: public
        group: DEFAULT_GROUP
        file-extension: yml
        shared-configs:
          - data-id: eleme-common.yml
            refresh: true
    sentinel:
      transport:
        dashboard: localhost:8080
        port: 8727
      eager: true
      log:
        dir: logs/sentinel
  redis:
    host: localhost
    port: 6379
    password: 
    database: 6
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
    timeout: 5000ms

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

================
File: eleme-captcha-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-captcha-service</artifactId>
    <name>eleme-captcha-service</name>
    <description>验证码服务 - 独立的验证码生成和验证服务</description>

    <dependencies>
        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- Spring Cloud -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        
        <!-- Spring Boot Data Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        
        <!-- Spring Boot Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        
        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        
        <!-- 图形验证码依赖 -->
        <dependency>
            <groupId>com.github.whvcse</groupId>
            <artifactId>easy-captcha</artifactId>
            <version>1.6.2</version>
        </dependency>
        
        <!-- 二维码生成 -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>3.5.1</version>
        </dependency>
        
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>3.5.1</version>
        </dependency>
        
        <!-- JSON处理 -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        
        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        
        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- Swagger/OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.2.0</version>
        </dependency>
        
        <!-- Sentinel -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>
        
        <!-- LoadBalancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>
        
        <!-- 公共模块 -->
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>eleme-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

================
File: eleme-common/src/main/java/org/example/cache/CacheService.java
================
package org.example.cache;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/**
 * 缓存服务工具类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CacheService {
    
    private final RedisTemplate<String, Object> redisTemplate;
    
    /**
     * 设置缓存
     */
    public void set(String key, Object value) {
        try {
            redisTemplate.opsForValue().set(key, value);
            log.debug("Set cache: key={}", key);
        } catch (Exception e) {
            log.error("Failed to set cache: key={}", key, e);
        }
    }
    
    /**
     * 设置缓存带过期时间
     */
    public void set(String key, Object value, long timeout, TimeUnit unit) {
        try {
            redisTemplate.opsForValue().set(key, value, timeout, unit);
            log.debug("Set cache with TTL: key={}, timeout={} {}", key, timeout, unit);
        } catch (Exception e) {
            log.error("Failed to set cache with TTL: key={}", key, e);
        }
    }
    
    /**
     * 获取缓存
     */
    public Object get(String key) {
        try {
            Object value = redisTemplate.opsForValue().get(key);
            log.debug("Get cache: key={}, exists={}", key, value != null);
            return value;
        } catch (Exception e) {
            log.error("Failed to get cache: key={}", key, e);
            return null;
        }
    }
    
    /**
     * 获取缓存并转换类型
     */
    @SuppressWarnings("unchecked")
    public <T> T get(String key, Class<T> type) {
        try {
            Object value = get(key);
            if (value != null && type.isAssignableFrom(value.getClass())) {
                return (T) value;
            }
            return null;
        } catch (Exception e) {
            log.error("Failed to get cache with type: key={}, type={}", key, type, e);
            return null;
        }
    }
    
    /**
     * 删除缓存
     */
    public void delete(String key) {
        try {
            redisTemplate.delete(key);
            log.debug("Delete cache: key={}", key);
        } catch (Exception e) {
            log.error("Failed to delete cache: key={}", key, e);
        }
    }
    
    /**
     * 批量删除缓存
     */
    public void delete(Collection<String> keys) {
        try {
            redisTemplate.delete(keys);
            log.debug("Delete cache batch: keys={}", keys);
        } catch (Exception e) {
            log.error("Failed to delete cache batch: keys={}", keys, e);
        }
    }
    
    /**
     * 检查缓存是否存在
     */
    public boolean exists(String key) {
        try {
            Boolean exists = redisTemplate.hasKey(key);
            return exists != null && exists;
        } catch (Exception e) {
            log.error("Failed to check cache exists: key={}", key, e);
            return false;
        }
    }
    
    /**
     * 设置过期时间
     */
    public void expire(String key, long timeout, TimeUnit unit) {
        try {
            redisTemplate.expire(key, timeout, unit);
            log.debug("Set expire: key={}, timeout={} {}", key, timeout, unit);
        } catch (Exception e) {
            log.error("Failed to set expire: key={}", key, e);
        }
    }
    
    /**
     * 获取过期时间
     */
    public long getExpire(String key) {
        try {
            Long expire = redisTemplate.getExpire(key);
            return expire != null ? expire : -1;
        } catch (Exception e) {
            log.error("Failed to get expire: key={}", key, e);
            return -1;
        }
    }
    
    /**
     * 递增
     */
    public long increment(String key) {
        try {
            Long result = redisTemplate.opsForValue().increment(key);
            return result != null ? result : 0;
        } catch (Exception e) {
            log.error("Failed to increment: key={}", key, e);
            return 0;
        }
    }
    
    /**
     * 递增指定步长
     */
    public long increment(String key, long delta) {
        try {
            Long result = redisTemplate.opsForValue().increment(key, delta);
            return result != null ? result : 0;
        } catch (Exception e) {
            log.error("Failed to increment by delta: key={}, delta={}", key, delta, e);
            return 0;
        }
    }
    
    /**
     * 递减
     */
    public long decrement(String key) {
        try {
            Long result = redisTemplate.opsForValue().decrement(key);
            return result != null ? result : 0;
        } catch (Exception e) {
            log.error("Failed to decrement: key={}", key, e);
            return 0;
        }
    }
    
    /**
     * 设置Hash缓存
     */
    public void hSet(String key, String field, Object value) {
        try {
            redisTemplate.opsForHash().put(key, field, value);
            log.debug("Set hash cache: key={}, field={}", key, field);
        } catch (Exception e) {
            log.error("Failed to set hash cache: key={}, field={}", key, field, e);
        }
    }
    
    /**
     * 获取Hash缓存
     */
    public Object hGet(String key, String field) {
        try {
            return redisTemplate.opsForHash().get(key, field);
        } catch (Exception e) {
            log.error("Failed to get hash cache: key={}, field={}", key, field, e);
            return null;
        }
    }
    
    /**
     * 删除Hash缓存
     */
    public void hDelete(String key, Object... fields) {
        try {
            redisTemplate.opsForHash().delete(key, fields);
            log.debug("Delete hash cache: key={}, fields={}", key, fields);
        } catch (Exception e) {
            log.error("Failed to delete hash cache: key={}, fields={}", key, fields, e);
        }
    }
    
    /**
     * 获取Hash的所有字段和值
     */
    public Map<Object, Object> hGetAll(String key) {
        try {
            return redisTemplate.opsForHash().entries(key);
        } catch (Exception e) {
            log.error("Failed to get all hash cache: key={}", key, e);
            return null;
        }
    }
    
    /**
     * 设置List缓存
     */
    public void lPush(String key, Object value) {
        try {
            redisTemplate.opsForList().leftPush(key, value);
            log.debug("Push to list cache: key={}", key);
        } catch (Exception e) {
            log.error("Failed to push to list cache: key={}", key, e);
        }
    }
    
    /**
     * 获取List缓存
     */
    public Object lPop(String key) {
        try {
            return redisTemplate.opsForList().leftPop(key);
        } catch (Exception e) {
            log.error("Failed to pop from list cache: key={}", key, e);
            return null;
        }
    }
    
    /**
     * 获取List范围缓存
     */
    public List<Object> lRange(String key, long start, long end) {
        try {
            return redisTemplate.opsForList().range(key, start, end);
        } catch (Exception e) {
            log.error("Failed to get list range cache: key={}, start={}, end={}", key, start, end, e);
            return null;
        }
    }
    
    /**
     * 设置Set缓存
     */
    public void sAdd(String key, Object... values) {
        try {
            redisTemplate.opsForSet().add(key, values);
            log.debug("Add to set cache: key={}", key);
        } catch (Exception e) {
            log.error("Failed to add to set cache: key={}", key, e);
        }
    }
    
    /**
     * 获取Set缓存
     */
    public Set<Object> sMembers(String key) {
        try {
            return redisTemplate.opsForSet().members(key);
        } catch (Exception e) {
            log.error("Failed to get set cache: key={}", key, e);
            return null;
        }
    }
    
    /**
     * 检查Set中是否存在值
     */
    public boolean sIsMember(String key, Object value) {
        try {
            Boolean isMember = redisTemplate.opsForSet().isMember(key, value);
            return isMember != null && isMember;
        } catch (Exception e) {
            log.error("Failed to check set member: key={}, value={}", key, value, e);
            return false;
        }
    }
    
    /**
     * 获取匹配的键
     */
    public Set<String> keys(String pattern) {
        try {
            return redisTemplate.keys(pattern);
        } catch (Exception e) {
            log.error("Failed to get keys by pattern: pattern={}", pattern, e);
            return null;
        }
    }
    
    /**
     * 清空所有缓存
     */
    public void flushAll() {
        try {
            Set<String> keys = redisTemplate.keys("*");
            if (keys != null && !keys.isEmpty()) {
                redisTemplate.delete(keys);
            }
            log.warn("Flush all cache");
        } catch (Exception e) {
            log.error("Failed to flush all cache", e);
        }
    }
}

================
File: eleme-common/src/main/java/org/example/config/RedisConfig.java
================
package org.example.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;

import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

/**
 * Redis分布式缓存配置
 */
@Slf4j
@Configuration
@EnableCaching
public class RedisConfig {
    
    /**
     * 配置RedisTemplate
     */
    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        
        // 创建支持JSR310的ObjectMapper
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());
        
        // 使用配置了JSR310的GenericJackson2JsonRedisSerializer
        GenericJackson2JsonRedisSerializer serializer = new GenericJackson2JsonRedisSerializer(objectMapper);
        
        // 使用StringRedisSerializer来序列化和反序列化redis的key值
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(serializer);
        
        // 设置hash key 和value序列化模式
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(serializer);
        
        template.afterPropertiesSet();
        return template;
    }
    
    /**
     * 配置缓存管理器
     */
    @Bean
    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {
        // 创建支持JSR310的ObjectMapper
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());
        
        // 配置序列化
        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofMinutes(30)) // 默认缓存时间30分钟
                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer(objectMapper)))
                .disableCachingNullValues(); // 不缓存空值
        
        // 配置不同缓存的过期时间
        Map<String, RedisCacheConfiguration> cacheConfigurations = new HashMap<>();
        
        // 用户缓存 - 1小时
        cacheConfigurations.put("user", config.entryTtl(Duration.ofHours(1)));
        
        // 商家缓存 - 2小时
        cacheConfigurations.put("business", config.entryTtl(Duration.ofHours(2)));
        
        // 食物缓存 - 30分钟
        cacheConfigurations.put("food", config.entryTtl(Duration.ofMinutes(30)));
        
        // 订单缓存 - 10分钟
        cacheConfigurations.put("order", config.entryTtl(Duration.ofMinutes(10)));
        
        // 支付缓存 - 5分钟
        cacheConfigurations.put("payment", config.entryTtl(Duration.ofMinutes(5)));
        
        // 验证码缓存 - 5分钟
        cacheConfigurations.put("captcha", config.entryTtl(Duration.ofMinutes(5)));
        
        // 热点数据缓存 - 1天
        cacheConfigurations.put("hotdata", config.entryTtl(Duration.ofDays(1)));
        
        // 统计缓存 - 1小时
        cacheConfigurations.put("statistics", config.entryTtl(Duration.ofHours(1)));
        
        // 配置缓存缓存 - 2小时
        cacheConfigurations.put("config", config.entryTtl(Duration.ofHours(2)));
        
        return RedisCacheManager.builder(connectionFactory)
                .cacheDefaults(config)
                .withInitialCacheConfigurations(cacheConfigurations)
                .build();
    }
    
    /**
     * 配置缓存键生成策略
     */
    @Bean
    public org.springframework.cache.interceptor.KeyGenerator keyGenerator() {
        return (target, method, params) -> {
            StringBuilder sb = new StringBuilder();
            sb.append(target.getClass().getName());
            sb.append(method.getName());
            for (Object obj : params) {
                sb.append(obj.toString());
            }
            return sb.toString();
        };
    }
}

================
File: eleme-common/src/main/java/org/example/config/SentinelConfig.java
================
package org.example.config;

import com.alibaba.csp.sentinel.init.InitExecutor;
import com.alibaba.csp.sentinel.slots.block.RuleConstant;
import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;
import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;
import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;
import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;
import com.alibaba.csp.sentinel.slots.system.SystemRule;
import com.alibaba.csp.sentinel.slots.system.SystemRuleManager;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.ArrayList;
import java.util.List;

/**
 * Sentinel 全局配置
 */
@Slf4j
@Configuration
public class SentinelConfig {
    
    /**
     * 初始化Sentinel规则
     */
    @Bean
    public CommandLineRunner initSentinelRules() {
        return args -> {
            log.info("开始初始化Sentinel规则");
            
            // 初始化Sentinel
            InitExecutor.doInit();
            
            // 配置限流规则
            initFlowRules();
            
            // 配置熔断降级规则
            initDegradeRules();
            
            // 配置系统规则
            initSystemRules();
            
            log.info("Sentinel规则初始化完成");
        };
    }
    
    /**
     * 初始化限流规则
     */
    private void initFlowRules() {
        List<FlowRule> rules = new ArrayList<>();
        
        // 用户服务限流规则
        FlowRule userRule = new FlowRule();
        userRule.setResource("user-service");
        userRule.setCount(100);
        userRule.setGrade(RuleConstant.FLOW_GRADE_QPS);
        userRule.setLimitApp("default");
        userRule.setStrategy(RuleConstant.STRATEGY_DIRECT);
        userRule.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_DEFAULT);
        rules.add(userRule);
        
        // 商家服务限流规则
        FlowRule businessRule = new FlowRule();
        businessRule.setResource("business-service");
        businessRule.setCount(150);
        businessRule.setGrade(RuleConstant.FLOW_GRADE_QPS);
        businessRule.setLimitApp("default");
        businessRule.setStrategy(RuleConstant.STRATEGY_DIRECT);
        businessRule.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_DEFAULT);
        rules.add(businessRule);
        
        // 食物服务限流规则
        FlowRule foodRule = new FlowRule();
        foodRule.setResource("food-service");
        foodRule.setCount(200);
        foodRule.setGrade(RuleConstant.FLOW_GRADE_QPS);
        foodRule.setLimitApp("default");
        foodRule.setStrategy(RuleConstant.STRATEGY_DIRECT);
        foodRule.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_DEFAULT);
        rules.add(foodRule);
        
        // 订单服务限流规则
        FlowRule orderRule = new FlowRule();
        orderRule.setResource("order-service");
        orderRule.setCount(80);
        orderRule.setGrade(RuleConstant.FLOW_GRADE_QPS);
        orderRule.setLimitApp("default");
        orderRule.setStrategy(RuleConstant.STRATEGY_DIRECT);
        orderRule.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_DEFAULT);
        rules.add(orderRule);
        
        // 支付服务限流规则
        FlowRule paymentRule = new FlowRule();
        paymentRule.setResource("payment-service");
        paymentRule.setCount(50);
        paymentRule.setGrade(RuleConstant.FLOW_GRADE_QPS);
        paymentRule.setLimitApp("default");
        paymentRule.setStrategy(RuleConstant.STRATEGY_DIRECT);
        paymentRule.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_DEFAULT);
        rules.add(paymentRule);
        
        // 通知服务限流规则
        FlowRule notificationRule = new FlowRule();
        notificationRule.setResource("notification-service");
        notificationRule.setCount(120);
        notificationRule.setGrade(RuleConstant.FLOW_GRADE_QPS);
        notificationRule.setLimitApp("default");
        notificationRule.setStrategy(RuleConstant.STRATEGY_DIRECT);
        notificationRule.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_DEFAULT);
        rules.add(notificationRule);
        
        // 验证码服务限流规则
        FlowRule captchaRule = new FlowRule();
        captchaRule.setResource("captcha-service");
        captchaRule.setCount(300);
        captchaRule.setGrade(RuleConstant.FLOW_GRADE_QPS);
        captchaRule.setLimitApp("default");
        captchaRule.setStrategy(RuleConstant.STRATEGY_DIRECT);
        captchaRule.setControlBehavior(RuleConstant.CONTROL_BEHAVIOR_DEFAULT);
        rules.add(captchaRule);
        
        FlowRuleManager.loadRules(rules);
        log.info("限流规则加载完成，规则数量：{}", rules.size());
    }
    
    /**
     * 初始化熔断降级规则
     */
    private void initDegradeRules() {
        List<DegradeRule> rules = new ArrayList<>();
        
        // 创建订单熔断规则
        DegradeRule createOrderRule = new DegradeRule();
        createOrderRule.setResource("createOrder");
        createOrderRule.setGrade(RuleConstant.DEGRADE_GRADE_RT);
        createOrderRule.setCount(100); // 平均响应时间 100ms
        createOrderRule.setTimeWindow(10); // 熔断时长 10s
        createOrderRule.setMinRequestAmount(5); // 最小请求数
        createOrderRule.setSlowRatioThreshold(0.5); // 慢调用比例阈值
        createOrderRule.setStatIntervalMs(1000); // 统计时长
        rules.add(createOrderRule);
        
        // 支付处理熔断规则
        DegradeRule paymentRule = new DegradeRule();
        paymentRule.setResource("processPayment");
        paymentRule.setGrade(RuleConstant.DEGRADE_GRADE_RT);
        paymentRule.setCount(200); // 平均响应时间 200ms
        paymentRule.setTimeWindow(15); // 熔断时长 15s
        paymentRule.setMinRequestAmount(3); // 最小请求数
        paymentRule.setSlowRatioThreshold(0.6); // 慢调用比例阈值
        paymentRule.setStatIntervalMs(1000); // 统计时长
        rules.add(paymentRule);
        
        // 邮件发送熔断规则
        DegradeRule emailRule = new DegradeRule();
        emailRule.setResource("sendEmail");
        emailRule.setGrade(RuleConstant.DEGRADE_GRADE_RT);
        emailRule.setCount(500); // 平均响应时间 500ms
        emailRule.setTimeWindow(5); // 熔断时长 5s
        emailRule.setMinRequestAmount(3); // 最小请求数
        emailRule.setSlowRatioThreshold(0.4); // 慢调用比例阈值
        emailRule.setStatIntervalMs(1000); // 统计时长
        rules.add(emailRule);
        
        // 验证码生成熔断规则
        DegradeRule captchaRule = new DegradeRule();
        captchaRule.setResource("generateCaptcha");
        captchaRule.setGrade(RuleConstant.DEGRADE_GRADE_RT);
        captchaRule.setCount(50); // 平均响应时间 50ms
        captchaRule.setTimeWindow(3); // 熔断时长 3s
        captchaRule.setMinRequestAmount(5); // 最小请求数
        captchaRule.setSlowRatioThreshold(0.8); // 慢调用比例阈值
        captchaRule.setStatIntervalMs(1000); // 统计时长
        rules.add(captchaRule);
        
        // 异常比例熔断规则
        DegradeRule exceptionRule = new DegradeRule();
        exceptionRule.setResource("exception-ratio");
        exceptionRule.setGrade(RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO);
        exceptionRule.setCount(0.5); // 异常比例阈值 50%
        exceptionRule.setTimeWindow(10); // 熔断时长 10s
        exceptionRule.setMinRequestAmount(5); // 最小请求数
        exceptionRule.setStatIntervalMs(1000); // 统计时长
        rules.add(exceptionRule);
        
        // 异常数熔断规则
        DegradeRule exceptionCountRule = new DegradeRule();
        exceptionCountRule.setResource("exception-count");
        exceptionCountRule.setGrade(RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT);
        exceptionCountRule.setCount(10); // 异常数阈值 10个
        exceptionCountRule.setTimeWindow(10); // 熔断时长 10s
        exceptionCountRule.setMinRequestAmount(5); // 最小请求数
        exceptionCountRule.setStatIntervalMs(1000); // 统计时长
        rules.add(exceptionCountRule);
        
        DegradeRuleManager.loadRules(rules);
        log.info("熔断降级规则加载完成，规则数量：{}", rules.size());
    }
    
    /**
     * 初始化系统规则
     */
    private void initSystemRules() {
        List<SystemRule> rules = new ArrayList<>();
        
        // 系统负载规则
        SystemRule loadRule = new SystemRule();
        loadRule.setHighestSystemLoad(3.0); // 最高系统负载
        rules.add(loadRule);
        
        // 平均响应时间规则
        SystemRule avgRtRule = new SystemRule();
        avgRtRule.setAvgRt(25); // 平均响应时间 25ms
        rules.add(avgRtRule);
        
        // 最大线程数规则
        SystemRule maxThreadRule = new SystemRule();
        maxThreadRule.setMaxThread(10); // 最大线程数
        rules.add(maxThreadRule);
        
        // QPS规则
        SystemRule qpsRule = new SystemRule();
        qpsRule.setQps(20); // 最大QPS
        rules.add(qpsRule);
        
        // CPU使用率规则
        SystemRule cpuRule = new SystemRule();
        cpuRule.setHighestCpuUsage(0.7); // 最高CPU使用率 70%
        rules.add(cpuRule);
        
        SystemRuleManager.loadRules(rules);
        log.info("系统规则加载完成，规则数量：{}", rules.size());
    }
}

================
File: eleme-common/src/main/java/org/example/constants/CommonConstants.java
================
package org.example.constants;

/**
 * 通用常量类
 */
public class CommonConstants {

    /**
     * 成功状态码
     */
    public static final int SUCCESS_CODE = 200;

    /**
     * 失败状态码
     */
    public static final int ERROR_CODE = 500;

    /**
     * 未授权状态码
     */
    public static final int UNAUTHORIZED_CODE = 401;

    /**
     * 禁止访问状态码
     */
    public static final int FORBIDDEN_CODE = 403;

    /**
     * 资源不存在状态码
     */
    public static final int NOT_FOUND_CODE = 404;

    /**
     * 用户状态 - 正常
     */
    public static final int USER_STATUS_NORMAL = 1;

    /**
     * 用户状态 - 禁用
     */
    public static final int USER_STATUS_DISABLED = 0;

    /**
     * 订单状态 - 未支付
     */
    public static final int ORDER_STATUS_UNPAID = 0;

    /**
     * 订单状态 - 已支付
     */
    public static final int ORDER_STATUS_PAID = 1;

    /**
     * 订单状态 - 已完成
     */
    public static final int ORDER_STATUS_COMPLETED = 2;

    /**
     * 订单状态 - 已取消
     */
    public static final int ORDER_STATUS_CANCELLED = 3;

    /**
     * 食物状态 - 上架
     */
    public static final int FOOD_STATUS_ON_SALE = 1;

    /**
     * 食物状态 - 下架
     */
    public static final int FOOD_STATUS_OFF_SALE = 0;

    /**
     * 商家状态 - 正常营业
     */
    public static final int BUSINESS_STATUS_NORMAL = 1;

    /**
     * 商家状态 - 暂停营业
     */
    public static final int BUSINESS_STATUS_DISABLED = 0;

    /**
     * JWT Token 前缀
     */
    public static final String TOKEN_PREFIX = "Bearer ";

    /**
     * JWT Token Header名称
     */
    public static final String TOKEN_HEADER = "Authorization";

    /**
     * Redis Key 前缀
     */
    public static final String REDIS_PREFIX = "eleme:";

    /**
     * 用户Token Redis Key前缀
     */
    public static final String USER_TOKEN_PREFIX = REDIS_PREFIX + "user:token:";

    /**
     * 验证码 Redis Key前缀
     */
    public static final String CAPTCHA_PREFIX = REDIS_PREFIX + "captcha:";

    /**
     * 邮箱验证码 Redis Key前缀
     */
    public static final String EMAIL_CODE_PREFIX = REDIS_PREFIX + "email:code:";

    /**
     * 商家缓存 Redis Key前缀
     */
    public static final String BUSINESS_CACHE_PREFIX = REDIS_PREFIX + "business:";

    /**
     * 食物缓存 Redis Key前缀
     */
    public static final String FOOD_CACHE_PREFIX = REDIS_PREFIX + "food:";

    /**
     * 默认缓存过期时间（秒）
     */
    public static final long DEFAULT_CACHE_EXPIRE = 3600L;

    /**
     * Token过期时间（秒）
     */
    public static final long TOKEN_EXPIRE = 7200L;

    /**
     * 验证码过期时间（秒）
     */
    public static final long CAPTCHA_EXPIRE = 300L;

    /**
     * 邮箱验证码过期时间（秒）
     */
    public static final long EMAIL_CODE_EXPIRE = 300L;
}

================
File: eleme-common/src/main/java/org/example/dto/IdsWrapper.java
================
package org.example.dto;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.io.Serializable;
import java.util.List;

/**
 * ID列表包装类
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class IdsWrapper implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * ID列表
     */
    private List<Integer> ids;
}

================
File: eleme-common/src/main/java/org/example/dto/OrderDetailDTO.java
================
package org.example.dto;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.example.entity.Business;
import org.example.entity.Food;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * 订单详情DTO
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderDetailDTO implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 订单ID
     */
    private Integer id;

    /**
     * 商家ID
     */
    private Integer businessID;

    /**
     * 用户手机号
     */
    private String userPhone;

    /**
     * 订单商品列表
     */
    private String orderList;

    /**
     * 订单总价
     */
    private Double price;

    /**
     * 订单状态
     */
    private Integer state;

    /**
     * 创建时间
     */
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime createdAt;

    /**
     * 支付时间
     */
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime paidAt;

    /**
     * 完成时间
     */
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime completedAt;

    /**
     * 收货地址
     */
    private String deliveryAddress;

    /**
     * 收货人姓名
     */
    private String receiverName;

    /**
     * 收货人电话
     */
    private String receiverPhone;

    /**
     * 备注
     */
    private String remark;

    /**
     * 配送费
     */
    private Double deliveryFee;

    /**
     * 商家信息
     */
    private Business business;

    /**
     * 订单商品详情列表
     */
    private List<Food> orderItems;
}

================
File: eleme-common/src/main/java/org/example/dto/OrderRequestDTO.java
================
package org.example.dto;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.io.Serializable;
import java.util.List;

/**
 * 创建订单请求DTO
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderRequestDTO implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 商家ID
     */
    private Integer businessID;

    /**
     * 用户手机号
     */
    private String userPhone;

    /**
     * 订单商品ID列表
     */
    private List<Integer> orderList;

    /**
     * 订单总价
     */
    private Double price;

    /**
     * 收货地址
     */
    private String deliveryAddress;

    /**
     * 收货人姓名
     */
    private String receiverName;

    /**
     * 收货人电话
     */
    private String receiverPhone;

    /**
     * 备注
     */
    private String remark;

    /**
     * 配送费
     */
    private Double deliveryFee;
}

================
File: eleme-common/src/main/java/org/example/dto/R.java
================
package org.example.dto;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.io.Serializable;

/**
 * 统一响应结果类
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class R<T> implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 响应代码
     */
    private Integer code;

    /**
     * 响应消息
     */
    private String message;

    /**
     * 响应数据
     */
    private T data;

    /**
     * 时间戳
     */
    private Long timestamp;

    public R(Integer code, String message, T data) {
        this.code = code;
        this.message = message;
        this.data = data;
        this.timestamp = System.currentTimeMillis();
    }

    public R(Integer code, String message) {
        this(code, message, null);
    }

    /**
     * 成功响应
     */
    public static <T> R<T> success() {
        return new R<>(200, "操作成功");
    }

    /**
     * 成功响应（带数据）
     */
    public static <T> R<T> success(T data) {
        return new R<>(200, "操作成功", data);
    }

    /**
     * 成功响应（带消息和数据）
     */
    public static <T> R<T> success(String message, T data) {
        return new R<>(200, message, data);
    }

    /**
     * 失败响应
     */
    public static <T> R<T> error() {
        return new R<>(500, "操作失败");
    }

    /**
     * 失败响应（带消息）
     */
    public static <T> R<T> error(String message) {
        return new R<>(500, message);
    }

    /**
     * 失败响应（带代码和消息）
     */
    public static <T> R<T> error(Integer code, String message) {
        return new R<>(code, message);
    }

    /**
     * 失败响应（带代码、消息和数据）
     */
    public static <T> R<T> error(Integer code, String message, T data) {
        return new R<>(code, message, data);
    }

    /**
     * 判断是否成功
     */
    @JsonIgnore
    public boolean isSuccess() {
        return this.code != null && this.code == 200;
    }

    /**
     * 判断是否失败
     */
    @JsonIgnore
    public boolean isError() {
        return !isSuccess();
    }
}

================
File: eleme-common/src/main/java/org/example/entity/Business.java
================
package org.example.entity;

import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

/**
 * 商家实体类
 */
@Data
@EqualsAndHashCode(callSuper = false)
@Accessors(chain = true)
@TableName("business")
public class Business implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 商家ID
     */
    @TableId(value = "id", type = IdType.AUTO)
    private Integer id;

    /**
     * 商家登录密码
     */
    @TableField("password")
    private String password;

    /**
     * 商家名称
     */
    @TableField("business_name")
    private String businessName;

    /**
     * 商家评分
     */
    @TableField("rating")
    private String rating;

    /**
     * 商家销量
     */
    @TableField("sales")
    private String sales;

    /**
     * 距离、时间
     */
    @TableField("distance")
    private String distance;

    /**
     * 起送价格
     */
    @TableField("min_order")
    private String minOrder;

    /**
     * 评价
     */
    @TableField("comment")
    private String comment;

    /**
     * 折扣、满减
     */
    @TableField("discounts")
    private String discounts;

    /**
     * 店内显示折扣
     */
    @TableField("discount")
    private String discount;

    /**
     * 公告
     */
    @TableField("notice")
    private String notice;

    /**
     * 侧栏元素
     */
    @TableField("sidebar_items")
    private String sidebarItems;

    /**
     * 商家LOGO图片地址
     */
    @TableField("img_logo")
    private String imgLogo;

    /**
     * 配送费
     */
    @TableField("delivery")
    private String delivery;

    /**
     * 商家类型
     */
    @TableField("type")
    private String type;

    /**
     * 创建时间
     */
    @TableField("created_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime createdAt;

    /**
     * 更新时间
     */
    @TableField("updated_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime updatedAt;

    /**
     * 商家状态（0-禁用，1-正常）
     */
    @TableField("status")
    private Integer status;

    /**
     * 折扣、满减 列表，不添加到数据库
     */
    @TableField(exist = false)
    private List<String> discountsList;

    /**
     * 侧栏数据 列表，不添加到数据库
     */
    @TableField(exist = false)
    private List<String> sidebarItemsList;

    /**
     * 商家的食物列表，不添加到数据库
     */
    @TableField(exist = false)
    private List<Food> foodList;

    /**
     * 设置折扣信息，同时解析为列表
     */
    public void setDiscounts(String discounts) {
        this.discounts = discounts;
        if (discounts != null && !discounts.trim().isEmpty()) {
            this.discountsList = Arrays.asList(discounts.split("-"));
        } else {
            this.discountsList = new ArrayList<>();
        }
    }

    /**
     * 设置侧栏元素，同时解析为列表
     */
    public void setSidebarItems(String sidebarItems) {
        this.sidebarItems = sidebarItems;
        if (sidebarItems != null && !sidebarItems.trim().isEmpty()) {
            try {
                this.sidebarItemsList = Arrays.asList(sidebarItems.split("/"));
            } catch (Exception e) {
                this.sidebarItemsList = new ArrayList<>();
            }
        } else {
            this.sidebarItemsList = new ArrayList<>();
        }
    }

    /**
     * 获取侧栏元素列表，懒加载处理
     */
    public List<String> getSidebarItemsList() {
        if (this.sidebarItemsList == null) {
            setSidebarItems(this.sidebarItems);
        }
        return this.sidebarItemsList;
    }

    /**
     * 获取折扣列表，懒加载处理
     */
    public List<String> getDiscountsList() {
        if (this.discountsList == null) {
            setDiscounts(this.discounts);
        }
        return this.discountsList;
    }
}

================
File: eleme-common/src/main/java/org/example/entity/Food.java
================
package org.example.entity;

import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

/**
 * 食物实体类
 */
@Data
@EqualsAndHashCode(callSuper = false)
@Accessors(chain = true)
@TableName("food")
public class Food implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 食物ID
     */
    @TableId(value = "id", type = IdType.AUTO)
    private Integer id;

    /**
     * 食物名称
     */
    @TableField("name")
    private String name;

    /**
     * 食物描述
     */
    @TableField("text")
    private String text;

    /**
     * 销量
     */
    @TableField("amount")
    private String amount;

    /**
     * 打折信息
     */
    @TableField("discount")
    private String discount;

    /**
     * 现价
     */
    @TableField("red_price")
    private Double redPrice;

    /**
     * 原价
     */
    @TableField("gray_price")
    private String grayPrice;

    /**
     * 所属商家ID
     */
    @TableField("business")
    private Integer business;

    /**
     * 食物图片路径
     */
    @TableField("img")
    private String img;

    /**
     * 是否上架（0-下架，1-上架）
     */
    @TableField("selling")
    private Integer selling;

    /**
     * 创建时间
     */
    @TableField("created_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime createdAt;

    /**
     * 更新时间
     */
    @TableField("updated_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime updatedAt;

    /**
     * 食物状态（0-禁用，1-正常）
     */
    @TableField("status")
    private Integer status;

    /**
     * 食物分类
     */
    @TableField("category")
    private String category;

    /**
     * 打折信息列表，不添加到数据库
     */
    @TableField(exist = false)
    private List<String> discountList;

    /**
     * 设置打折信息，同时解析为列表
     */
    public void setDiscount(String discount) {
        this.discount = discount;
        if (discount != null && !discount.trim().isEmpty()) {
            this.discountList = Arrays.asList(discount.split("-"));
        } else {
            this.discountList = new ArrayList<>();
        }
    }

    /**
     * 获取打折信息列表，懒加载处理
     */
    public List<String> getDiscountList() {
        if (this.discountList == null) {
            setDiscount(this.discount);
        }
        return this.discountList;
    }
}

================
File: eleme-common/src/main/java/org/example/entity/User.java
================
package org.example.entity;

import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;

import java.io.Serializable;
import java.time.LocalDateTime;

/**
 * 用户实体类
 */
@Data
@EqualsAndHashCode(callSuper = false)
@Accessors(chain = true)
@TableName("user")
public class User implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 用户手机号（主键）
     */
    @TableId(value = "phone_number")
    private String phoneNumber;

    /**
     * 用户密码
     */
    @TableField("password")
    private String password;

    /**
     * 用户性别
     */
    @TableField("gender")
    private String gender;

    /**
     * 用户姓名
     */
    @TableField("name")
    private String name;

    /**
     * 用户邮箱
     */
    @TableField("email")
    private String email;

    /**
     * 创建时间
     */
    @TableField("created_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime createdAt;

    /**
     * 更新时间
     */
    @TableField("updated_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime updatedAt;

    /**
     * 用户状态（0-禁用，1-正常）
     */
    @TableField("status")
    private Integer status;

    /**
     * 用户头像URL
     */
    @TableField("avatar")
    private String avatar;
}

================
File: eleme-common/src/main/java/org/example/entity/UserOrder.java
================
package org.example.entity;

import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

/**
 * 用户订单实体类
 */
@Data
@EqualsAndHashCode(callSuper = false)
@Accessors(chain = true)
@TableName("user_order")
public class UserOrder implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 订单ID
     */
    @TableId(value = "id", type = IdType.AUTO)
    private Integer id;

    /**
     * 商家ID
     */
    @TableField("business_id")
    private Integer businessId;

    /**
     * 用户手机号
     */
    @TableField("user_phone")
    private String userPhone;

    /**
     * 订单商品列表（用"-"分隔的商品ID）
     */
    @TableField("order_list")
    private String orderList;

    /**
     * 订单总价
     */
    @TableField("price")
    private Double price;

    /**
     * 订单状态（0-未支付，1-已支付，2-已完成，3-已取消）
     */
    @TableField("state")
    private Integer state;

    /**
     * 创建时间
     */
    @TableField("created_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime createdAt;

    /**
     * 更新时间
     */
    @TableField("updated_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime updatedAt;

    /**
     * 支付时间
     */
    @TableField("paid_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime paidAt;

    /**
     * 完成时间
     */
    @TableField("completed_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime completedAt;

    /**
     * 收货地址
     */
    @TableField("delivery_address")
    private String deliveryAddress;

    /**
     * 收货人姓名
     */
    @TableField("receiver_name")
    private String receiverName;

    /**
     * 收货人电话
     */
    @TableField("receiver_phone")
    private String receiverPhone;

    /**
     * 备注
     */
    @TableField("remark")
    private String remark;

    /**
     * 配送费
     */
    @TableField("delivery_fee")
    private Double deliveryFee;

    /**
     * 订单商品ID列表，不添加到数据库
     */
    @TableField(exist = false)
    private List<Integer> orderItemIds;

    /**
     * 商家信息，不添加到数据库
     */
    @TableField(exist = false)
    private Business business;

    /**
     * 订单商品详情列表，不添加到数据库
     */
    @TableField(exist = false)
    private List<Food> orderItems;

    /**
     * 设置订单商品列表，同时解析为ID列表
     */
    public void setOrderList(String orderList) {
        this.orderList = orderList;
        if (orderList != null && !orderList.trim().isEmpty()) {
            try {
                this.orderItemIds = Arrays.stream(orderList.split("-"))
                        .map(Integer::parseInt)
                        .toList();
            } catch (NumberFormatException e) {
                this.orderItemIds = new ArrayList<>();
            }
        } else {
            this.orderItemIds = new ArrayList<>();
        }
    }

    /**
     * 获取订单商品ID列表，懒加载处理
     */
    public List<Integer> getOrderItemIds() {
        if (this.orderItemIds == null) {
            setOrderList(this.orderList);
        }
        return this.orderItemIds;
    }
}

================
File: eleme-common/src/main/java/org/example/exception/SentinelExceptionHandler.java
================
package org.example.exception;

import com.alibaba.csp.sentinel.slots.block.BlockException;
import com.alibaba.csp.sentinel.slots.block.authority.AuthorityException;
import com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;
import com.alibaba.csp.sentinel.slots.block.flow.FlowException;
import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException;
import com.alibaba.csp.sentinel.slots.system.SystemBlockException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.HashMap;
import java.util.Map;

/**
 * Sentinel异常处理器
 */
@Slf4j
@RestControllerAdvice
public class SentinelExceptionHandler {
    
    /**
     * 处理限流异常
     */
    @ExceptionHandler(FlowException.class)
    public ResponseEntity<Map<String, Object>> handleFlowException(FlowException ex) {
        log.warn("触发限流规则：{}", ex.getMessage());
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.TOO_MANY_REQUESTS.value());
        response.put("message", "请求过于频繁，请稍后再试");
        response.put("type", "FLOW_LIMIT");
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(response);
    }
    
    /**
     * 处理熔断异常
     */
    @ExceptionHandler(DegradeException.class)
    public ResponseEntity<Map<String, Object>> handleDegradeException(DegradeException ex) {
        log.warn("触发熔断规则：{}", ex.getMessage());
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.SERVICE_UNAVAILABLE.value());
        response.put("message", "服务暂时不可用，请稍后再试");
        response.put("type", "CIRCUIT_BREAKER");
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(response);
    }
    
    /**
     * 处理系统保护异常
     */
    @ExceptionHandler(SystemBlockException.class)
    public ResponseEntity<Map<String, Object>> handleSystemBlockException(SystemBlockException ex) {
        log.warn("触发系统保护规则：{}", ex.getMessage());
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.SERVICE_UNAVAILABLE.value());
        response.put("message", "系统负载过高，请稍后再试");
        response.put("type", "SYSTEM_PROTECTION");
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(response);
    }
    
    /**
     * 处理热点参数限流异常
     */
    @ExceptionHandler(ParamFlowException.class)
    public ResponseEntity<Map<String, Object>> handleParamFlowException(ParamFlowException ex) {
        log.warn("触发热点参数限流规则：{}", ex.getMessage());
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.TOO_MANY_REQUESTS.value());
        response.put("message", "热点参数访问过于频繁，请稍后再试");
        response.put("type", "PARAM_FLOW_LIMIT");
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(response);
    }
    
    /**
     * 处理授权异常
     */
    @ExceptionHandler(AuthorityException.class)
    public ResponseEntity<Map<String, Object>> handleAuthorityException(AuthorityException ex) {
        log.warn("触发授权规则：{}", ex.getMessage());
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.FORBIDDEN.value());
        response.put("message", "访问被拒绝，权限不足");
        response.put("type", "AUTHORITY_DENY");
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(response);
    }
    
    /**
     * 处理其他Sentinel阻塞异常
     */
    @ExceptionHandler(BlockException.class)
    public ResponseEntity<Map<String, Object>> handleBlockException(BlockException ex) {
        log.warn("触发Sentinel阻塞规则：{}", ex.getMessage());
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.TOO_MANY_REQUESTS.value());
        response.put("message", "请求被阻塞，请稍后再试");
        response.put("type", "SENTINEL_BLOCK");
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(response);
    }
}

================
File: eleme-common/src/main/java/org/example/loadbalancer/HealthCheckLoadBalancer.java
================
package org.example.loadbalancer;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.DefaultResponse;
import org.springframework.cloud.client.loadbalancer.EmptyResponse;
import org.springframework.cloud.client.loadbalancer.Request;
import org.springframework.cloud.client.loadbalancer.Response;
import org.springframework.cloud.loadbalancer.core.ReactorServiceInstanceLoadBalancer;
import org.springframework.cloud.loadbalancer.core.RoundRobinLoadBalancer;
import org.springframework.cloud.loadbalancer.core.ServiceInstanceListSupplier;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 健康检查负载均衡器
 * 过滤掉不健康的实例，然后使用轮询策略
 */
@Slf4j
public class HealthCheckLoadBalancer implements ReactorServiceInstanceLoadBalancer {
    
    private final ObjectProvider<ServiceInstanceListSupplier> serviceInstanceListSupplierProvider;
    private final String serviceId;
    
    public HealthCheckLoadBalancer(ObjectProvider<ServiceInstanceListSupplier> serviceInstanceListSupplierProvider,
                                  String serviceId) {
        this.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;
        this.serviceId = serviceId;
    }
    
    @Override
    public Mono<Response<ServiceInstance>> choose(Request request) {
        ServiceInstanceListSupplier supplier = serviceInstanceListSupplierProvider
                .getIfAvailable(NoopServiceInstanceListSupplier::new);
        
        return supplier.get(request)
                .next()
                .map(serviceInstances -> processInstanceResponse(serviceInstances, request));
    }
    
    private Response<ServiceInstance> processInstanceResponse(List<ServiceInstance> serviceInstances, Request request) {
        if (serviceInstances.isEmpty()) {
            log.warn("No servers available for service: {}", serviceId);
            return new EmptyResponse();
        }
        
        // 过滤健康的实例
        List<ServiceInstance> healthyInstances = serviceInstances.stream()
                .filter(this::isHealthy)
                .collect(Collectors.toList());
        
        if (healthyInstances.isEmpty()) {
            log.warn("No healthy servers available for service: {}, falling back to all instances", serviceId);
            healthyInstances = serviceInstances; // 如果没有健康实例，使用所有实例
        }
        
        return getInstanceResponse(healthyInstances);
    }
    
    private Response<ServiceInstance> getInstanceResponse(List<ServiceInstance> instances) {
        if (instances.size() == 1) {
            return new DefaultResponse(instances.get(0));
        }
        
        // 使用轮询策略选择实例
        ServiceInstance selected = instances.get((int) (System.currentTimeMillis() % instances.size()));
        log.debug("Selected healthy instance: {}", selected.getInstanceId());
        return new DefaultResponse(selected);
    }
    
    /**
     * 检查服务实例是否健康
     * 从实例的metadata中获取健康状态信息
     */
    private boolean isHealthy(ServiceInstance instance) {
        Map<String, String> metadata = instance.getMetadata();
        if (metadata != null) {
            // 检查健康状态
            String healthStatus = metadata.get("health.status");
            if (healthStatus != null) {
                boolean healthy = "UP".equalsIgnoreCase(healthStatus) || "HEALTHY".equalsIgnoreCase(healthStatus);
                if (!healthy) {
                    log.debug("Instance {} is not healthy, status: {}", instance.getInstanceId(), healthStatus);
                }
                return healthy;
            }
            
            // 检查是否被手动禁用
            String enabled = metadata.get("enabled");
            if (enabled != null) {
                boolean isEnabled = Boolean.parseBoolean(enabled);
                if (!isEnabled) {
                    log.debug("Instance {} is disabled", instance.getInstanceId());
                }
                return isEnabled;
            }
        }
        
        // 默认认为是健康的
        return true;
    }
    
    /**
     * 空实现的ServiceInstanceListSupplier
     */
    private static class NoopServiceInstanceListSupplier implements ServiceInstanceListSupplier {
        @Override
        public String getServiceId() {
            return null;
        }
        
        @Override
        public reactor.core.publisher.Flux<List<ServiceInstance>> get() {
            return reactor.core.publisher.Flux.empty();
        }
        
        @Override
        public reactor.core.publisher.Flux<List<ServiceInstance>> get(Request request) {
            return reactor.core.publisher.Flux.empty();
        }
    }
}

================
File: eleme-common/src/main/java/org/example/loadbalancer/WeightedLoadBalancer.java
================
package org.example.loadbalancer;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.DefaultResponse;
import org.springframework.cloud.client.loadbalancer.EmptyResponse;
import org.springframework.cloud.client.loadbalancer.Request;
import org.springframework.cloud.client.loadbalancer.Response;
import org.springframework.cloud.loadbalancer.core.ReactorServiceInstanceLoadBalancer;
import org.springframework.cloud.loadbalancer.core.ServiceInstanceListSupplier;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

/**
 * 基于权重的负载均衡器
 */
@Slf4j
public class WeightedLoadBalancer implements ReactorServiceInstanceLoadBalancer {
    
    private final ObjectProvider<ServiceInstanceListSupplier> serviceInstanceListSupplierProvider;
    private final String serviceId;
    private final Random random = new Random();
    
    public WeightedLoadBalancer(ObjectProvider<ServiceInstanceListSupplier> serviceInstanceListSupplierProvider,
                               String serviceId) {
        this.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;
        this.serviceId = serviceId;
    }
    
    @Override
    public Mono<Response<ServiceInstance>> choose(Request request) {
        ServiceInstanceListSupplier supplier = serviceInstanceListSupplierProvider
                .getIfAvailable(NoopServiceInstanceListSupplier::new);
        
        return supplier.get(request)
                .next()
                .map(serviceInstances -> processInstanceResponse(serviceInstances, request));
    }
    
    private Response<ServiceInstance> processInstanceResponse(List<ServiceInstance> serviceInstances, Request request) {
        if (serviceInstances.isEmpty()) {
            log.warn("No servers available for service: {}", serviceId);
            return new EmptyResponse();
        }
        
        return getInstanceResponse(serviceInstances, request);
    }
    
    private Response<ServiceInstance> getInstanceResponse(List<ServiceInstance> instances, Request request) {
        // 如果只有一个实例，直接返回
        if (instances.size() == 1) {
            return new DefaultResponse(instances.get(0));
        }
        
        // 计算总权重
        int totalWeight = 0;
        for (ServiceInstance instance : instances) {
            int weight = getWeight(instance);
            totalWeight += weight;
        }
        
        if (totalWeight == 0) {
            // 如果所有实例权重都为0，使用随机策略
            return new DefaultResponse(instances.get(ThreadLocalRandom.current().nextInt(instances.size())));
        }
        
        // 根据权重选择实例
        int randomWeight = ThreadLocalRandom.current().nextInt(totalWeight);
        int currentWeight = 0;
        
        for (ServiceInstance instance : instances) {
            currentWeight += getWeight(instance);
            if (randomWeight < currentWeight) {
                log.debug("Selected instance: {} with weight: {}", instance.getInstanceId(), getWeight(instance));
                return new DefaultResponse(instance);
            }
        }
        
        // 备选方案，返回第一个实例
        return new DefaultResponse(instances.get(0));
    }
    
    /**
     * 获取服务实例的权重
     * 从实例的metadata中获取权重信息，默认权重为1
     */
    private int getWeight(ServiceInstance instance) {
        Map<String, String> metadata = instance.getMetadata();
        if (metadata != null && metadata.containsKey("weight")) {
            try {
                int weight = Integer.parseInt(metadata.get("weight"));
                return Math.max(weight, 0); // 确保权重不为负数
            } catch (NumberFormatException e) {
                log.warn("Invalid weight value for instance {}: {}", instance.getInstanceId(), metadata.get("weight"));
            }
        }
        return 1; // 默认权重
    }
    
    /**
     * 空实现的ServiceInstanceListSupplier
     */
    private static class NoopServiceInstanceListSupplier implements ServiceInstanceListSupplier {
        @Override
        public String getServiceId() {
            return null;
        }
        
        @Override
        public Flux<List<ServiceInstance>> get() {
            return Flux.empty();
        }
        
        @Override
        public Flux<List<ServiceInstance>> get(Request request) {
            return Flux.empty();
        }
    }
}

================
File: eleme-common/src/main/java/org/example/lock/DistributedLock.java
================
package org.example.lock;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.script.DefaultRedisScript;
import org.springframework.stereotype.Component;

import java.util.Collections;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

/**
 * 基于Redis的分布式锁
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class DistributedLock {
    
    private final RedisTemplate<String, Object> redisTemplate;
    
    private static final String LOCK_PREFIX = "lock:";
    private static final String UNLOCK_SCRIPT = 
            "if redis.call('get', KEYS[1]) == ARGV[1] then " +
            "return redis.call('del', KEYS[1]) " +
            "else " +
            "return 0 " +
            "end";
    
    /**
     * 尝试获取锁
     * 
     * @param key 锁的key
     * @param timeout 超时时间
     * @param unit 时间单位
     * @return 锁信息，获取失败返回null
     */
    public LockInfo tryLock(String key, long timeout, TimeUnit unit) {
        String lockKey = LOCK_PREFIX + key;
        String lockValue = generateLockValue();
        
        try {
            Boolean success = redisTemplate.opsForValue().setIfAbsent(lockKey, lockValue, timeout, unit);
            if (success != null && success) {
                log.debug("Acquired lock: key={}, value={}", lockKey, lockValue);
                return new LockInfo(lockKey, lockValue);
            } else {
                log.debug("Failed to acquire lock: key={}", lockKey);
                return null;
            }
        } catch (Exception e) {
            log.error("Error acquiring lock: key={}", lockKey, e);
            return null;
        }
    }
    
    /**
     * 释放锁
     * 
     * @param lockInfo 锁信息
     * @return 是否释放成功
     */
    public boolean unlock(LockInfo lockInfo) {
        if (lockInfo == null) {
            return false;
        }
        
        try {
            DefaultRedisScript<Long> script = new DefaultRedisScript<>(UNLOCK_SCRIPT, Long.class);
            Long result = redisTemplate.execute(script, 
                    Collections.singletonList(lockInfo.getKey()), 
                    lockInfo.getValue());
            
            boolean success = result != null && result == 1L;
            if (success) {
                log.debug("Released lock: key={}, value={}", lockInfo.getKey(), lockInfo.getValue());
            } else {
                log.warn("Failed to release lock: key={}, value={}", lockInfo.getKey(), lockInfo.getValue());
            }
            return success;
        } catch (Exception e) {
            log.error("Error releasing lock: key={}, value={}", lockInfo.getKey(), lockInfo.getValue(), e);
            return false;
        }
    }
    
    /**
     * 执行带锁的操作
     * 
     * @param key 锁的key
     * @param timeout 超时时间
     * @param unit 时间单位
     * @param task 要执行的任务
     * @return 执行结果
     */
    public <T> T executeWithLock(String key, long timeout, TimeUnit unit, LockTask<T> task) {
        LockInfo lockInfo = tryLock(key, timeout, unit);
        if (lockInfo == null) {
            throw new RuntimeException("Failed to acquire lock: " + key);
        }
        
        try {
            return task.execute();
        } finally {
            unlock(lockInfo);
        }
    }
    
    /**
     * 执行带锁的操作（无返回值）
     * 
     * @param key 锁的key
     * @param timeout 超时时间
     * @param unit 时间单位
     * @param task 要执行的任务
     */
    public void executeWithLock(String key, long timeout, TimeUnit unit, VoidLockTask task) {
        LockInfo lockInfo = tryLock(key, timeout, unit);
        if (lockInfo == null) {
            throw new RuntimeException("Failed to acquire lock: " + key);
        }
        
        try {
            task.execute();
        } finally {
            unlock(lockInfo);
        }
    }
    
    /**
     * 检查锁是否存在
     * 
     * @param key 锁的key
     * @return 是否存在
     */
    public boolean isLocked(String key) {
        String lockKey = LOCK_PREFIX + key;
        try {
            Boolean exists = redisTemplate.hasKey(lockKey);
            return exists != null && exists;
        } catch (Exception e) {
            log.error("Error checking lock existence: key={}", lockKey, e);
            return false;
        }
    }
    
    /**
     * 强制释放锁
     * 
     * @param key 锁的key
     * @return 是否释放成功
     */
    public boolean forceUnlock(String key) {
        String lockKey = LOCK_PREFIX + key;
        try {
            Boolean result = redisTemplate.delete(lockKey);
            boolean success = result != null && result;
            if (success) {
                log.warn("Force unlocked: key={}", lockKey);
            }
            return success;
        } catch (Exception e) {
            log.error("Error force unlocking: key={}", lockKey, e);
            return false;
        }
    }
    
    /**
     * 生成锁的值
     */
    private String generateLockValue() {
        return Thread.currentThread().getName() + "-" + UUID.randomUUID().toString();
    }
    
    /**
     * 锁信息
     */
    public static class LockInfo {
        private final String key;
        private final String value;
        
        public LockInfo(String key, String value) {
            this.key = key;
            this.value = value;
        }
        
        public String getKey() {
            return key;
        }
        
        public String getValue() {
            return value;
        }
    }
    
    /**
     * 带返回值的锁任务
     */
    @FunctionalInterface
    public interface LockTask<T> {
        T execute();
    }
    
    /**
     * 无返回值的锁任务
     */
    @FunctionalInterface
    public interface VoidLockTask {
        void execute();
    }
}

================
File: eleme-common/src/main/java/org/example/utils/JwtUtil.java
================
package org.example.utils;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTDecodeException;
import com.auth0.jwt.interfaces.DecodedJWT;
import org.example.constants.CommonConstants;

import java.util.Date;

/**
 * JWT工具类
 */
public class JwtUtil {

    /**
     * JWT密钥
     */
    private static final String SECRET = "eleme-springcloud-secret-key";

    /**
     * 生成JWT Token
     *
     * @param userId 用户ID
     * @param userType 用户类型
     * @return JWT Token
     */
    public static String generateToken(String userId, String userType) {
        Date now = new Date();
        Date expireDate = new Date(now.getTime() + CommonConstants.TOKEN_EXPIRE * 1000);
        
        return JWT.create()
                .withIssuer("eleme-springcloud")
                .withSubject(userId)
                .withClaim("userType", userType)
                .withIssuedAt(now)
                .withExpiresAt(expireDate)
                .sign(Algorithm.HMAC256(SECRET));
    }

    /**
     * 生成用户Token
     *
     * @param phoneNumber 用户手机号
     * @return JWT Token
     */
    public static String generateUserToken(String phoneNumber) {
        return generateToken(phoneNumber, "user");
    }

    /**
     * 生成商家Token
     *
     * @param businessId 商家ID
     * @return JWT Token
     */
    public static String generateBusinessToken(String businessId) {
        return generateToken(businessId, "business");
    }

    /**
     * 验证JWT Token
     *
     * @param token JWT Token
     * @return 是否有效
     */
    public static boolean verifyToken(String token) {
        try {
            Algorithm algorithm = Algorithm.HMAC256(SECRET);
            JWTVerifier verifier = JWT.require(algorithm)
                    .withIssuer("eleme-springcloud")
                    .build();
            verifier.verify(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * 获取Token中的用户ID
     *
     * @param token JWT Token
     * @return 用户ID
     */
    public static String getUserId(String token) {
        try {
            DecodedJWT jwt = JWT.decode(token);
            return jwt.getSubject();
        } catch (JWTDecodeException e) {
            return null;
        }
    }

    /**
     * 获取Token中的用户类型
     *
     * @param token JWT Token
     * @return 用户类型
     */
    public static String getUserType(String token) {
        try {
            DecodedJWT jwt = JWT.decode(token);
            return jwt.getClaim("userType").asString();
        } catch (JWTDecodeException e) {
            return null;
        }
    }

    /**
     * 获取Token的过期时间
     *
     * @param token JWT Token
     * @return 过期时间
     */
    public static Date getExpirationDate(String token) {
        try {
            DecodedJWT jwt = JWT.decode(token);
            return jwt.getExpiresAt();
        } catch (JWTDecodeException e) {
            return null;
        }
    }

    /**
     * 判断Token是否过期
     *
     * @param token JWT Token
     * @return 是否过期
     */
    public static boolean isTokenExpired(String token) {
        Date expiration = getExpirationDate(token);
        return expiration != null && expiration.before(new Date());
    }
}

================
File: eleme-common/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-common</artifactId>
    <packaging>jar</packaging>

    <dependencies>
        <!-- Spring Boot Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- MyBatis Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- Hutool 工具包 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <!-- FastJSON -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>

        <!-- JWT -->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>

        <!-- Spring Cloud LoadBalancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>

        <!-- Spring Cloud OpenFeign -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        
        <!-- Sentinel -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>
        
        <!-- Sentinel Core -->
        <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-core</artifactId>
        </dependency>
        
        <!-- Sentinel Transport -->
        <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-transport-simple-http</artifactId>
        </dependency>
        
        <!-- Sentinel Datasource Nacos -->
        <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-datasource-nacos</artifactId>
        </dependency>
        
        <!-- Spring Boot Data Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        
        <!-- Spring Boot Cache -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
    </dependencies>
</project>

================
File: eleme-food-service/src/main/java/org/example/config/GlobalExceptionHandler.java
================
package org.example.config;

import lombok.extern.slf4j.Slf4j;
import org.example.dto.R;
import org.springframework.http.HttpStatus;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    /**
     * 处理参数校验异常
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public R<String> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {
        log.error("参数校验失败", e);
        List<String> errors = new ArrayList<>();
        for (FieldError error : e.getBindingResult().getFieldErrors()) {
            errors.add(error.getField() + ": " + error.getDefaultMessage());
        }
        return R.error("参数校验失败: " + String.join(", ", errors));
    }

    /**
     * 处理Bean校验异常
     */
    @ExceptionHandler(BindException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public R<String> handleBindException(BindException e) {
        log.error("参数绑定失败", e);
        List<String> errors = new ArrayList<>();
        for (FieldError error : e.getBindingResult().getFieldErrors()) {
            errors.add(error.getField() + ": " + error.getDefaultMessage());
        }
        return R.error("参数绑定失败: " + String.join(", ", errors));
    }

    /**
     * 处理约束校验异常
     */
    @ExceptionHandler(ConstraintViolationException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public R<String> handleConstraintViolationException(ConstraintViolationException e) {
        log.error("约束校验失败", e);
        Set<ConstraintViolation<?>> violations = e.getConstraintViolations();
        List<String> errors = new ArrayList<>();
        for (ConstraintViolation<?> violation : violations) {
            errors.add(violation.getPropertyPath() + ": " + violation.getMessage());
        }
        return R.error("约束校验失败: " + String.join(", ", errors));
    }

    /**
     * 处理非法参数异常
     */
    @ExceptionHandler(IllegalArgumentException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public R<String> handleIllegalArgumentException(IllegalArgumentException e) {
        log.error("非法参数", e);
        return R.error("非法参数: " + e.getMessage());
    }

    /**
     * 处理空指针异常
     */
    @ExceptionHandler(NullPointerException.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public R<String> handleNullPointerException(NullPointerException e) {
        log.error("空指针异常", e);
        return R.error("系统内部错误");
    }

    /**
     * 处理运行时异常
     */
    @ExceptionHandler(RuntimeException.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public R<String> handleRuntimeException(RuntimeException e) {
        log.error("运行时异常", e);
        return R.error("系统运行异常: " + e.getMessage());
    }

    /**
     * 处理其他异常
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public R<String> handleException(Exception e) {
        log.error("系统异常", e);
        return R.error("系统异常: " + e.getMessage());
    }
}

================
File: eleme-food-service/src/main/java/org/example/config/JacksonConfig.java
================
package org.example.config;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Jackson配置类
 * 统一配置日期时间的序列化和反序列化格式
 */
@Configuration
public class JacksonConfig {

    private static final String DATE_TIME_PATTERN = "yyyy-MM-dd HH:mm:ss";
    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(DATE_TIME_PATTERN);

    @Bean
    @Primary
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        
        // 注册Java时间模块
        JavaTimeModule javaTimeModule = new JavaTimeModule();
        
        // 配置LocalDateTime的序列化和反序列化
        javaTimeModule.addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(DATE_TIME_FORMATTER));
        javaTimeModule.addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(DATE_TIME_FORMATTER));
        
        mapper.registerModule(javaTimeModule);
        
        // 禁用将日期写为时间戳的功能
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        
        // 忽略未知字段，避免反序列化时出错
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        
        return mapper;
    }
}

================
File: eleme-food-service/src/main/java/org/example/controller/FoodController.java
================
package org.example.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.R;
import org.example.entity.Food;
import org.example.service.FoodService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/food")
@Tag(name = "食物服务", description = "食物信息管理相关接口")
@Slf4j
@Validated
public class FoodController {

    @Autowired
    private FoodService foodService;

    @GetMapping("/{id}")
    @Operation(summary = "根据ID查询商品", description = "根据商品ID查询商品详细信息")
    public R<Food> getById(
            @Parameter(description = "商品ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("查询商品信息: {}", id);
        Food food = foodService.getById(id);
        if (food != null) {
            return R.success(food);
        } else {
            return R.error("商品不存在");
        }
    }

    @PostMapping("/batch")
    @Operation(summary = "批量查询商品", description = "根据商品ID列表批量查询商品信息")
    public R<List<Food>> getFoodsByIds(
            @Parameter(description = "商品ID列表", required = true) 
            @RequestBody @Valid @NotEmpty List<@NotNull @Min(1) Integer> ids) {
        
        log.info("批量查询商品信息: {}", ids);
        List<Food> foods = foodService.getFoodsByIds(ids);
        return R.success(foods);
    }

    @GetMapping("/business/{businessId}")
    @Operation(summary = "查询商家所有商品", description = "根据商家ID查询该商家的所有商品")
    public R<List<Food>> getAllFoodsByBusinessId(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId) {
        
        log.info("查询商家所有商品: {}", businessId);
        List<Food> foods = foodService.getAllFoodsByBusinessId(businessId);
        return R.success(foods);
    }

    @GetMapping("/business/{businessId}/onsale")
    @Operation(summary = "查询商家上架商品", description = "根据商家ID查询该商家上架的商品")
    public R<List<Food>> getOnSaleFoodsByBusinessId(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId) {
        
        log.info("查询商家上架商品: {}", businessId);
        List<Food> foods = foodService.getOnSaleFoodsByBusinessId(businessId);
        return R.success(foods);
    }

    @GetMapping("/business/{businessId}/count")
    @Operation(summary = "统计商家商品数量", description = "统计指定商家的商品总数")
    public R<Integer> countFoodsByBusinessId(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId) {
        
        log.info("统计商家商品数量: {}", businessId);
        Integer count = foodService.countFoodsByBusinessId(businessId);
        return R.success(count);
    }

    @GetMapping("/business/{businessId}/onsale/count")
    @Operation(summary = "统计商家上架商品数量", description = "统计指定商家上架商品的数量")
    public R<Integer> countOnSaleFoodsByBusinessId(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId) {
        
        log.info("统计商家上架商品数量: {}", businessId);
        Integer count = foodService.countOnSaleFoodsByBusinessId(businessId);
        return R.success(count);
    }

    @GetMapping("/search")
    @Operation(summary = "搜索商品", description = "根据商品名称关键词搜索商品")
    public R<List<Food>> searchFoodsByName(
            @Parameter(description = "搜索关键词", required = true) 
            @RequestParam @NotNull @Size(min = 1, max = 50) String name) {
        
        log.info("搜索商品: {}", name);
        List<Food> foods = foodService.searchFoodsByName(name);
        return R.success(foods);
    }

    @GetMapping("/price-range")
    @Operation(summary = "价格区间查询", description = "根据价格区间查询商品")
    public R<List<Food>> getFoodsByPriceRange(
            @Parameter(description = "最低价格", required = true) 
            @RequestParam @NotNull @Min(0) Double minPrice,
            @Parameter(description = "最高价格", required = true) 
            @RequestParam @NotNull @Min(0) Double maxPrice) {
        
        log.info("价格区间查询商品: {}-{}", minPrice, maxPrice);
        if (minPrice > maxPrice) {
            return R.error("最低价格不能大于最高价格");
        }
        List<Food> foods = foodService.getFoodsByPriceRange(minPrice, maxPrice);
        return R.success(foods);
    }

    @GetMapping("/hot")
    @Operation(summary = "查询热门商品", description = "查询热门商品，按销量排序")
    public R<List<Food>> getHotFoods(
            @Parameter(description = "限制数量", required = false) 
            @RequestParam(defaultValue = "10") @Min(1) Integer limit) {
        
        log.info("查询热门商品: {}", limit);
        List<Food> foods = foodService.getHotFoods(limit);
        return R.success(foods);
    }

    @GetMapping("/business/{businessId}/hot")
    @Operation(summary = "查询商家热门商品", description = "查询指定商家的热门商品")
    public R<List<Food>> getHotFoodsByBusinessId(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId,
            @Parameter(description = "限制数量", required = false) 
            @RequestParam(defaultValue = "10") @Min(1) Integer limit) {
        
        log.info("查询商家热门商品: {}-{}", businessId, limit);
        List<Food> foods = foodService.getHotFoodsByBusinessId(businessId, limit);
        return R.success(foods);
    }

    @GetMapping("/discount")
    @Operation(summary = "查询特价商品", description = "查询所有特价商品")
    public R<List<Food>> getDiscountFoods() {
        log.info("查询特价商品");
        List<Food> foods = foodService.getDiscountFoods();
        return R.success(foods);
    }

    @GetMapping("/business/{businessId}/discount")
    @Operation(summary = "查询商家特价商品", description = "查询指定商家的特价商品")
    public R<List<Food>> getDiscountFoodsByBusinessId(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId) {
        
        log.info("查询商家特价商品: {}", businessId);
        List<Food> foods = foodService.getDiscountFoodsByBusinessId(businessId);
        return R.success(foods);
    }

    @PostMapping
    @Operation(summary = "新增商品", description = "新增商品信息")
    public R<String> addFood(
            @Parameter(description = "商品信息", required = true) 
            @RequestBody @Valid Food food) {
        
        log.info("新增商品: {}", food);
        boolean success = foodService.addFood(food);
        if (success) {
            return R.success("新增商品成功");
        } else {
            return R.error("新增商品失败");
        }
    }

    @PutMapping
    @Operation(summary = "更新商品", description = "更新商品信息")
    public R<String> updateFood(
            @Parameter(description = "商品信息", required = true) 
            @RequestBody @Valid Food food) {
        
        log.info("更新商品: {}", food);
        if (food.getId() == null) {
            return R.error("商品ID不能为空");
        }
        boolean success = foodService.updateFood(food);
        if (success) {
            return R.success("更新商品成功");
        } else {
            return R.error("更新商品失败");
        }
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "删除商品", description = "删除指定商品")
    public R<String> deleteFood(
            @Parameter(description = "商品ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("删除商品: {}", id);
        boolean success = foodService.deleteFood(id);
        if (success) {
            return R.success("删除商品成功");
        } else {
            return R.error("删除商品失败");
        }
    }

    @PutMapping("/{id}/onsale")
    @Operation(summary = "商品上架", description = "将指定商品设为上架状态")
    public R<String> onSaleFood(
            @Parameter(description = "商品ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("商品上架: {}", id);
        boolean success = foodService.onSaleFood(id);
        if (success) {
            return R.success("商品上架成功");
        } else {
            return R.error("商品上架失败");
        }
    }

    @PutMapping("/{id}/offsale")
    @Operation(summary = "商品下架", description = "将指定商品设为下架状态")
    public R<String> offSaleFood(
            @Parameter(description = "商品ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("商品下架: {}", id);
        boolean success = foodService.offSaleFood(id);
        if (success) {
            return R.success("商品下架成功");
        } else {
            return R.error("商品下架失败");
        }
    }

    // 兼容原有接口格式
    @PostMapping("/getAllByIds")
    @Operation(summary = "批量查询商品(兼容接口)", description = "根据商品ID列表批量查询商品信息(兼容原有接口)")
    public R<List<Food>> getAllByIds(@RequestBody Map<String, List<Integer>> requestBody) {
        List<Integer> ids = requestBody.get("ids");
        if (ids == null || ids.isEmpty()) {
            return R.error("商品ID列表不能为空");
        }
        
        log.info("批量查询商品信息(兼容接口): {}", ids);
        List<Food> foods = foodService.getFoodsByIds(ids);
        return R.success(foods);
    }

    @PostMapping("/getFoodById")
    @Operation(summary = "根据ID查询商品(兼容接口)", description = "根据商品ID查询商品信息(兼容原有接口)")
    public R<Food> getFoodById(@RequestBody Map<String, Integer> requestBody) {
        Integer id = requestBody.get("ID");
        if (id == null) {
            return R.error("商品ID不能为空");
        }
        
        log.info("查询商品信息(兼容接口): {}", id);
        Food food = foodService.getById(id);
        if (food != null) {
            return R.success(food);
        } else {
            return R.error("商品不存在");
        }
    }
}

================
File: eleme-food-service/src/main/java/org/example/mapper/FoodMapper.java
================
package org.example.mapper;

import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;
import org.example.entity.Food;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface FoodMapper extends BaseMapper<Food> {

    /**
     * 根据商家ID查询所有商品
     * @param businessId 商家ID
     * @return 商品列表
     */
    @Select("SELECT * FROM food WHERE business = #{businessId}")
    List<Food> findAllByBusiness(Integer businessId);

    /**
     * 根据商家ID查询上架的商品
     * @param businessId 商家ID
     * @return 上架商品列表
     */
    @Select("SELECT * FROM food WHERE business = #{businessId} AND selling = 1")
    List<Food> findOnSaleFoodsByBusiness(Integer businessId);

    /**
     * 根据商家ID查询商品数量
     * @param businessId 商家ID
     * @return 商品数量
     */
    @Select("SELECT COUNT(*) FROM food WHERE business = #{businessId}")
    Integer countFoodsByBusiness(Integer businessId);

    /**
     * 根据商家ID查询上架商品数量
     * @param businessId 商家ID
     * @return 上架商品数量
     */
    @Select("SELECT COUNT(*) FROM food WHERE business = #{businessId} AND selling = 1")
    Integer countOnSaleFoodsByBusiness(Integer businessId);

    /**
     * 根据商品名称模糊查询
     * @param name 商品名称关键词
     * @return 商品列表
     */
    @Select("SELECT * FROM food WHERE name LIKE CONCAT('%', #{name}, '%') AND selling = 1")
    List<Food> findFoodsByNameLike(String name);

    /**
     * 根据价格区间查询商品
     * @param minPrice 最低价格
     * @param maxPrice 最高价格
     * @return 商品列表
     */
    @Select("SELECT * FROM food WHERE red_price >= #{minPrice} AND red_price <= #{maxPrice} AND selling = 1")
    List<Food> findFoodsByPriceRange(Double minPrice, Double maxPrice);

    /**
     * 查询热门商品（按销量排序）
     * @param limit 限制数量
     * @return 热门商品列表
     */
    @Select("SELECT * FROM food WHERE selling = 1 ORDER BY CAST(amount AS UNSIGNED) DESC LIMIT #{limit}")
    List<Food> findHotFoods(Integer limit);

    /**
     * 根据商家ID查询热门商品
     * @param businessId 商家ID
     * @param limit 限制数量
     * @return 热门商品列表
     */
    @Select("SELECT * FROM food WHERE business = #{businessId} AND selling = 1 ORDER BY CAST(amount AS UNSIGNED) DESC LIMIT #{limit}")
    List<Food> findHotFoodsByBusiness(Integer businessId, Integer limit);

    /**
     * 查询特价商品（有折扣的商品）
     * @return 特价商品列表
     */
    @Select("SELECT * FROM food WHERE discount IS NOT NULL AND discount != '' AND selling = 1")
    List<Food> findDiscountFoods();

    /**
     * 根据商家ID查询特价商品
     * @param businessId 商家ID
     * @return 特价商品列表
     */
    @Select("SELECT * FROM food WHERE business = #{businessId} AND discount IS NOT NULL AND discount != '' AND selling = 1")
    List<Food> findDiscountFoodsByBusiness(Integer businessId);

    /**
     * 批量查询商品
     * @param ids 商品ID列表
     * @return 商品列表
     */
    @Select("<script>" +
            "SELECT * FROM food WHERE id IN " +
            "<foreach item='id' index='index' collection='list' open='(' separator=',' close=')'>" +
            "#{id}" +
            "</foreach>" +
            "</script>")
    List<Food> findFoodsByIds(List<Integer> ids);
}

================
File: eleme-food-service/src/main/java/org/example/service/impl/FoodServiceImpl.java
================
package org.example.service.impl;

import com.alibaba.csp.sentinel.annotation.SentinelResource;
import lombok.extern.slf4j.Slf4j;
import org.example.entity.Food;
import org.example.mapper.FoodMapper;
import org.example.service.FoodService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.concurrent.TimeUnit;

@Service
@Slf4j
public class FoodServiceImpl implements FoodService {

    @Autowired
    private FoodMapper foodMapper;

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    private static final String FOOD_CACHE_KEY = "food:";
    private static final String BUSINESS_FOODS_CACHE_KEY = "business:foods:";
    private static final String HOT_FOODS_CACHE_KEY = "hot:foods";
    private static final String DISCOUNT_FOODS_CACHE_KEY = "discount:foods";
    private static final long CACHE_EXPIRE_TIME = 30; // 30分钟

    @Override
    @SentinelResource(value = "getById", fallback = "getByIdFallback")
    public Food getById(Integer id) {
        if (id == null) {
            return null;
        }

        // 先从缓存中获取
        String cacheKey = FOOD_CACHE_KEY + id;
        Food food = (Food) redisTemplate.opsForValue().get(cacheKey);
        if (food != null) {
            log.debug("从缓存中获取商品信息: {}", id);
            return food;
        }

        // 从数据库查询
        food = foodMapper.selectById(id);
        if (food != null) {
            // 处理折扣信息
            processDiscountList(food);
            // 存入缓存
            redisTemplate.opsForValue().set(cacheKey, food, CACHE_EXPIRE_TIME, TimeUnit.MINUTES);
            log.debug("从数据库获取商品信息并缓存: {}", id);
        }
        return food;
    }

    @Override
    @SentinelResource(value = "getFoodsByIds", fallback = "getFoodsByIdsFallback")
    public List<Food> getFoodsByIds(List<Integer> ids) {
        if (ids == null || ids.isEmpty()) {
            return List.of();
        }

        List<Food> foods = foodMapper.findFoodsByIds(ids);
        // 处理折扣信息
        foods.forEach(this::processDiscountList);
        return foods;
    }

    @Override
    @SentinelResource(value = "getAllFoodsByBusinessId", fallback = "getAllFoodsByBusinessIdFallback")
    public List<Food> getAllFoodsByBusinessId(Integer businessId) {
        if (businessId == null) {
            return List.of();
        }

        // 先从缓存中获取
        String cacheKey = BUSINESS_FOODS_CACHE_KEY + businessId + ":all";
        List<Food> foods = (List<Food>) redisTemplate.opsForValue().get(cacheKey);
        if (foods != null) {
            log.debug("从缓存中获取商家商品列表: {}", businessId);
            return foods;
        }

        // 从数据库查询
        foods = foodMapper.findAllByBusiness(businessId);
        // 处理折扣信息
        foods.forEach(this::processDiscountList);
        // 存入缓存
        redisTemplate.opsForValue().set(cacheKey, foods, CACHE_EXPIRE_TIME, TimeUnit.MINUTES);
        log.debug("从数据库获取商家商品列表并缓存: {}", businessId);
        return foods;
    }

    @Override
    @SentinelResource(value = "getOnSaleFoodsByBusinessId", fallback = "getOnSaleFoodsByBusinessIdFallback")
    public List<Food> getOnSaleFoodsByBusinessId(Integer businessId) {
        if (businessId == null) {
            return List.of();
        }

        // 先从缓存中获取
        String cacheKey = BUSINESS_FOODS_CACHE_KEY + businessId + ":onsale";
        List<Food> foods = (List<Food>) redisTemplate.opsForValue().get(cacheKey);
        if (foods != null) {
            log.debug("从缓存中获取商家上架商品列表: {}", businessId);
            return foods;
        }

        // 从数据库查询
        foods = foodMapper.findOnSaleFoodsByBusiness(businessId);
        // 处理折扣信息
        foods.forEach(this::processDiscountList);
        // 存入缓存
        redisTemplate.opsForValue().set(cacheKey, foods, CACHE_EXPIRE_TIME, TimeUnit.MINUTES);
        log.debug("从数据库获取商家上架商品列表并缓存: {}", businessId);
        return foods;
    }

    @Override
    @SentinelResource(value = "countFoodsByBusinessId", fallback = "countFoodsByBusinessIdFallback")
    public Integer countFoodsByBusinessId(Integer businessId) {
        if (businessId == null) {
            return 0;
        }
        return foodMapper.countFoodsByBusiness(businessId);
    }

    @Override
    @SentinelResource(value = "countOnSaleFoodsByBusinessId", fallback = "countOnSaleFoodsByBusinessIdFallback")
    public Integer countOnSaleFoodsByBusinessId(Integer businessId) {
        if (businessId == null) {
            return 0;
        }
        return foodMapper.countOnSaleFoodsByBusiness(businessId);
    }

    @Override
    @SentinelResource(value = "searchFoodsByName", fallback = "searchFoodsByNameFallback")
    public List<Food> searchFoodsByName(String name) {
        if (name == null || name.trim().isEmpty()) {
            return List.of();
        }
        List<Food> foods = foodMapper.findFoodsByNameLike(name.trim());
        foods.forEach(this::processDiscountList);
        return foods;
    }

    @Override
    @SentinelResource(value = "getFoodsByPriceRange", fallback = "getFoodsByPriceRangeFallback")
    public List<Food> getFoodsByPriceRange(Double minPrice, Double maxPrice) {
        if (minPrice == null || maxPrice == null || minPrice > maxPrice) {
            return List.of();
        }
        List<Food> foods = foodMapper.findFoodsByPriceRange(minPrice, maxPrice);
        foods.forEach(this::processDiscountList);
        return foods;
    }

    @Override
    @SentinelResource(value = "getHotFoods", fallback = "getHotFoodsFallback")
    public List<Food> getHotFoods(Integer limit) {
        if (limit == null || limit <= 0) {
            limit = 10;
        }

        // 先从缓存中获取
        String cacheKey = HOT_FOODS_CACHE_KEY + ":" + limit;
        List<Food> foods = (List<Food>) redisTemplate.opsForValue().get(cacheKey);
        if (foods != null) {
            log.debug("从缓存中获取热门商品列表");
            return foods;
        }

        // 从数据库查询
        foods = foodMapper.findHotFoods(limit);
        foods.forEach(this::processDiscountList);
        // 存入缓存，热门商品缓存时间稍短
        redisTemplate.opsForValue().set(cacheKey, foods, 10, TimeUnit.MINUTES);
        log.debug("从数据库获取热门商品列表并缓存");
        return foods;
    }

    @Override
    @SentinelResource(value = "getHotFoodsByBusinessId", fallback = "getHotFoodsByBusinessIdFallback")
    public List<Food> getHotFoodsByBusinessId(Integer businessId, Integer limit) {
        if (businessId == null || limit == null || limit <= 0) {
            return List.of();
        }
        List<Food> foods = foodMapper.findHotFoodsByBusiness(businessId, limit);
        foods.forEach(this::processDiscountList);
        return foods;
    }

    @Override
    @SentinelResource(value = "getDiscountFoods", fallback = "getDiscountFoodsFallback")
    public List<Food> getDiscountFoods() {
        // 先从缓存中获取
        List<Food> foods = (List<Food>) redisTemplate.opsForValue().get(DISCOUNT_FOODS_CACHE_KEY);
        if (foods != null) {
            log.debug("从缓存中获取特价商品列表");
            return foods;
        }

        // 从数据库查询
        foods = foodMapper.findDiscountFoods();
        foods.forEach(this::processDiscountList);
        // 存入缓存
        redisTemplate.opsForValue().set(DISCOUNT_FOODS_CACHE_KEY, foods, 15, TimeUnit.MINUTES);
        log.debug("从数据库获取特价商品列表并缓存");
        return foods;
    }

    @Override
    @SentinelResource(value = "getDiscountFoodsByBusinessId", fallback = "getDiscountFoodsByBusinessIdFallback")
    public List<Food> getDiscountFoodsByBusinessId(Integer businessId) {
        if (businessId == null) {
            return List.of();
        }
        List<Food> foods = foodMapper.findDiscountFoodsByBusiness(businessId);
        foods.forEach(this::processDiscountList);
        return foods;
    }

    @Override
    @Transactional
    @SentinelResource(value = "addFood", fallback = "addFoodFallback")
    public boolean addFood(Food food) {
        if (food == null) {
            return false;
        }
        try {
            int result = foodMapper.insert(food);
            if (result > 0) {
                // 清理相关缓存
                clearBusinessFoodsCache(food.getBusiness());
                clearHotFoodsCache();
                clearDiscountFoodsCache();
                log.info("新增商品成功: {}", food.getId());
                return true;
            }
        } catch (Exception e) {
            log.error("新增商品失败", e);
        }
        return false;
    }

    @Override
    @Transactional
    @SentinelResource(value = "updateFood", fallback = "updateFoodFallback")
    public boolean updateFood(Food food) {
        if (food == null || food.getId() == null) {
            return false;
        }
        try {
            int result = foodMapper.updateById(food);
            if (result > 0) {
                // 清理相关缓存
                clearFoodCache(food.getId());
                clearBusinessFoodsCache(food.getBusiness());
                clearHotFoodsCache();
                clearDiscountFoodsCache();
                log.info("更新商品成功: {}", food.getId());
                return true;
            }
        } catch (Exception e) {
            log.error("更新商品失败", e);
        }
        return false;
    }

    @Override
    @Transactional
    @SentinelResource(value = "deleteFood", fallback = "deleteFoodFallback")
    public boolean deleteFood(Integer id) {
        if (id == null) {
            return false;
        }
        try {
            Food food = foodMapper.selectById(id);
            if (food != null) {
                int result = foodMapper.deleteById(id);
                if (result > 0) {
                    // 清理相关缓存
                    clearFoodCache(id);
                    clearBusinessFoodsCache(food.getBusiness());
                    clearHotFoodsCache();
                    clearDiscountFoodsCache();
                    log.info("删除商品成功: {}", id);
                    return true;
                }
            }
        } catch (Exception e) {
            log.error("删除商品失败", e);
        }
        return false;
    }

    @Override
    @Transactional
    @SentinelResource(value = "onSaleFood", fallback = "onSaleFoodFallback")
    public boolean onSaleFood(Integer id) {
        if (id == null) {
            return false;
        }
        try {
            Food food = new Food();
            food.setId(id);
            food.setSelling(1);
            int result = foodMapper.updateById(food);
            if (result > 0) {
                // 清理相关缓存
                Food existingFood = foodMapper.selectById(id);
                if (existingFood != null) {
                    clearFoodCache(id);
                    clearBusinessFoodsCache(existingFood.getBusiness());
                    clearHotFoodsCache();
                    clearDiscountFoodsCache();
                }
                log.info("商品上架成功: {}", id);
                return true;
            }
        } catch (Exception e) {
            log.error("商品上架失败", e);
        }
        return false;
    }

    @Override
    @Transactional
    @SentinelResource(value = "offSaleFood", fallback = "offSaleFoodFallback")
    public boolean offSaleFood(Integer id) {
        if (id == null) {
            return false;
        }
        try {
            Food food = new Food();
            food.setId(id);
            food.setSelling(0);
            int result = foodMapper.updateById(food);
            if (result > 0) {
                // 清理相关缓存
                Food existingFood = foodMapper.selectById(id);
                if (existingFood != null) {
                    clearFoodCache(id);
                    clearBusinessFoodsCache(existingFood.getBusiness());
                    clearHotFoodsCache();
                    clearDiscountFoodsCache();
                }
                log.info("商品下架成功: {}", id);
                return true;
            }
        } catch (Exception e) {
            log.error("商品下架失败", e);
        }
        return false;
    }

    /**
     * 处理折扣信息
     */
    private void processDiscountList(Food food) {
        if (food != null && food.getDiscount() != null) {
            food.setDiscount(food.getDiscount());
        }
    }

    /**
     * 清理商品缓存
     */
    private void clearFoodCache(Integer id) {
        if (id != null) {
            redisTemplate.delete(FOOD_CACHE_KEY + id);
        }
    }

    /**
     * 清理商家商品缓存
     */
    private void clearBusinessFoodsCache(Integer businessId) {
        if (businessId != null) {
            redisTemplate.delete(BUSINESS_FOODS_CACHE_KEY + businessId + ":all");
            redisTemplate.delete(BUSINESS_FOODS_CACHE_KEY + businessId + ":onsale");
        }
    }

    /**
     * 清理热门商品缓存
     */
    private void clearHotFoodsCache() {
        redisTemplate.delete(HOT_FOODS_CACHE_KEY + ":*");
    }

    /**
     * 清理特价商品缓存
     */
    private void clearDiscountFoodsCache() {
        redisTemplate.delete(DISCOUNT_FOODS_CACHE_KEY);
    }

    // Sentinel 降级方法
    public Food getByIdFallback(Integer id, Throwable throwable) {
        log.error("获取商品信息降级处理: {}", id, throwable);
        return null;
    }

    public List<Food> getFoodsByIdsFallback(List<Integer> ids, Throwable throwable) {
        log.error("批量获取商品信息降级处理: {}", ids, throwable);
        return List.of();
    }

    public List<Food> getAllFoodsByBusinessIdFallback(Integer businessId, Throwable throwable) {
        log.error("获取商家商品列表降级处理: {}", businessId, throwable);
        return List.of();
    }

    public List<Food> getOnSaleFoodsByBusinessIdFallback(Integer businessId, Throwable throwable) {
        log.error("获取商家上架商品列表降级处理: {}", businessId, throwable);
        return List.of();
    }

    public Integer countFoodsByBusinessIdFallback(Integer businessId, Throwable throwable) {
        log.error("统计商家商品数量降级处理: {}", businessId, throwable);
        return 0;
    }

    public Integer countOnSaleFoodsByBusinessIdFallback(Integer businessId, Throwable throwable) {
        log.error("统计商家上架商品数量降级处理: {}", businessId, throwable);
        return 0;
    }

    public List<Food> searchFoodsByNameFallback(String name, Throwable throwable) {
        log.error("搜索商品降级处理: {}", name, throwable);
        return List.of();
    }

    public List<Food> getFoodsByPriceRangeFallback(Double minPrice, Double maxPrice, Throwable throwable) {
        log.error("价格区间查询商品降级处理: {}-{}", minPrice, maxPrice, throwable);
        return List.of();
    }

    public List<Food> getHotFoodsFallback(Integer limit, Throwable throwable) {
        log.error("获取热门商品降级处理: {}", limit, throwable);
        return List.of();
    }

    public List<Food> getHotFoodsByBusinessIdFallback(Integer businessId, Integer limit, Throwable throwable) {
        log.error("获取商家热门商品降级处理: {}-{}", businessId, limit, throwable);
        return List.of();
    }

    public List<Food> getDiscountFoodsFallback(Throwable throwable) {
        log.error("获取特价商品降级处理", throwable);
        return List.of();
    }

    public List<Food> getDiscountFoodsByBusinessIdFallback(Integer businessId, Throwable throwable) {
        log.error("获取商家特价商品降级处理: {}", businessId, throwable);
        return List.of();
    }

    public boolean addFoodFallback(Food food, Throwable throwable) {
        log.error("新增商品降级处理: {}", food, throwable);
        return false;
    }

    public boolean updateFoodFallback(Food food, Throwable throwable) {
        log.error("更新商品降级处理: {}", food, throwable);
        return false;
    }

    public boolean deleteFoodFallback(Integer id, Throwable throwable) {
        log.error("删除商品降级处理: {}", id, throwable);
        return false;
    }

    public boolean onSaleFoodFallback(Integer id, Throwable throwable) {
        log.error("商品上架降级处理: {}", id, throwable);
        return false;
    }

    public boolean offSaleFoodFallback(Integer id, Throwable throwable) {
        log.error("商品下架降级处理: {}", id, throwable);
        return false;
    }
}

================
File: eleme-food-service/src/main/java/org/example/service/FoodService.java
================
package org.example.service;

import org.example.entity.Food;

import java.util.List;

public interface FoodService {

    /**
     * 根据ID查询商品
     * @param id 商品ID
     * @return 商品信息
     */
    Food getById(Integer id);

    /**
     * 根据ID列表批量查询商品
     * @param ids 商品ID列表
     * @return 商品列表
     */
    List<Food> getFoodsByIds(List<Integer> ids);

    /**
     * 根据商家ID查询所有商品
     * @param businessId 商家ID
     * @return 商品列表
     */
    List<Food> getAllFoodsByBusinessId(Integer businessId);

    /**
     * 根据商家ID查询上架的商品
     * @param businessId 商家ID
     * @return 上架商品列表
     */
    List<Food> getOnSaleFoodsByBusinessId(Integer businessId);

    /**
     * 根据商家ID查询商品数量
     * @param businessId 商家ID
     * @return 商品数量
     */
    Integer countFoodsByBusinessId(Integer businessId);

    /**
     * 根据商家ID查询上架商品数量
     * @param businessId 商家ID
     * @return 上架商品数量
     */
    Integer countOnSaleFoodsByBusinessId(Integer businessId);

    /**
     * 根据商品名称搜索商品
     * @param name 商品名称关键词
     * @return 商品列表
     */
    List<Food> searchFoodsByName(String name);

    /**
     * 根据价格区间查询商品
     * @param minPrice 最低价格
     * @param maxPrice 最高价格
     * @return 商品列表
     */
    List<Food> getFoodsByPriceRange(Double minPrice, Double maxPrice);

    /**
     * 查询热门商品
     * @param limit 限制数量
     * @return 热门商品列表
     */
    List<Food> getHotFoods(Integer limit);

    /**
     * 根据商家ID查询热门商品
     * @param businessId 商家ID
     * @param limit 限制数量
     * @return 热门商品列表
     */
    List<Food> getHotFoodsByBusinessId(Integer businessId, Integer limit);

    /**
     * 查询特价商品
     * @return 特价商品列表
     */
    List<Food> getDiscountFoods();

    /**
     * 根据商家ID查询特价商品
     * @param businessId 商家ID
     * @return 特价商品列表
     */
    List<Food> getDiscountFoodsByBusinessId(Integer businessId);

    /**
     * 新增商品
     * @param food 商品信息
     * @return 是否成功
     */
    boolean addFood(Food food);

    /**
     * 更新商品信息
     * @param food 商品信息
     * @return 是否成功
     */
    boolean updateFood(Food food);

    /**
     * 删除商品
     * @param id 商品ID
     * @return 是否成功
     */
    boolean deleteFood(Integer id);

    /**
     * 商品上架
     * @param id 商品ID
     * @return 是否成功
     */
    boolean onSaleFood(Integer id);

    /**
     * 商品下架
     * @param id 商品ID
     * @return 是否成功
     */
    boolean offSaleFood(Integer id);
}

================
File: eleme-food-service/src/main/java/org/example/FoodServiceApplication.java
================
package org.example;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
@MapperScan("org.example.mapper")
public class FoodServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(FoodServiceApplication.class, args);
    }
}

================
File: eleme-food-service/src/main/resources/application.yml
================
server:
  port: 8003

spring:
  application:
    name: eleme-food-service
  
  config:
    import: "optional:nacos:eleme-food-service.yml"
  
  profiles:
    active: dev
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        username: nacos
        password: nacos
        namespace: public
      config:
        server-addr: localhost:8848
        username: nacos
        password: nacos
        namespace: public
        file-extension: yml
        shared-configs:
          - data-id: eleme-common.yml
            refresh: true
    sentinel:
      transport:
        dashboard: localhost:8080
      # 暂时禁用 Nacos 数据源配置
      # datasource:
      #   ds1:
      #     nacos:
      #       server-addr: localhost:8848
      #       username: nacos
      #       password: nacos
      #       namespace: eleme-dev
      #       dataId: eleme-food-service-sentinel-rules
      #       groupId: DEFAULT_GROUP
      #       rule-type: flow
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/eleme_db?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: eleme
    password: eleme123
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  redis:
    host: localhost
    port: 6379
    password: redis_password
    database: 2
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
    timeout: 5000ms

mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      id-type: AUTO
      table-prefix: t_
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
  mapper-locations: classpath*:mapper/**/*Mapper.xml

logging:
  level:
    org.example: DEBUG
    org.springframework.cloud.openfeign: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: full
  sentinel:
    enabled: true
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

================
File: eleme-food-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-food-service</artifactId>
    <description>食物服务</description>

    <dependencies>
        <!-- 公共模块 -->
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>eleme-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring Cloud Gateway 依赖移除 - 只有网关服务需要此依赖 -->

        <!-- Nacos Discovery -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!-- Nacos Config -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!-- Sentinel -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>

        <!-- OpenFeign -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

        <!-- Load Balancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>

        <!-- MyBatis Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>

        <!-- MySQL -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Jackson JSR310 for LocalDateTime serialization -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- SpringDoc OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>

        <!-- Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

================
File: eleme-gateway/src/main/java/org/example/config/SwaggerConfig.java
================
package org.example.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.web.reactive.function.server.RouterFunction;
import org.springframework.web.reactive.function.server.ServerResponse;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import static org.springframework.web.reactive.function.server.RouterFunctions.route;
import static org.springframework.web.reactive.function.server.RequestPredicates.GET;

/**
 * Swagger API文档聚合配置
 */
@Configuration
public class SwaggerConfig {

    @Bean
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder();
    }

    @Bean
    public RouterFunction<ServerResponse> swaggerRouterFunction(WebClient.Builder webClientBuilder) {
        WebClient webClient = webClientBuilder.build();
        
        return route(GET("/v3/api-docs/swagger-config"), request -> {
            String configJson = """
                {
                    "urls": [
                        {
                            "name": "用户服务",
                            "url": "http://localhost:8001/v3/api-docs"
                        },
                        {
                            "name": "商家服务", 
                            "url": "http://localhost:8002/v3/api-docs"
                        },
                        {
                            "name": "食物服务",
                            "url": "http://localhost:8003/v3/api-docs"
                        },
                        {
                            "name": "订单服务",
                            "url": "http://localhost:8004/v3/api-docs"
                        },
                        {
                            "name": "支付服务",
                            "url": "http://localhost:8005/v3/api-docs"
                        },
                        {
                            "name": "通知服务",
                            "url": "http://localhost:8006/v3/api-docs"
                        },
                        {
                            "name": "验证码服务",
                            "url": "http://localhost:8007/v3/api-docs"
                        }
                    ]
                }
                """;
            
            return ServerResponse.ok()
                    .header("Content-Type", "application/json")
                    .header("Access-Control-Allow-Origin", "*")
                    .header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
                    .header("Access-Control-Allow-Headers", "*")
                    .bodyValue(configJson);
        }).andRoute(GET("/swagger-ui.html"), request -> {
            String swaggerHtml = """
                <!DOCTYPE html>
                <html lang="zh-CN">
                <head>
                    <meta charset="UTF-8">
                    <title>饿了么微服务API文档</title>
                    <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@5.2.0/swagger-ui-bundle.css" />
                    <style>
                        html {
                            box-sizing: border-box;
                            overflow: -moz-scrollbars-vertical;
                            overflow-y: scroll;
                        }
                        *, *:before, *:after {
                            box-sizing: inherit;
                        }
                        body {
                            margin:0;
                            background: #fafafa;
                        }
                    </style>
                </head>
                <body>
                    <div id="swagger-ui"></div>
                    <script src="https://unpkg.com/swagger-ui-dist@5.2.0/swagger-ui-bundle.js"></script>
                    <script src="https://unpkg.com/swagger-ui-dist@5.2.0/swagger-ui-standalone-preset.js"></script>
                    <script>
                        window.onload = function() {
                            const ui = SwaggerUIBundle({
                                urls: [
                                    {
                                        name: "用户服务",
                                        url: "http://localhost:8001/v3/api-docs"
                                    },
                                    {
                                        name: "商家服务", 
                                        url: "http://localhost:8002/v3/api-docs"
                                    },
                                    {
                                        name: "食物服务",
                                        url: "http://localhost:8003/v3/api-docs"
                                    },
                                    {
                                        name: "订单服务",
                                        url: "http://localhost:8004/v3/api-docs"
                                    },
                                    {
                                        name: "支付服务",
                                        url: "http://localhost:8005/v3/api-docs"
                                    },
                                    {
                                        name: "通知服务",
                                        url: "http://localhost:8006/v3/api-docs"
                                    },
                                    {
                                        name: "验证码服务",
                                        url: "http://localhost:8007/v3/api-docs"
                                    }
                                ],
                                dom_id: '#swagger-ui',
                                deepLinking: true,
                                presets: [
                                    SwaggerUIBundle.presets.apis,
                                    SwaggerUIStandalonePreset
                                ],
                                plugins: [
                                    SwaggerUIBundle.plugins.DownloadUrl
                                ],
                                layout: "StandaloneLayout"
                            });
                        };
                    </script>
                </body>
                </html>
                """;
            
            return ServerResponse.ok()
                    .header("Content-Type", "text/html")
                    .header("Access-Control-Allow-Origin", "*")
                    .bodyValue(swaggerHtml);
        });
    }
}

================
File: eleme-gateway/src/main/java/org/example/filter/AuthFilter.java
================
package org.example.filter;

import lombok.extern.slf4j.Slf4j;
import org.example.constants.CommonConstants;
import org.example.utils.JwtUtil;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

/**
 * 身份验证过滤器
 */
@Slf4j
@Component
public class AuthFilter implements GlobalFilter, Ordered {

    /**
     * 不需要验证的路径
     */
    private static final List<String> EXCLUDE_PATHS = Arrays.asList(
        "/api/user/login",
        "/api/user/register",
        "/api/captcha",
        "/api/business/getAll",
        "/api/business/getBusinessById",
        "/api/business/getBusinessByType",
        "/api/business/", // 支持 /api/business/{id} 格式
        "/api/food/getFoodById",
        "/api/food/getAllByIds",
        "/api/food/business/", // 支持 /api/food/business/{id}/onsale 格式
        "/api/notification/sendVerificationCode",
        "/actuator",
        "/health",
        "/swagger-ui",
        "/swagger-ui.html",
        "/swagger-resources",
        "/swagger-config",
        "/v3/api-docs",
        "/webjars",
        "/doc.html",
        "/favicon.ico"
    );

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        ServerHttpRequest request = exchange.getRequest();
        String path = request.getURI().getPath();

        // 检查是否需要跳过验证
        if (shouldSkipAuth(path)) {
            return chain.filter(exchange);
        }

        // 获取Authorization头
        String authorization = request.getHeaders().getFirst(CommonConstants.TOKEN_HEADER);
        
        if (authorization == null || !authorization.startsWith(CommonConstants.TOKEN_PREFIX)) {
            log.warn("请求路径：{} 缺少认证头", path);
            return handleUnauthorized(exchange, "缺少认证头");
        }

        // 提取Token
        String token = authorization.substring(CommonConstants.TOKEN_PREFIX.length());
        
        // 验证Token
        if (!JwtUtil.verifyToken(token)) {
            log.warn("请求路径：{} Token验证失败", path);
            return handleUnauthorized(exchange, "Token验证失败");
        }

        // 检查Token是否过期
        if (JwtUtil.isTokenExpired(token)) {
            log.warn("请求路径：{} Token已过期", path);
            return handleUnauthorized(exchange, "Token已过期");
        }

        // 获取用户信息并添加到请求头
        String userId = JwtUtil.getUserId(token);
        String userType = JwtUtil.getUserType(token);
        
        if (userId == null || userType == null) {
            log.warn("请求路径：{} Token中缺少用户信息", path);
            return handleUnauthorized(exchange, "Token中缺少用户信息");
        }

        // 添加用户信息到请求头
        ServerHttpRequest modifiedRequest = request.mutate()
                .header("X-User-Id", userId)
                .header("X-User-Type", userType)
                .build();

        log.info("用户 {} (类型: {}) 访问路径：{}", userId, userType, path);

        return chain.filter(exchange.mutate().request(modifiedRequest).build());
    }

    /**
     * 检查是否需要跳过认证
     */
    private boolean shouldSkipAuth(String path) {
        return EXCLUDE_PATHS.stream().anyMatch(excludePath -> 
            path.startsWith(excludePath) || path.contains(excludePath));
    }

    /**
     * 处理未授权请求
     */
    private Mono<Void> handleUnauthorized(ServerWebExchange exchange, String message) {
        ServerHttpResponse response = exchange.getResponse();
        response.setStatusCode(HttpStatus.UNAUTHORIZED);
        response.getHeaders().add("Content-Type", MediaType.APPLICATION_JSON_VALUE);

        String body = String.format(
            "{\"code\": %d, \"message\": \"%s\", \"data\": null, \"timestamp\": %d}",
            CommonConstants.UNAUTHORIZED_CODE, message, System.currentTimeMillis()
        );

        DataBuffer buffer = response.bufferFactory().wrap(body.getBytes(StandardCharsets.UTF_8));
        return response.writeWith(Flux.just(buffer));
    }

    @Override
    public int getOrder() {
        return -100; // 优先级最高
    }
}

================
File: eleme-gateway/src/main/java/org/example/filter/LoggingFilter.java
================
package org.example.filter;

import lombok.extern.slf4j.Slf4j;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

/**
 * 日志过滤器
 */
@Slf4j
@Component
public class LoggingFilter implements GlobalFilter, Ordered {

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        ServerHttpRequest request = exchange.getRequest();
        String path = request.getURI().getPath();
        String method = request.getMethod().name();
        String remoteAddress = getRemoteAddress(request);
        
        long startTime = System.currentTimeMillis();
        
        log.info("请求开始 - 方法: {}, 路径: {}, 客户端IP: {}", method, path, remoteAddress);
        
        return chain.filter(exchange).then(
            Mono.fromRunnable(() -> {
                long endTime = System.currentTimeMillis();
                long duration = endTime - startTime;
                int statusCode = exchange.getResponse().getStatusCode() != null 
                    ? exchange.getResponse().getStatusCode().value() : 0;
                
                log.info("请求结束 - 方法: {}, 路径: {}, 状态码: {}, 耗时: {}ms", 
                    method, path, statusCode, duration);
            })
        );
    }

    /**
     * 获取客户端真实IP
     */
    private String getRemoteAddress(ServerHttpRequest request) {
        String xForwardedFor = request.getHeaders().getFirst("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }
        
        String xRealIp = request.getHeaders().getFirst("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty()) {
            return xRealIp;
        }
        
        return request.getRemoteAddress() != null 
            ? request.getRemoteAddress().getAddress().getHostAddress() 
            : "unknown";
    }

    @Override
    public int getOrder() {
        return -50; // 日志过滤器优先级较高
    }
}

================
File: eleme-gateway/src/main/java/org/example/filter/RateLimitFilter.java
================
package org.example.filter;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.Arrays;
import java.util.List;

/**
 * 限流过滤器
 */
@Slf4j
@Component
public class RateLimitFilter implements GlobalFilter, Ordered {

    @Autowired
    private StringRedisTemplate redisTemplate;

    /**
     * 需要限流的路径
     */
    private static final List<String> RATE_LIMIT_PATHS = Arrays.asList(
        "/api/user/login",
        "/api/user/register",
        "/api/order/addUserOrder",
        "/api/payment"
    );

    /**
     * 限流配置：每个IP每分钟最多请求次数
     */
    private static final int MAX_REQUESTS_PER_MINUTE = 60;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        ServerHttpRequest request = exchange.getRequest();
        String path = request.getURI().getPath();

        // 检查是否需要限流
        if (!shouldRateLimit(path)) {
            return chain.filter(exchange);
        }

        String clientIp = getClientIp(request);
        String redisKey = "rate_limit:" + clientIp + ":" + path;

        try {
            // 获取当前请求数
            String currentRequestsStr = redisTemplate.opsForValue().get(redisKey);
            int currentRequests = currentRequestsStr != null ? Integer.parseInt(currentRequestsStr) : 0;

            if (currentRequests >= MAX_REQUESTS_PER_MINUTE) {
                log.warn("IP {} 对路径 {} 的请求超过限制，当前请求数: {}", clientIp, path, currentRequests);
                return handleRateLimitExceeded(exchange);
            }

            // 增加请求计数
            if (currentRequests == 0) {
                // 首次请求，设置过期时间
                redisTemplate.opsForValue().set(redisKey, "1", Duration.ofMinutes(1));
            } else {
                // 增加计数
                redisTemplate.opsForValue().increment(redisKey);
            }

            log.debug("IP {} 对路径 {} 的请求计数: {}", clientIp, path, currentRequests + 1);

        } catch (Exception e) {
            log.error("限流检查失败，IP: {}, 路径: {}", clientIp, path, e);
            // 如果Redis异常，继续处理请求
        }

        return chain.filter(exchange);
    }

    /**
     * 检查是否需要限流
     */
    private boolean shouldRateLimit(String path) {
        return RATE_LIMIT_PATHS.stream().anyMatch(path::startsWith);
    }

    /**
     * 获取客户端IP
     */
    private String getClientIp(ServerHttpRequest request) {
        String xForwardedFor = request.getHeaders().getFirst("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }
        
        String xRealIp = request.getHeaders().getFirst("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty()) {
            return xRealIp;
        }
        
        return request.getRemoteAddress() != null 
            ? request.getRemoteAddress().getAddress().getHostAddress() 
            : "unknown";
    }

    /**
     * 处理限流超过的请求
     */
    private Mono<Void> handleRateLimitExceeded(ServerWebExchange exchange) {
        ServerHttpResponse response = exchange.getResponse();
        response.setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
        response.getHeaders().add("Content-Type", MediaType.APPLICATION_JSON_VALUE);

        String body = String.format(
            "{\"code\": %d, \"message\": \"%s\", \"data\": null, \"timestamp\": %d}",
            429, "请求过于频繁，请稍后再试", System.currentTimeMillis()
        );

        DataBuffer buffer = response.bufferFactory().wrap(body.getBytes(StandardCharsets.UTF_8));
        return response.writeWith(Flux.just(buffer));
    }

    @Override
    public int getOrder() {
        return -80; // 限流过滤器优先级较高，在认证过滤器之后
    }
}

================
File: eleme-gateway/src/main/java/org/example/GatewayApplication.java
================
package org.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

/**
 * API网关启动类
 */
@SpringBootApplication
@EnableDiscoveryClient
public class GatewayApplication {
    public static void main(String[] args) {
        SpringApplication.run(GatewayApplication.class, args);
    }
}

================
File: eleme-gateway/src/main/resources/application.yml
================
server:
  port: 8888

spring:
  application:
    name: eleme-gateway
  
  # 完全禁用Nacos配置中心，避免配置冲突
  # config:
  #   import: "optional:nacos:eleme-gateway.yml"
  
  cloud:
    # 完全禁用负载均衡器
    loadbalancer:
      enabled: false
      ribbon:
        enabled: false
      cache:
        enabled: false
    
    # 禁用Nacos服务发现和配置，避免自动负载均衡
    nacos:
      discovery:
        enabled: false
        # server-addr: localhost:8848
        # namespace: public
        # group: DEFAULT_GROUP
      config:
        import-check:
          enabled: false
        # server-addr: localhost:8848
        # file-extension: yml
        # namespace: public
        # group: DEFAULT_GROUP
        # shared-configs:
        #   - data-id: eleme-gateway.yml
        #     group: DEFAULT_GROUP
        #     refresh: true
    
    gateway:
      # 完全禁用服务发现
      discovery:
        locator:
          enabled: false
      # 全局CORS配置
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: false
            maxAge: 3600
      routes:
        # 用户服务路由 - 直接路由
        - id: user-service
          uri: http://localhost:8001
          predicates:
            - Path=/api/user/**
          filters:
            - StripPrefix=1
        
        # 商家服务路由 - 直接路由
        - id: business-service
          uri: http://localhost:8002
          predicates:
            - Path=/api/business/**
          filters:
            - StripPrefix=1
        
        # 食物服务路由 - 直接路由
        - id: food-service
          uri: http://localhost:8003
          predicates:
            - Path=/api/food/**
          filters:
            - StripPrefix=1
        
        # 订单服务路由 - 直接路由
        - id: order-service
          uri: http://localhost:8004
          predicates:
            - Path=/api/order/**
          filters:
            - StripPrefix=1
        
        # 支付服务路由 - 直接路由
        - id: payment-service
          uri: http://localhost:8005
          predicates:
            - Path=/api/payment/**
          filters:
            - StripPrefix=1
        
        # 通知服务路由 - 直接路由
        - id: notification-service
          uri: http://localhost:8006
          predicates:
            - Path=/api/notification/**
          filters:
            - StripPrefix=1
        
        # 验证码服务路由 - 直接路由
        - id: captcha-service
          uri: http://localhost:8007
          predicates:
            - Path=/api/captcha/**
          filters:
            - StripPrefix=1
    
    # 禁用Sentinel，避免额外的负载均衡问题
    # sentinel:
    #   transport:
    #     dashboard: localhost:8080
    #     port: 8719
    #   eager: true
    #   log:
    #     dir: logs/sentinel
  
  # 禁用Redis，简化配置
  # redis:
  #   host: localhost
  #   port: 6379
  #   password: redis123
  #   database: 0
  #   jedis:
  #     pool:
  #       max-active: 8
  #       max-wait: -1
  #       max-idle: 8
  #       min-idle: 0
  #   timeout: 3000ms

# SpringDoc 配置
springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    config-url: /v3/api-docs/swagger-config
    disable-swagger-default-url: true
  info:
    title: 饿了么微服务API文档
    description: 整合所有微服务的API文档，包括用户、商家、食物、订单、支付、通知、验证码等服务
    version: 1.0.0
    contact:
      name: 开发团队
      email: dev@eleme.com

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: "health,info"
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}

# 日志配置
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.cloud.loadbalancer: OFF
    org.example: DEBUG
  file:
    name: logs/gateway.log
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

================
File: eleme-gateway/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-gateway</artifactId>
    <packaging>jar</packaging>

    <dependencies>
        <!-- Spring Boot Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <!-- Spring Cloud Gateway -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-gateway</artifactId>
        </dependency>

        <!-- Nacos 服务发现 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!-- Nacos 配置中心 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!-- Spring Cloud LoadBalancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>

        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Sentinel 熔断降级 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>

        <!-- Sentinel Gateway -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-alibaba-sentinel-gateway</artifactId>
        </dependency>

        <!-- 公共模块 -->
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>eleme-common</artifactId>
            <version>${project.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-web</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.baomidou</groupId>
                    <artifactId>mybatis-plus-boot-starter</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-jdbc</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- Hutool 工具包 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <!-- FastJSON -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>

        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- SpringDoc OpenAPI WebFlux (用于Gateway文档聚合) -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webflux-ui</artifactId>
            <version>2.2.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

================
File: eleme-monitor/src/main/java/org/example/config/MetricsConfig.java
================
package org.example.config;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.binder.MeterBinder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * 监控指标配置
 */
@Configuration
public class MetricsConfig {

    /**
     * 自定义业务指标
     */
    @Bean
    public MeterBinder customMetrics(MeterRegistry meterRegistry) {
        return (registry) -> {
            // 服务在线数量
            registry.gauge("eleme.services.online", 0);
            
            // 总订单数
            registry.gauge("eleme.orders.total", 0);
            
            // 今日订单数
            registry.gauge("eleme.orders.today", 0);
            
            // 在线用户数
            registry.gauge("eleme.users.online", 0);
            
            // 系统错误数
            registry.gauge("eleme.system.errors", 0);
        };
    }
}

================
File: eleme-monitor/src/main/java/org/example/config/SecurityConfig.java
================
package org.example.config;

import de.codecentric.boot.admin.server.config.AdminServerProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

/**
 * Spring Boot Admin 安全配置
 */
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final AdminServerProperties adminServerProperties;

    public SecurityConfig(AdminServerProperties adminServerProperties) {
        this.adminServerProperties = adminServerProperties;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        UserDetails user = User.builder()
                .username("admin")
                .password(passwordEncoder().encode("admin"))
                .roles("ADMIN")
                .build();
        return new InMemoryUserDetailsManager(user);
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        SavedRequestAwareAuthenticationSuccessHandler successHandler = 
            new SavedRequestAwareAuthenticationSuccessHandler();
        successHandler.setTargetUrlParameter("redirectTo");
        successHandler.setDefaultTargetUrl(adminServerProperties.getContextPath() + "/");

        http
            .authorizeHttpRequests(authz -> authz
                .requestMatchers(new AntPathRequestMatcher(adminServerProperties.getContextPath() + "/assets/**")).permitAll()
                .requestMatchers(new AntPathRequestMatcher(adminServerProperties.getContextPath() + "/login")).permitAll()
                .requestMatchers(new AntPathRequestMatcher(adminServerProperties.getContextPath() + "/actuator/**")).permitAll()
                .requestMatchers(new AntPathRequestMatcher("/actuator/**")).permitAll()
                .anyRequest().authenticated()
            )
            .formLogin(form -> form
                .loginPage(adminServerProperties.getContextPath() + "/login")
                .successHandler(successHandler)
                .permitAll()
            )
            .logout(logout -> logout
                .logoutUrl(adminServerProperties.getContextPath() + "/logout")
                .logoutSuccessUrl(adminServerProperties.getContextPath() + "/login")
                .permitAll()
            )
            .httpBasic(httpBasic -> httpBasic
                .realmName("Spring Boot Admin")
            )
            .csrf(csrf -> csrf.disable())
            .headers(headers -> headers
                .frameOptions().deny()
            );

        return http.build();
    }
}

================
File: eleme-monitor/src/main/java/org/example/MonitorApplication.java
================
package org.example;

import de.codecentric.boot.admin.server.config.EnableAdminServer;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

/**
 * 监控服务启动类
 */
@SpringBootApplication
@EnableAdminServer
@EnableDiscoveryClient
public class MonitorApplication {
    public static void main(String[] args) {
        SpringApplication.run(MonitorApplication.class, args);
    }
}

================
File: eleme-monitor/src/main/resources/application.yml
================
server:
  port: 8009

spring:
  application:
    name: eleme-monitor
  
  # 数据源配置
  datasource:
    url: jdbc:mysql://localhost:3306/eleme_monitor?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  
  # JPA配置
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  
  # Spring Boot Admin配置
  boot:
    admin:
      ui:
        title: "饿了么微服务监控中心"
        brand: "Eleme Monitor"
      server:
        # 启用详细健康检查
        enabled: true
      client:
        url: http://localhost:8009
        instance:
          management-url: http://localhost:8009/actuator
          health-url: http://localhost:8009/actuator/health
          service-url: http://localhost:8009/
  
  # 安全配置
  security:
    user:
      name: admin
      password: admin
      roles: ADMIN

# Nacos配置
cloud:
  nacos:
    discovery:
      server-addr: localhost:8848
      namespace: eleme-dev
    config:
      server-addr: localhost:8848
      file-extension: yml
      namespace: eleme-dev

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  
  # 度量标签配置
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true
        step: 10s
  
  # 健康检查配置
  health:
    diskspace:
      enabled: true
    redis:
      enabled: true
    db:
      enabled: true

# 日志配置
logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    de.codecentric.boot.admin: DEBUG
    org.example: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{50}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{50}] - %msg%n"
  file:
    name: logs/monitor.log
    max-size: 10MB
    max-history: 30

# 分布式追踪配置
zipkin:
  base-url: http://localhost:9411
  sender:
    type: web
  
sleuth:
  sampler:
    probability: 1.0
  zipkin:
    base-url: http://localhost:9411

================
File: eleme-monitor/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-monitor</artifactId>
    <name>eleme-monitor</name>
    <description>饿了么监控服务</description>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Spring Boot Admin Server -->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-server</artifactId>
        </dependency>
        
        <!-- Spring Boot Admin Client -->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
        </dependency>
        
        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        
        <!-- Spring Boot Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        
        <!-- Nacos Discovery -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        
        <!-- Micrometer Prometheus -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        
        <!-- ELK Stack - Logstash Encoder -->
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
        </dependency>
        
        <!-- Micrometer Tracing -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-brave</artifactId>
        </dependency>
        
        <!-- Zipkin Reporter -->
        <dependency>
            <groupId>io.zipkin.reporter2</groupId>
            <artifactId>zipkin-reporter-brave</artifactId>
        </dependency>
        
        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

================
File: eleme-notification-service/src/main/java/org/example/config/GlobalExceptionHandler.java
================
package org.example.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 全局异常处理器
 */
@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {
    
    /**
     * 处理参数验证异常
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, Object>> handleValidationExceptions(MethodArgumentNotValidException ex) {
        log.error("参数验证失败", ex);
        
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.BAD_REQUEST.value());
        response.put("message", "参数验证失败");
        response.put("errors", errors);
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.badRequest().body(response);
    }
    
    /**
     * 处理绑定异常
     */
    @ExceptionHandler(BindException.class)
    public ResponseEntity<Map<String, Object>> handleBindException(BindException ex) {
        log.error("参数绑定失败", ex);
        
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.BAD_REQUEST.value());
        response.put("message", "参数绑定失败");
        response.put("errors", errors);
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.badRequest().body(response);
    }
    
    /**
     * 处理约束违反异常
     */
    @ExceptionHandler(ConstraintViolationException.class)
    public ResponseEntity<Map<String, Object>> handleConstraintViolationException(ConstraintViolationException ex) {
        log.error("约束违反异常", ex);
        
        String message = ex.getConstraintViolations().stream()
                .map(ConstraintViolation::getMessage)
                .collect(Collectors.joining(", "));
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.BAD_REQUEST.value());
        response.put("message", "约束违反：" + message);
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.badRequest().body(response);
    }
    
    /**
     * 处理业务异常
     */
    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<Map<String, Object>> handleRuntimeException(RuntimeException ex) {
        log.error("运行时异常", ex);
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.INTERNAL_SERVER_ERROR.value());
        response.put("message", ex.getMessage());
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }
    
    /**
     * 处理所有其他异常
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, Object>> handleGenericException(Exception ex) {
        log.error("未知异常", ex);
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.INTERNAL_SERVER_ERROR.value());
        response.put("message", "系统内部错误");
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }
    
    /**
     * 处理邮件发送异常
     */
    @ExceptionHandler(org.springframework.mail.MailException.class)
    public ResponseEntity<Map<String, Object>> handleMailException(org.springframework.mail.MailException ex) {
        log.error("邮件发送异常", ex);
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.SERVICE_UNAVAILABLE.value());
        response.put("message", "邮件发送失败：" + ex.getMessage());
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(response);
    }
    
    /**
     * 处理非法参数异常
     */
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<Map<String, Object>> handleIllegalArgumentException(IllegalArgumentException ex) {
        log.error("非法参数异常", ex);
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("code", HttpStatus.BAD_REQUEST.value());
        response.put("message", "参数错误：" + ex.getMessage());
        response.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.badRequest().body(response);
    }
}

================
File: eleme-notification-service/src/main/java/org/example/controller/NotificationController.java
================
package org.example.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.*;
import org.example.service.EmailService;
import org.example.service.NotificationService;
import org.example.service.VerificationCodeService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Map;

/**
 * 通知服务控制器
 */
@Slf4j
@RestController
@RequestMapping("/notification")
@RequiredArgsConstructor
@Validated
@Tag(name = "通知服务", description = "提供邮件、短信等通知功能")
public class NotificationController {
    
    private final EmailService emailService;
    private final NotificationService notificationService;
    private final VerificationCodeService verificationCodeService;
    
    /**
     * 发送邮件
     */
    @PostMapping("/email/send")
    @Operation(summary = "发送邮件", description = "发送邮件通知")
    public ResponseEntity<NotificationResponseDTO> sendEmail(@Valid @RequestBody EmailRequestDTO emailRequest) {
        log.info("收到邮件发送请求，收件人：{}", emailRequest.getTo());
        
        NotificationResponseDTO response = emailService.sendEmail(emailRequest);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 发送简单邮件
     */
    @PostMapping("/email/send-simple")
    @Operation(summary = "发送简单邮件", description = "发送简单文本邮件")
    public ResponseEntity<NotificationResponseDTO> sendSimpleEmail(
            @RequestParam String to,
            @RequestParam String subject,
            @RequestParam String content) {
        
        log.info("收到简单邮件发送请求，收件人：{}", to);
        
        NotificationResponseDTO response = emailService.sendSimpleEmail(to, subject, content);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 发送HTML邮件
     */
    @PostMapping("/email/send-html")
    @Operation(summary = "发送HTML邮件", description = "发送HTML格式邮件")
    public ResponseEntity<NotificationResponseDTO> sendHtmlEmail(
            @RequestParam String to,
            @RequestParam String subject,
            @RequestParam String htmlContent) {
        
        log.info("收到HTML邮件发送请求，收件人：{}", to);
        
        NotificationResponseDTO response = emailService.sendHtmlEmail(to, subject, htmlContent);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 发送模板邮件
     */
    @PostMapping("/email/send-template")
    @Operation(summary = "发送模板邮件", description = "使用模板发送邮件")
    public ResponseEntity<NotificationResponseDTO> sendTemplateEmail(
            @RequestParam String to,
            @RequestParam String subject,
            @RequestParam String templateCode,
            @RequestBody Object templateParams) {
        
        log.info("收到模板邮件发送请求，收件人：{}，模板：{}", to, templateCode);
        
        NotificationResponseDTO response = emailService.sendTemplateEmail(to, subject, templateCode, templateParams);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 发送验证码
     */
    @PostMapping("/verification-code/send")
    @Operation(summary = "发送验证码", description = "发送短信或邮件验证码")
    public ResponseEntity<NotificationResponseDTO> sendVerificationCode(
            @Valid @RequestBody VerificationCodeRequestDTO request,
            HttpServletRequest httpRequest) {
        
        // 设置客户端信息
        if (request.getClientIp() == null) {
            request.setClientIp(getClientIp(httpRequest));
        }
        if (request.getUserAgent() == null) {
            request.setUserAgent(httpRequest.getHeader("User-Agent"));
        }
        
        log.info("收到验证码发送请求，接收者：{}，类型：{}", request.getReceiver(), request.getCodeType());
        
        NotificationResponseDTO response = verificationCodeService.sendVerificationCode(request);
        return ResponseEntity.ok(response);
    }
    
    /**
     * 验证验证码
     */
    @PostMapping("/verification-code/validate")
    @Operation(summary = "验证验证码", description = "验证短信或邮件验证码")
    public ResponseEntity<Map<String, Object>> validateVerificationCode(
            @Valid @RequestBody VerificationCodeValidateDTO validateDTO) {
        
        log.info("收到验证码验证请求，接收者：{}，类型：{}", validateDTO.getReceiver(), validateDTO.getCodeType());
        
        boolean isValid = verificationCodeService.validateVerificationCode(validateDTO);
        
        Map<String, Object> result = Map.of(
            "valid", isValid,
            "message", isValid ? "验证码验证成功" : "验证码验证失败"
        );
        
        return ResponseEntity.ok(result);
    }
    
    /**
     * 查询用户通知
     */
    @GetMapping("/user/{userId}")
    @Operation(summary = "查询用户通知", description = "分页查询用户的通知记录")
    public ResponseEntity<Page<NotificationResponseDTO>> getUserNotifications(
            @PathVariable Integer userId,
            Pageable pageable) {
        
        log.info("收到用户通知查询请求，用户ID：{}", userId);
        
        Page<NotificationResponseDTO> notifications = notificationService.getUserNotifications(userId, pageable);
        return ResponseEntity.ok(notifications);
    }
    
    /**
     * 查询通知详情
     */
    @GetMapping("/{notificationId}")
    @Operation(summary = "查询通知详情", description = "根据ID查询通知详情")
    public ResponseEntity<NotificationResponseDTO> getNotificationById(@PathVariable Long notificationId) {
        
        log.info("收到通知详情查询请求，通知ID：{}", notificationId);
        
        NotificationResponseDTO notification = notificationService.getNotificationById(notificationId);
        return ResponseEntity.ok(notification);
    }
    
    /**
     * 根据业务查询通知
     */
    @GetMapping("/business/{businessType}/{businessId}")
    @Operation(summary = "根据业务查询通知", description = "根据业务类型和业务ID查询通知")
    public ResponseEntity<List<NotificationResponseDTO>> getNotificationsByBusiness(
            @PathVariable String businessType,
            @PathVariable String businessId) {
        
        log.info("收到业务通知查询请求，业务类型：{}，业务ID：{}", businessType, businessId);
        
        List<NotificationResponseDTO> notifications = notificationService.getNotificationsByBusiness(businessType, businessId);
        return ResponseEntity.ok(notifications);
    }
    
    /**
     * 健康检查
     */
    @GetMapping("/health")
    @Operation(summary = "健康检查", description = "检查通知服务健康状态")
    public ResponseEntity<Map<String, Object>> health() {
        Map<String, Object> health = Map.of(
            "status", "UP",
            "service", "eleme-notification-service",
            "timestamp", System.currentTimeMillis()
        );
        return ResponseEntity.ok(health);
    }
    
    /**
     * 清理过期数据
     */
    @PostMapping("/cleanup")
    @Operation(summary = "清理过期数据", description = "清理过期的通知和验证码")
    public ResponseEntity<Map<String, String>> cleanup() {
        log.info("开始清理过期数据");
        
        try {
            notificationService.cleanupExpiredNotifications();
            verificationCodeService.cleanupExpiredCodes();
            
            return ResponseEntity.ok(Map.of("message", "清理过期数据成功"));
        } catch (Exception e) {
            log.error("清理过期数据失败", e);
            return ResponseEntity.ok(Map.of("message", "清理过期数据失败：" + e.getMessage()));
        }
    }
    
    /**
     * 获取客户端IP
     */
    private String getClientIp(HttpServletRequest request) {
        String ip = request.getHeader("X-Forwarded-For");
        if (ip == null || ip.isEmpty() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("X-Real-IP");
        }
        if (ip == null || ip.isEmpty() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("Proxy-Client-IP");
        }
        if (ip == null || ip.isEmpty() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("WL-Proxy-Client-IP");
        }
        if (ip == null || ip.isEmpty() || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getRemoteAddr();
        }
        
        // 处理多个IP的情况
        if (ip != null && ip.contains(",")) {
            ip = ip.split(",")[0].trim();
        }
        
        return ip;
    }
}

================
File: eleme-notification-service/src/main/java/org/example/dto/EmailAttachmentDTO.java
================
package org.example.dto;

import lombok.Data;

/**
 * 邮件附件DTO
 */
@Data
public class EmailAttachmentDTO {
    
    /**
     * 附件名称
     */
    private String name;
    
    /**
     * 附件类型
     */
    private String contentType;
    
    /**
     * 附件内容（Base64编码）
     */
    private String content;
    
    /**
     * 附件大小（字节）
     */
    private Long size;
}

================
File: eleme-notification-service/src/main/java/org/example/dto/EmailRequestDTO.java
================
package org.example.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;

import java.util.List;
import java.util.Map;

/**
 * 邮件发送请求DTO
 */
@Data
public class EmailRequestDTO {
    
    /**
     * 收件人邮箱
     */
    @NotBlank(message = "收件人邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    private String to;
    
    /**
     * 抄送邮箱列表
     */
    private List<String> cc;
    
    /**
     * 密送邮箱列表
     */
    private List<String> bcc;
    
    /**
     * 邮件主题
     */
    @NotBlank(message = "邮件主题不能为空")
    private String subject;
    
    /**
     * 邮件内容
     */
    private String content;
    
    /**
     * 是否HTML格式
     */
    private Boolean isHtml = false;
    
    /**
     * 模板代码
     */
    private String templateCode;
    
    /**
     * 模板参数
     */
    private Map<String, Object> templateParams;
    
    /**
     * 附件列表
     */
    private List<EmailAttachmentDTO> attachments;
    
    /**
     * 业务类型
     */
    private String businessType;
    
    /**
     * 业务ID
     */
    private String businessId;
    
    /**
     * 用户ID
     */
    private Integer userId;
}

================
File: eleme-notification-service/src/main/java/org/example/dto/NotificationResponseDTO.java
================
package org.example.dto;

import lombok.Data;

import java.time.LocalDateTime;

/**
 * 通知响应DTO
 */
@Data
public class NotificationResponseDTO {
    
    /**
     * 通知ID
     */
    private Long id;
    
    /**
     * 通知类型
     */
    private String type;
    
    /**
     * 接收者
     */
    private String receiver;
    
    /**
     * 标题
     */
    private String title;
    
    /**
     * 内容
     */
    private String content;
    
    /**
     * 发送状态
     */
    private String status;
    
    /**
     * 业务类型
     */
    private String businessType;
    
    /**
     * 业务ID
     */
    private String businessId;
    
    /**
     * 外部通知ID
     */
    private String externalId;
    
    /**
     * 创建时间
     */
    private LocalDateTime createTime;
    
    /**
     * 发送时间
     */
    private LocalDateTime sendTime;
    
    /**
     * 失败原因
     */
    private String failureReason;
}

================
File: eleme-notification-service/src/main/java/org/example/dto/SmsRequestDTO.java
================
package org.example.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.Data;

import java.util.Map;

/**
 * 短信发送请求DTO
 */
@Data
public class SmsRequestDTO {
    
    /**
     * 手机号
     */
    @NotBlank(message = "手机号不能为空")
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    private String phone;
    
    /**
     * 模板代码
     */
    @NotBlank(message = "模板代码不能为空")
    private String templateCode;
    
    /**
     * 模板参数
     */
    private Map<String, Object> templateParams;
    
    /**
     * 业务类型
     */
    private String businessType;
    
    /**
     * 业务ID
     */
    private String businessId;
}

================
File: eleme-notification-service/src/main/java/org/example/dto/VerificationCodeRequestDTO.java
================
package org.example.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import org.example.entity.NotificationType;

/**
 * 验证码发送请求DTO
 */
@Data
public class VerificationCodeRequestDTO {
    
    /**
     * 接收者（手机号或邮箱）
     */
    @NotBlank(message = "接收者不能为空")
    private String receiver;
    
    /**
     * 验证码类型
     */
    @NotBlank(message = "验证码类型不能为空")
    private String codeType;
    
    /**
     * 发送方式
     */
    private NotificationType sendType;
    
    /**
     * 客户端IP
     */
    private String clientIp;
    
    /**
     * 用户代理
     */
    private String userAgent;
}

================
File: eleme-notification-service/src/main/java/org/example/dto/VerificationCodeValidateDTO.java
================
package org.example.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

/**
 * 验证码验证请求DTO
 */
@Data
public class VerificationCodeValidateDTO {
    
    /**
     * 接收者（手机号或邮箱）
     */
    @NotBlank(message = "接收者不能为空")
    private String receiver;
    
    /**
     * 验证码类型
     */
    @NotBlank(message = "验证码类型不能为空")
    private String codeType;
    
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    private String code;
    
    /**
     * 验证成功后是否立即使用（标记为已使用）
     */
    private Boolean useImmediately = true;
}

================
File: eleme-notification-service/src/main/java/org/example/entity/Notification.java
================
package org.example.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;

/**
 * 通知记录实体类
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "notifications")
public class Notification {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    /**
     * 通知类型：EMAIL, SMS, SYSTEM
     */
    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private NotificationType type;
    
    /**
     * 接收者
     */
    @Column(nullable = false)
    private String receiver;
    
    /**
     * 发送者
     */
    private String sender;
    
    /**
     * 标题
     */
    private String title;
    
    /**
     * 内容
     */
    @Column(columnDefinition = "TEXT")
    private String content;
    
    /**
     * 模板代码
     */
    private String templateCode;
    
    /**
     * 模板参数（JSON格式）
     */
    @Column(columnDefinition = "TEXT")
    private String templateParams;
    
    /**
     * 发送状态：PENDING, SENT, FAILED
     */
    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private NotificationStatus status;
    
    /**
     * 业务类型：VERIFICATION, ORDER_STATUS, PAYMENT, PROMOTION等
     */
    private String businessType;
    
    /**
     * 业务ID
     */
    private String businessId;
    
    /**
     * 用户ID
     */
    private Integer userId;
    
    /**
     * 重试次数
     */
    @Column(nullable = false)
    private Integer retryCount = 0;
    
    /**
     * 最大重试次数
     */
    @Column(nullable = false)
    private Integer maxRetryCount = 3;
    
    /**
     * 失败原因
     */
    private String failureReason;
    
    /**
     * 外部通知ID（如短信服务商返回的ID）
     */
    private String externalId;
    
    /**
     * 创建时间
     */
    @Column(nullable = false)
    private LocalDateTime createTime;
    
    /**
     * 更新时间
     */
    private LocalDateTime updateTime;
    
    /**
     * 发送时间
     */
    private LocalDateTime sendTime;
    
    /**
     * 过期时间
     */
    private LocalDateTime expireTime;
    
    @PrePersist
    public void prePersist() {
        this.createTime = LocalDateTime.now();
        this.updateTime = LocalDateTime.now();
        if (this.status == null) {
            this.status = NotificationStatus.PENDING;
        }
    }
    
    @PreUpdate
    public void preUpdate() {
        this.updateTime = LocalDateTime.now();
    }
}

================
File: eleme-notification-service/src/main/java/org/example/entity/NotificationStatus.java
================
package org.example.entity;

/**
 * 通知状态枚举
 */
public enum NotificationStatus {
    /**
     * 待发送
     */
    PENDING,
    
    /**
     * 已发送
     */
    SENT,
    
    /**
     * 发送失败
     */
    FAILED,
    
    /**
     * 已过期
     */
    EXPIRED
}

================
File: eleme-notification-service/src/main/java/org/example/entity/NotificationType.java
================
package org.example.entity;

/**
 * 通知类型枚举
 */
public enum NotificationType {
    /**
     * 邮件通知
     */
    EMAIL,
    
    /**
     * 短信通知
     */
    SMS,
    
    /**
     * 系统通知
     */
    SYSTEM
}

================
File: eleme-notification-service/src/main/java/org/example/entity/VerificationCode.java
================
package org.example.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;

/**
 * 验证码实体类
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "verification_codes")
public class VerificationCode {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    /**
     * 验证码类型：REGISTER, LOGIN, RESET_PASSWORD, CHANGE_PHONE等
     */
    @Column(nullable = false)
    private String codeType;
    
    /**
     * 接收者（手机号或邮箱）
     */
    @Column(nullable = false)
    private String receiver;
    
    /**
     * 验证码
     */
    @Column(nullable = false)
    private String code;
    
    /**
     * 发送方式：SMS, EMAIL
     */
    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private NotificationType sendType;
    
    /**
     * 是否已使用
     */
    @Column(nullable = false)
    private Boolean used = false;
    
    /**
     * 验证尝试次数
     */
    @Column(nullable = false)
    private Integer attempts = 0;
    
    /**
     * 最大验证尝试次数
     */
    @Column(nullable = false)
    private Integer maxAttempts = 3;
    
    /**
     * 创建时间
     */
    @Column(nullable = false)
    private LocalDateTime createTime;
    
    /**
     * 过期时间
     */
    @Column(nullable = false)
    private LocalDateTime expireTime;
    
    /**
     * 使用时间
     */
    private LocalDateTime useTime;
    
    /**
     * 客户端IP
     */
    private String clientIp;
    
    /**
     * 用户代理
     */
    private String userAgent;
    
    @PrePersist
    public void prePersist() {
        this.createTime = LocalDateTime.now();
        // 默认5分钟过期
        this.expireTime = LocalDateTime.now().plusMinutes(5);
    }
    
    /**
     * 检查验证码是否有效
     */
    public boolean isValid() {
        return !used && LocalDateTime.now().isBefore(expireTime) && attempts < maxAttempts;
    }
    
    /**
     * 检查验证码是否过期
     */
    public boolean isExpired() {
        return LocalDateTime.now().isAfter(expireTime);
    }
}

================
File: eleme-notification-service/src/main/java/org/example/repository/NotificationRepository.java
================
package org.example.repository;

import org.example.entity.Notification;
import org.example.entity.NotificationStatus;
import org.example.entity.NotificationType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

/**
 * 通知记录Repository
 */
@Repository
public interface NotificationRepository extends JpaRepository<Notification, Long> {
    
    /**
     * 根据接收者查询通知
     */
    List<Notification> findByReceiver(String receiver);
    
    /**
     * 根据接收者和类型查询通知
     */
    List<Notification> findByReceiverAndType(String receiver, NotificationType type);
    
    /**
     * 根据状态查询通知
     */
    List<Notification> findByStatus(NotificationStatus status);
    
    /**
     * 根据业务类型和业务ID查询通知
     */
    List<Notification> findByBusinessTypeAndBusinessId(String businessType, String businessId);
    
    /**
     * 根据用户ID查询通知
     */
    Page<Notification> findByUserId(Integer userId, Pageable pageable);
    
    /**
     * 查询待发送的通知
     */
    @Query("SELECT n FROM Notification n WHERE n.status = :status AND n.retryCount < n.maxRetryCount")
    List<Notification> findPendingNotifications(@Param("status") NotificationStatus status);
    
    /**
     * 查询过期的通知
     */
    @Query("SELECT n FROM Notification n WHERE n.status = :status AND n.expireTime < :now")
    List<Notification> findExpiredNotifications(@Param("status") NotificationStatus status, 
                                               @Param("now") LocalDateTime now);
    
    /**
     * 根据接收者和时间范围查询通知数量
     */
    @Query("SELECT COUNT(n) FROM Notification n WHERE n.receiver = :receiver AND n.createTime BETWEEN :startTime AND :endTime")
    Long countByReceiverAndTimeRange(@Param("receiver") String receiver, 
                                   @Param("startTime") LocalDateTime startTime, 
                                   @Param("endTime") LocalDateTime endTime);
    
    /**
     * 根据IP和时间范围查询通知数量
     */
    @Query("SELECT COUNT(n) FROM Notification n WHERE n.receiver LIKE :ipPattern AND n.createTime BETWEEN :startTime AND :endTime")
    Long countByIpAndTimeRange(@Param("ipPattern") String ipPattern, 
                             @Param("startTime") LocalDateTime startTime, 
                             @Param("endTime") LocalDateTime endTime);
    
    /**
     * 删除过期的通知
     */
    void deleteByExpireTimeBefore(LocalDateTime expireTime);
}

================
File: eleme-notification-service/src/main/java/org/example/repository/VerificationCodeRepository.java
================
package org.example.repository;

import org.example.entity.VerificationCode;
import org.example.entity.NotificationType;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * 验证码Repository
 */
@Repository
public interface VerificationCodeRepository extends JpaRepository<VerificationCode, Long> {
    
    /**
     * 根据接收者、类型和发送方式查询最新的验证码
     */
    Optional<VerificationCode> findTopByReceiverAndCodeTypeAndSendTypeOrderByCreateTimeDesc(
            String receiver, String codeType, NotificationType sendType);
    
    /**
     * 根据接收者和类型查询所有验证码
     */
    List<VerificationCode> findByReceiverAndCodeType(String receiver, String codeType);
    
    /**
     * 根据接收者、类型和验证码查询
     */
    Optional<VerificationCode> findByReceiverAndCodeTypeAndCode(String receiver, String codeType, String code);
    
    /**
     * 查询某个接收者在指定时间范围内的验证码数量
     */
    @Query("SELECT COUNT(v) FROM VerificationCode v WHERE v.receiver = :receiver AND v.createTime BETWEEN :startTime AND :endTime")
    Long countByReceiverAndTimeRange(@Param("receiver") String receiver, 
                                   @Param("startTime") LocalDateTime startTime, 
                                   @Param("endTime") LocalDateTime endTime);
    
    /**
     * 查询某个IP在指定时间范围内的验证码数量
     */
    @Query("SELECT COUNT(v) FROM VerificationCode v WHERE v.clientIp = :clientIp AND v.createTime BETWEEN :startTime AND :endTime")
    Long countByClientIpAndTimeRange(@Param("clientIp") String clientIp, 
                                   @Param("startTime") LocalDateTime startTime, 
                                   @Param("endTime") LocalDateTime endTime);
    
    /**
     * 查询过期的验证码
     */
    List<VerificationCode> findByExpireTimeBefore(LocalDateTime expireTime);
    
    /**
     * 删除过期的验证码
     */
    void deleteByExpireTimeBefore(LocalDateTime expireTime);
    
    /**
     * 查询需要清理的验证码（创建时间超过指定天数）
     */
    @Query("SELECT v FROM VerificationCode v WHERE v.createTime < :cleanupTime")
    List<VerificationCode> findExpiredCodes(@Param("cleanupTime") LocalDateTime cleanupTime);
}

================
File: eleme-notification-service/src/main/java/org/example/service/impl/EmailServiceImpl.java
================
package org.example.service.impl;

import com.alibaba.csp.sentinel.annotation.SentinelResource;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.EmailRequestDTO;
import org.example.dto.NotificationResponseDTO;
import org.example.entity.Notification;
import org.example.entity.NotificationType;
import org.example.entity.NotificationStatus;
import org.example.repository.NotificationRepository;
import org.example.service.EmailService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import jakarta.mail.internet.MimeMessage;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;

/**
 * 邮件服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class EmailServiceImpl implements EmailService {
    
    private final JavaMailSender mailSender;
    private final NotificationRepository notificationRepository;
    private final StringRedisTemplate redisTemplate;
    private final TemplateEngine templateEngine;
    private final ObjectMapper objectMapper;
    
    @Value("${spring.mail.username}")
    private String from;
    
    @Value("${notification.email.personal:饿了么平台}")
    private String personal;
    
    @Override
    @Async
    @SentinelResource(value = "sendEmail", fallback = "sendEmailFallback")
    public NotificationResponseDTO sendEmail(EmailRequestDTO emailRequest) {
        log.info("开始发送邮件，收件人：{}", emailRequest.getTo());
        
        // 创建通知记录
        Notification notification = createNotificationRecord(emailRequest);
        
        try {
            // 发送邮件
            if (emailRequest.getIsHtml()) {
                sendHtmlEmailInternal(emailRequest);
            } else {
                sendSimpleEmailInternal(emailRequest);
            }
            
            // 更新发送状态
            notification.setStatus(NotificationStatus.SENT);
            notification.setSendTime(LocalDateTime.now());
            notificationRepository.save(notification);
            
            // 缓存发送结果
            cacheEmailResult(emailRequest.getTo(), "SUCCESS");
            
            log.info("邮件发送成功，收件人：{}", emailRequest.getTo());
            
        } catch (Exception e) {
            log.error("邮件发送失败，收件人：{}，错误：{}", emailRequest.getTo(), e.getMessage(), e);
            
            // 更新失败状态
            notification.setStatus(NotificationStatus.FAILED);
            notification.setFailureReason(e.getMessage());
            notification.setRetryCount(notification.getRetryCount() + 1);
            notificationRepository.save(notification);
            
            // 缓存失败结果
            cacheEmailResult(emailRequest.getTo(), "FAILED");
            
            throw new RuntimeException("邮件发送失败: " + e.getMessage(), e);
        }
        
        return convertToResponseDTO(notification);
    }
    
    @Override
    public NotificationResponseDTO sendSimpleEmail(String to, String subject, String content) {
        EmailRequestDTO emailRequest = new EmailRequestDTO();
        emailRequest.setTo(to);
        emailRequest.setSubject(subject);
        emailRequest.setContent(content);
        emailRequest.setIsHtml(false);
        
        return sendEmail(emailRequest);
    }
    
    @Override
    public NotificationResponseDTO sendHtmlEmail(String to, String subject, String htmlContent) {
        EmailRequestDTO emailRequest = new EmailRequestDTO();
        emailRequest.setTo(to);
        emailRequest.setSubject(subject);
        emailRequest.setContent(htmlContent);
        emailRequest.setIsHtml(true);
        
        return sendEmail(emailRequest);
    }
    
    @Override
    public NotificationResponseDTO sendTemplateEmail(String to, String subject, String templateCode, Object templateParams) {
        try {
            // 使用模板引擎渲染内容
            Context context = new Context();
            context.setVariable("data", templateParams);
            String content = templateEngine.process(templateCode, context);
            
            return sendHtmlEmail(to, subject, content);
        } catch (Exception e) {
            log.error("模板邮件发送失败，模板：{}，错误：{}", templateCode, e.getMessage(), e);
            throw new RuntimeException("模板邮件发送失败: " + e.getMessage(), e);
        }
    }
    
    /**
     * 发送简单文本邮件
     */
    private void sendSimpleEmailInternal(EmailRequestDTO emailRequest) throws Exception {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(from);
        message.setTo(emailRequest.getTo());
        message.setSubject(emailRequest.getSubject());
        message.setText(emailRequest.getContent());
        
        if (!CollectionUtils.isEmpty(emailRequest.getCc())) {
            message.setCc(emailRequest.getCc().toArray(new String[0]));
        }
        if (!CollectionUtils.isEmpty(emailRequest.getBcc())) {
            message.setBcc(emailRequest.getBcc().toArray(new String[0]));
        }
        
        mailSender.send(message);
    }
    
    /**
     * 发送HTML邮件
     */
    private void sendHtmlEmailInternal(EmailRequestDTO emailRequest) throws Exception {
        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
        
        helper.setFrom(from, personal);
        helper.setTo(emailRequest.getTo());
        helper.setSubject(emailRequest.getSubject());
        helper.setText(emailRequest.getContent(), true);
        
        if (!CollectionUtils.isEmpty(emailRequest.getCc())) {
            helper.setCc(emailRequest.getCc().toArray(new String[0]));
        }
        if (!CollectionUtils.isEmpty(emailRequest.getBcc())) {
            helper.setBcc(emailRequest.getBcc().toArray(new String[0]));
        }
        
        // 处理附件
        if (!CollectionUtils.isEmpty(emailRequest.getAttachments())) {
            emailRequest.getAttachments().forEach(attachment -> {
                try {
                    byte[] data = java.util.Base64.getDecoder().decode(attachment.getContent());
                    helper.addAttachment(attachment.getName(), () -> new java.io.ByteArrayInputStream(data));
                } catch (Exception e) {
                    log.error("添加附件失败：{}", attachment.getName(), e);
                }
            });
        }
        
        mailSender.send(message);
    }
    
    /**
     * 创建通知记录
     */
    private Notification createNotificationRecord(EmailRequestDTO emailRequest) {
        Notification notification = new Notification();
        notification.setType(NotificationType.EMAIL);
        notification.setReceiver(emailRequest.getTo());
        notification.setSender(from);
        notification.setTitle(emailRequest.getSubject());
        notification.setContent(emailRequest.getContent());
        notification.setStatus(NotificationStatus.PENDING);
        notification.setBusinessType(emailRequest.getBusinessType());
        notification.setBusinessId(emailRequest.getBusinessId());
        notification.setUserId(emailRequest.getUserId());
        
        if (StringUtils.hasText(emailRequest.getTemplateCode())) {
            notification.setTemplateCode(emailRequest.getTemplateCode());
            try {
                notification.setTemplateParams(objectMapper.writeValueAsString(emailRequest.getTemplateParams()));
            } catch (Exception e) {
                log.error("模板参数序列化失败", e);
            }
        }
        
        return notificationRepository.save(notification);
    }
    
    /**
     * 缓存邮件发送结果
     */
    private void cacheEmailResult(String to, String status) {
        try {
            String key = "email:result:" + to;
            redisTemplate.opsForValue().set(key, status, 5, TimeUnit.MINUTES);
        } catch (Exception e) {
            log.error("缓存邮件发送结果失败", e);
        }
    }
    
    /**
     * 转换为响应DTO
     */
    private NotificationResponseDTO convertToResponseDTO(Notification notification) {
        NotificationResponseDTO dto = new NotificationResponseDTO();
        dto.setId(notification.getId());
        dto.setType(notification.getType().name());
        dto.setReceiver(notification.getReceiver());
        dto.setTitle(notification.getTitle());
        dto.setContent(notification.getContent());
        dto.setStatus(notification.getStatus().name());
        dto.setBusinessType(notification.getBusinessType());
        dto.setBusinessId(notification.getBusinessId());
        dto.setCreateTime(notification.getCreateTime());
        dto.setSendTime(notification.getSendTime());
        dto.setFailureReason(notification.getFailureReason());
        return dto;
    }
    
    /**
     * 邮件发送失败回调
     */
    public NotificationResponseDTO sendEmailFallback(EmailRequestDTO emailRequest, Throwable ex) {
        log.error("邮件发送降级处理，收件人：{}，错误：{}", emailRequest.getTo(), ex.getMessage());
        
        NotificationResponseDTO response = new NotificationResponseDTO();
        response.setType(NotificationType.EMAIL.name());
        response.setReceiver(emailRequest.getTo());
        response.setStatus(NotificationStatus.FAILED.name());
        response.setFailureReason("服务降级：" + ex.getMessage());
        response.setCreateTime(LocalDateTime.now());
        
        return response;
    }
}

================
File: eleme-notification-service/src/main/java/org/example/service/impl/NotificationServiceImpl.java
================
package org.example.service.impl;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.NotificationResponseDTO;
import org.example.entity.Notification;
import org.example.entity.NotificationType;
import org.example.entity.NotificationStatus;
import org.example.repository.NotificationRepository;
import org.example.service.NotificationService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 通知服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class NotificationServiceImpl implements NotificationService {
    
    private final NotificationRepository notificationRepository;
    
    @Override
    public Notification createNotification(NotificationType type, String receiver, String title, 
                                         String content, String businessType, String businessId, 
                                         Integer userId) {
        Notification notification = new Notification();
        notification.setType(type);
        notification.setReceiver(receiver);
        notification.setTitle(title);
        notification.setContent(content);
        notification.setBusinessType(businessType);
        notification.setBusinessId(businessId);
        notification.setUserId(userId);
        notification.setStatus(NotificationStatus.PENDING);
        notification.setCreateTime(LocalDateTime.now());
        
        return notificationRepository.save(notification);
    }
    
    @Override
    public void updateNotificationStatus(Long notificationId, String status, String failureReason) {
        notificationRepository.findById(notificationId).ifPresent(notification -> {
            notification.setStatus(NotificationStatus.valueOf(status));
            notification.setFailureReason(failureReason);
            notification.setUpdateTime(LocalDateTime.now());
            notificationRepository.save(notification);
        });
    }
    
    @Override
    public Page<NotificationResponseDTO> getUserNotifications(Integer userId, Pageable pageable) {
        Page<Notification> notifications = notificationRepository.findByUserId(userId, pageable);
        return notifications.map(this::convertToResponseDTO);
    }
    
    @Override
    public NotificationResponseDTO getNotificationById(Long notificationId) {
        return notificationRepository.findById(notificationId)
                .map(this::convertToResponseDTO)
                .orElse(null);
    }
    
    @Override
    public void processPendingNotifications() {
        List<Notification> pendingNotifications = notificationRepository.findPendingNotifications(NotificationStatus.PENDING);
        log.info("处理待发送通知，数量：{}", pendingNotifications.size());
        
        for (Notification notification : pendingNotifications) {
            try {
                // 这里可以添加具体的处理逻辑
                log.info("处理通知：{}", notification.getId());
            } catch (Exception e) {
                log.error("处理通知失败：{}", notification.getId(), e);
            }
        }
    }
    
    @Override
    public void processFailedNotifications() {
        List<Notification> failedNotifications = notificationRepository.findPendingNotifications(NotificationStatus.FAILED);
        log.info("处理失败重试通知，数量：{}", failedNotifications.size());
        
        for (Notification notification : failedNotifications) {
            if (notification.getRetryCount() < notification.getMaxRetryCount()) {
                try {
                    // 重试逻辑
                    notification.setRetryCount(notification.getRetryCount() + 1);
                    notificationRepository.save(notification);
                    log.info("重试通知：{}", notification.getId());
                } catch (Exception e) {
                    log.error("重试通知失败：{}", notification.getId(), e);
                }
            }
        }
    }
    
    @Override
    public void cleanupExpiredNotifications() {
        List<Notification> expiredNotifications = notificationRepository.findExpiredNotifications(
                NotificationStatus.PENDING, LocalDateTime.now());
        log.info("清理过期通知，数量：{}", expiredNotifications.size());
        
        for (Notification notification : expiredNotifications) {
            notification.setStatus(NotificationStatus.FAILED);
            notification.setFailureReason("已过期");
            notificationRepository.save(notification);
        }
    }
    
    @Override
    public List<NotificationResponseDTO> getNotificationsByBusiness(String businessType, String businessId) {
        List<Notification> notifications = notificationRepository.findByBusinessTypeAndBusinessId(businessType, businessId);
        return notifications.stream()
                .map(this::convertToResponseDTO)
                .collect(Collectors.toList());
    }
    
    private NotificationResponseDTO convertToResponseDTO(Notification notification) {
        NotificationResponseDTO dto = new NotificationResponseDTO();
        dto.setId(notification.getId());
        dto.setType(notification.getType().name());
        dto.setReceiver(notification.getReceiver());
        dto.setTitle(notification.getTitle());
        dto.setContent(notification.getContent());
        dto.setStatus(notification.getStatus().name());
        dto.setBusinessType(notification.getBusinessType());
        dto.setBusinessId(notification.getBusinessId());
        dto.setCreateTime(notification.getCreateTime());
        dto.setSendTime(notification.getSendTime());
        return dto;
    }
}

================
File: eleme-notification-service/src/main/java/org/example/service/impl/VerificationCodeServiceImpl.java
================
package org.example.service.impl;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.NotificationResponseDTO;
import org.example.dto.VerificationCodeRequestDTO;
import org.example.dto.VerificationCodeValidateDTO;
import org.example.service.VerificationCodeService;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;

/**
 * 验证码服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class VerificationCodeServiceImpl implements VerificationCodeService {
    
    private final StringRedisTemplate redisTemplate;
    
    private static final String CODE_PREFIX = "verification_code:";
    private static final String RATE_LIMIT_PREFIX = "rate_limit:";
    private static final int DEFAULT_CODE_LENGTH = 6;
    private static final int DEFAULT_EXPIRE_MINUTES = 5;
    private static final int DEFAULT_RATE_LIMIT_SECONDS = 60;
    
    @Override
    public NotificationResponseDTO sendVerificationCode(VerificationCodeRequestDTO request) {
        log.info("发送验证码请求，接收者：{}，类型：{}", request.getReceiver(), request.getCodeType());
        
        // 检查频率限制
        if (!checkRateLimit(request.getReceiver(), request.getClientIp())) {
            NotificationResponseDTO response = new NotificationResponseDTO();
            response.setType("VERIFICATION");
            response.setReceiver(request.getReceiver());
            response.setStatus("FAILED");
            response.setFailureReason("发送过于频繁，请稍后再试");
            response.setCreateTime(LocalDateTime.now());
            return response;
        }
        
        // 生成验证码
        String code = generateCode(DEFAULT_CODE_LENGTH);
        String key = CODE_PREFIX + request.getReceiver();
        
        // 存储到Redis
        redisTemplate.opsForValue().set(key, code, DEFAULT_EXPIRE_MINUTES, TimeUnit.MINUTES);
        
        // 设置频率限制
        String rateLimitKey = RATE_LIMIT_PREFIX + request.getReceiver();
        redisTemplate.opsForValue().set(rateLimitKey, "1", DEFAULT_RATE_LIMIT_SECONDS, TimeUnit.SECONDS);
        
        // 构造响应
        NotificationResponseDTO response = new NotificationResponseDTO();
        response.setType("VERIFICATION");
        response.setReceiver(request.getReceiver());
        response.setTitle("验证码");
        response.setContent("您的验证码是：" + code + "，" + DEFAULT_EXPIRE_MINUTES + "分钟内有效。");
        response.setStatus("SENT");
        response.setBusinessType("VERIFICATION");
        response.setCreateTime(LocalDateTime.now());
        
        log.info("验证码发送成功，接收者：{}，验证码：{}", request.getReceiver(), code);
        return response;
    }
    
    @Override
    public boolean validateVerificationCode(VerificationCodeValidateDTO validateDTO) {
        log.info("验证验证码，接收者：{}，代码：{}", validateDTO.getReceiver(), validateDTO.getCode());
        
        String key = CODE_PREFIX + validateDTO.getReceiver();
        String storedCode = redisTemplate.opsForValue().get(key);
        
        if (!StringUtils.hasText(storedCode)) {
            log.warn("验证码不存在或已过期，接收者：{}", validateDTO.getReceiver());
            return false;
        }
        
        boolean isValid = storedCode.equals(validateDTO.getCode());
        
        if (isValid) {
            // 验证成功后删除验证码
            redisTemplate.delete(key);
            log.info("验证码验证成功，接收者：{}", validateDTO.getReceiver());
        } else {
            log.warn("验证码验证失败，接收者：{}，输入：{}，期望：{}", 
                    validateDTO.getReceiver(), validateDTO.getCode(), storedCode);
        }
        
        return isValid;
    }
    
    @Override
    public boolean checkRateLimit(String receiver, String clientIp) {
        String rateLimitKey = RATE_LIMIT_PREFIX + receiver;
        String exists = redisTemplate.opsForValue().get(rateLimitKey);
        return !StringUtils.hasText(exists);
    }
    
    @Override
    public String generateCode(int length) {
        String chars = "0123456789";
        StringBuilder code = new StringBuilder();
        SecureRandom random = new SecureRandom();
        
        for (int i = 0; i < length; i++) {
            code.append(chars.charAt(random.nextInt(chars.length())));
        }
        
        return code.toString();
    }
    
    @Override
    public void cleanupExpiredCodes() {
        // Redis的过期策略会自动清理过期的验证码
        log.info("验证码清理任务执行完成");
    }
}

================
File: eleme-notification-service/src/main/java/org/example/service/EmailService.java
================
package org.example.service;

import org.example.dto.EmailRequestDTO;
import org.example.dto.NotificationResponseDTO;

/**
 * 邮件服务接口
 */
public interface EmailService {
    
    /**
     * 发送邮件
     */
    NotificationResponseDTO sendEmail(EmailRequestDTO emailRequest);
    
    /**
     * 发送简单文本邮件
     */
    NotificationResponseDTO sendSimpleEmail(String to, String subject, String content);
    
    /**
     * 发送HTML邮件
     */
    NotificationResponseDTO sendHtmlEmail(String to, String subject, String htmlContent);
    
    /**
     * 发送模板邮件
     */
    NotificationResponseDTO sendTemplateEmail(String to, String subject, String templateCode, Object templateParams);
}

================
File: eleme-notification-service/src/main/java/org/example/service/NotificationService.java
================
package org.example.service;

import org.example.dto.NotificationResponseDTO;
import org.example.entity.Notification;
import org.example.entity.NotificationType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.List;

/**
 * 通知服务接口
 */
public interface NotificationService {
    
    /**
     * 创建通知记录
     */
    Notification createNotification(NotificationType type, String receiver, String title, String content, 
                                  String businessType, String businessId, Integer userId);
    
    /**
     * 更新通知状态
     */
    void updateNotificationStatus(Long notificationId, String status, String failureReason);
    
    /**
     * 查询用户通知
     */
    Page<NotificationResponseDTO> getUserNotifications(Integer userId, Pageable pageable);
    
    /**
     * 查询通知详情
     */
    NotificationResponseDTO getNotificationById(Long notificationId);
    
    /**
     * 处理待发送通知
     */
    void processPendingNotifications();
    
    /**
     * 处理失败重试通知
     */
    void processFailedNotifications();
    
    /**
     * 清理过期通知
     */
    void cleanupExpiredNotifications();
    
    /**
     * 根据业务类型和ID查询通知
     */
    List<NotificationResponseDTO> getNotificationsByBusiness(String businessType, String businessId);
}

================
File: eleme-notification-service/src/main/java/org/example/service/SmsService.java
================
package org.example.service;

import org.example.dto.SmsRequestDTO;
import org.example.dto.NotificationResponseDTO;

/**
 * 短信服务接口
 */
public interface SmsService {
    
    /**
     * 发送短信
     */
    NotificationResponseDTO sendSms(SmsRequestDTO smsRequest);
    
    /**
     * 发送简单短信
     */
    NotificationResponseDTO sendSimpleSms(String phone, String content);
    
    /**
     * 发送模板短信
     */
    NotificationResponseDTO sendTemplateSms(String phone, String templateCode, Object templateParams);
}

================
File: eleme-notification-service/src/main/java/org/example/service/VerificationCodeService.java
================
package org.example.service;

import org.example.dto.VerificationCodeRequestDTO;
import org.example.dto.VerificationCodeValidateDTO;
import org.example.dto.NotificationResponseDTO;

/**
 * 验证码服务接口
 */
public interface VerificationCodeService {
    
    /**
     * 发送验证码
     */
    NotificationResponseDTO sendVerificationCode(VerificationCodeRequestDTO request);
    
    /**
     * 验证验证码
     */
    boolean validateVerificationCode(VerificationCodeValidateDTO validateDTO);
    
    /**
     * 检查验证码发送频率限制
     */
    boolean checkRateLimit(String receiver, String clientIp);
    
    /**
     * 生成验证码
     */
    String generateCode(int length);
    
    /**
     * 清理过期验证码
     */
    void cleanupExpiredCodes();
}

================
File: eleme-notification-service/src/main/java/org/example/NotificationServiceApplication.java
================
package org.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.scheduling.annotation.EnableAsync;

/**
 * 通知服务启动类
 */
@SpringBootApplication
@EnableDiscoveryClient
@EnableAsync
public class NotificationServiceApplication {
    
    public static void main(String[] args) {
        SpringApplication.run(NotificationServiceApplication.class, args);
    }
}

================
File: eleme-notification-service/src/main/resources/application.yml
================
server:
  port: 8006

spring:
  application:
    name: eleme-notification-service
  
  config:
    import: "optional:nacos:eleme-notification-service.yml"
  
  profiles:
    active: dev
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: public
        group: DEFAULT_GROUP
      config:
        server-addr: localhost:8848
        namespace: public
        group: DEFAULT_GROUP
        file-extension: yml
        shared-configs:
          - data-id: eleme-common.yml
            refresh: true
    sentinel:
      transport:
        dashboard: localhost:8080
        port: 8726
      eager: true
      log:
        dir: logs/sentinel
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/eleme_notification?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: eleme_user
    password: eleme_password
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  redis:
    host: localhost
    port: 6379
    password: 
    database: 5
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
    timeout: 5000ms
  mail:
    host: smtp.qq.com
    port: 587
    username: test@qq.com
    password: test-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
    default-encoding: utf-8
    
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    mail:
      enabled: false

================
File: eleme-notification-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-notification-service</artifactId>
    <name>eleme-notification-service</name>
    <description>通知服务 - 处理邮件发送、短信验证码等功能</description>

    <dependencies>
        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- Spring Cloud -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        
        <!-- Spring Boot Mail -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        
        <!-- Spring Boot Data Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        
        <!-- Spring Boot Data JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        
        <!-- MySQL Driver -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        
        <!-- Spring Boot Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        
        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        
        <!-- JSON处理 -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        
        <!-- HTTP客户端 -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        
        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        
        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- Swagger/OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.2.0</version>
        </dependency>
        
        <!-- Sentinel -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>
        
        <!-- LoadBalancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>
        
        <!-- 模板引擎 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        
        <!-- 公共模块 -->
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>eleme-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

================
File: eleme-order-service/src/main/java/org/example/config/FeignConfig.java
================
package org.example.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import feign.codec.Decoder;
import feign.codec.Encoder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
import org.springframework.cloud.openfeign.support.SpringDecoder;
import org.springframework.cloud.openfeign.support.SpringEncoder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;

/**
 * Feign配置类
 * 配置Feign客户端使用统一的日期时间格式
 */
@Configuration
public class FeignConfig {

    @Autowired
    private ObjectMapper objectMapper;

    @Bean
    public Encoder feignEncoder() {
        HttpMessageConverter jacksonConverter = new MappingJackson2HttpMessageConverter(objectMapper);
        return new SpringEncoder(() -> new HttpMessageConverters(jacksonConverter));
    }

    @Bean
    public Decoder feignDecoder() {
        HttpMessageConverter jacksonConverter = new MappingJackson2HttpMessageConverter(objectMapper);
        return new SpringDecoder(() -> new HttpMessageConverters(jacksonConverter));
    }
}

================
File: eleme-order-service/src/main/java/org/example/config/GlobalExceptionHandler.java
================
package org.example.config;

import lombok.extern.slf4j.Slf4j;
import org.example.dto.R;
import org.springframework.http.HttpStatus;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    /**
     * 处理参数校验异常
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public R<String> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {
        log.error("参数校验失败", e);
        List<String> errors = new ArrayList<>();
        for (FieldError error : e.getBindingResult().getFieldErrors()) {
            errors.add(error.getField() + ": " + error.getDefaultMessage());
        }
        return R.error("参数校验失败: " + String.join(", ", errors));
    }

    /**
     * 处理Bean校验异常
     */
    @ExceptionHandler(BindException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public R<String> handleBindException(BindException e) {
        log.error("参数绑定失败", e);
        List<String> errors = new ArrayList<>();
        for (FieldError error : e.getBindingResult().getFieldErrors()) {
            errors.add(error.getField() + ": " + error.getDefaultMessage());
        }
        return R.error("参数绑定失败: " + String.join(", ", errors));
    }

    /**
     * 处理约束校验异常
     */
    @ExceptionHandler(ConstraintViolationException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public R<String> handleConstraintViolationException(ConstraintViolationException e) {
        log.error("约束校验失败", e);
        Set<ConstraintViolation<?>> violations = e.getConstraintViolations();
        List<String> errors = new ArrayList<>();
        for (ConstraintViolation<?> violation : violations) {
            errors.add(violation.getPropertyPath() + ": " + violation.getMessage());
        }
        return R.error("约束校验失败: " + String.join(", ", errors));
    }

    /**
     * 处理非法参数异常
     */
    @ExceptionHandler(IllegalArgumentException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public R<String> handleIllegalArgumentException(IllegalArgumentException e) {
        log.error("非法参数", e);
        return R.error("非法参数: " + e.getMessage());
    }

    /**
     * 处理空指针异常
     */
    @ExceptionHandler(NullPointerException.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public R<String> handleNullPointerException(NullPointerException e) {
        log.error("空指针异常", e);
        return R.error("系统内部错误");
    }

    /**
     * 处理运行时异常
     */
    @ExceptionHandler(RuntimeException.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public R<String> handleRuntimeException(RuntimeException e) {
        log.error("运行时异常", e);
        return R.error("系统运行异常: " + e.getMessage());
    }

    /**
     * 处理其他异常
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public R<String> handleException(Exception e) {
        log.error("系统异常", e);
        return R.error("系统异常: " + e.getMessage());
    }
}

================
File: eleme-order-service/src/main/java/org/example/config/JacksonConfig.java
================
package org.example.config;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Jackson配置类
 * 统一配置日期时间的序列化和反序列化格式
 */
@Configuration
public class JacksonConfig {

    private static final String DATE_TIME_PATTERN = "yyyy-MM-dd HH:mm:ss";
    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(DATE_TIME_PATTERN);

    @Bean
    @Primary
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        
        // 注册Java时间模块
        JavaTimeModule javaTimeModule = new JavaTimeModule();
        
        // 配置LocalDateTime的序列化和反序列化
        javaTimeModule.addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(DATE_TIME_FORMATTER));
        javaTimeModule.addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(DATE_TIME_FORMATTER));
        
        mapper.registerModule(javaTimeModule);
        
        // 禁用将日期写为时间戳的功能
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        
        // 忽略未知字段，避免反序列化时出错
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        
        return mapper;
    }
}

================
File: eleme-order-service/src/main/java/org/example/controller/OrderController.java
================
package org.example.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.OrderDetailDTO;
import org.example.dto.OrderRequestDTO;
import org.example.dto.R;
import org.example.entity.UserOrder;
import org.example.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/order")
@Tag(name = "订单服务", description = "订单管理相关接口")
@Slf4j
@Validated
public class OrderController {

    @Autowired
    private OrderService orderService;

    @Autowired
    private org.example.feign.BusinessClient businessClient;

    @GetMapping("/{id}")
    @Operation(summary = "根据ID查询订单", description = "根据订单ID查询订单详细信息")
    public R<UserOrder> getById(
            @Parameter(description = "订单ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("查询订单信息: {}", id);
        UserOrder order = orderService.getById(id);
        if (order != null) {
            return R.success(order);
        } else {
            return R.error("订单不存在");
        }
    }

    @PostMapping
    @Operation(summary = "创建订单", description = "创建新的订单")
    public R<Integer> createOrder(
            @Parameter(description = "订单请求信息", required = true) 
            @RequestBody @Valid OrderRequestDTO orderRequestDTO) {
        
        log.info("创建订单: {}", orderRequestDTO);
        Integer orderId = orderService.createOrder(orderRequestDTO);
        if (orderId != null) {
            return R.success("订单创建成功", orderId);
        } else {
            return R.error("订单创建失败");
        }
    }

    @PutMapping("/{id}/pay")
    @Operation(summary = "订单支付", description = "处理订单支付")
    public R<String> payOrder(
            @Parameter(description = "订单ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("订单支付: {}", id);
        Boolean success = orderService.payOrder(id);
        if (success) {
            return R.success("订单支付成功");
        } else {
            return R.error("订单支付失败");
        }
    }

    @GetMapping("/user/{userPhone}")
    @Operation(summary = "查询用户订单", description = "根据用户手机号查询订单列表")
    public R<List<UserOrder>> getOrdersByUserPhone(
            @Parameter(description = "用户手机号", required = true) 
            @PathVariable @NotBlank String userPhone) {
        
        log.info("查询用户订单: {}", userPhone);
        List<UserOrder> orders = orderService.getOrdersByUserPhone(userPhone);
        return R.success(orders);
    }

    @GetMapping("/business/{businessId}")
    @Operation(summary = "查询商家订单", description = "根据商家ID查询订单列表")
    public R<List<UserOrder>> getOrdersByBusinessId(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId) {
        
        log.info("查询商家订单: {}", businessId);
        List<UserOrder> orders = orderService.getOrdersByBusinessId(businessId);
        return R.success(orders);
    }

    @GetMapping("/state/{state}")
    @Operation(summary = "按状态查询订单", description = "根据订单状态查询订单列表")
    public R<List<UserOrder>> getOrdersByState(
            @Parameter(description = "订单状态", required = true) 
            @PathVariable @NotNull Integer state) {
        
        log.info("按状态查询订单: {}", state);
        List<UserOrder> orders = orderService.getOrdersByState(state);
        return R.success(orders);
    }

    @GetMapping("/user/{userPhone}/state/{state}")
    @Operation(summary = "查询用户特定状态订单", description = "根据用户手机号和状态查询订单列表")
    public R<List<UserOrder>> getOrdersByUserPhoneAndState(
            @Parameter(description = "用户手机号", required = true) 
            @PathVariable @NotBlank String userPhone,
            @Parameter(description = "订单状态", required = true) 
            @PathVariable @NotNull Integer state) {
        
        log.info("查询用户特定状态订单: {}-{}", userPhone, state);
        List<UserOrder> orders = orderService.getOrdersByUserPhoneAndState(userPhone, state);
        return R.success(orders);
    }

    @GetMapping("/business/{businessId}/state/{state}")
    @Operation(summary = "查询商家特定状态订单", description = "根据商家ID和状态查询订单列表")
    public R<List<UserOrder>> getOrdersByBusinessIdAndState(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId,
            @Parameter(description = "订单状态", required = true) 
            @PathVariable @NotNull Integer state) {
        
        log.info("查询商家特定状态订单: {}-{}", businessId, state);
        List<UserOrder> orders = orderService.getOrdersByBusinessIdAndState(businessId, state);
        return R.success(orders);
    }

    @GetMapping("/{id}/detail")
    @Operation(summary = "查询订单详情", description = "根据订单ID查询详细信息，包括商家和商品信息")
    public R<OrderDetailDTO> getOrderDetail(
            @Parameter(description = "订单ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("查询订单详情: {}", id);
        OrderDetailDTO orderDetail = orderService.getOrderDetail(id);
        if (orderDetail != null) {
            return R.success(orderDetail);
        } else {
            return R.error("订单详情不存在");
        }
    }

    @PutMapping("/{id}/state/{state}")
    @Operation(summary = "更新订单状态", description = "更新指定订单的状态")
    public R<String> updateOrderState(
            @Parameter(description = "订单ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id,
            @Parameter(description = "新状态", required = true) 
            @PathVariable @NotNull Integer state) {
        
        log.info("更新订单状态: {}-{}", id, state);
        Boolean success = orderService.updateOrderState(id, state);
        if (success) {
            return R.success("订单状态更新成功");
        } else {
            return R.error("订单状态更新失败");
        }
    }

    @PutMapping("/{id}/cancel")
    @Operation(summary = "取消订单", description = "取消指定订单")
    public R<String> cancelOrder(
            @Parameter(description = "订单ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("取消订单: {}", id);
        Boolean success = orderService.cancelOrder(id);
        if (success) {
            return R.success("订单取消成功");
        } else {
            return R.error("订单取消失败");
        }
    }

    @PutMapping("/{id}/confirm")
    @Operation(summary = "确认订单", description = "确认指定订单")
    public R<String> confirmOrder(
            @Parameter(description = "订单ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("确认订单: {}", id);
        Boolean success = orderService.confirmOrder(id);
        if (success) {
            return R.success("订单确认成功");
        } else {
            return R.error("订单确认失败");
        }
    }

    @PutMapping("/{id}/complete")
    @Operation(summary = "完成订单", description = "完成指定订单")
    public R<String> completeOrder(
            @Parameter(description = "订单ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("完成订单: {}", id);
        Boolean success = orderService.completeOrder(id);
        if (success) {
            return R.success("订单完成成功");
        } else {
            return R.error("订单完成失败");
        }
    }

    @GetMapping("/user/{userPhone}/count")
    @Operation(summary = "统计用户订单数量", description = "统计指定用户的订单总数")
    public R<Integer> countOrdersByUserPhone(
            @Parameter(description = "用户手机号", required = true) 
            @PathVariable @NotBlank String userPhone) {
        
        log.info("统计用户订单数量: {}", userPhone);
        Integer count = orderService.countOrdersByUserPhone(userPhone);
        return R.success(count);
    }

    @GetMapping("/business/{businessId}/count")
    @Operation(summary = "统计商家订单数量", description = "统计指定商家的订单总数")
    public R<Integer> countOrdersByBusinessId(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId) {
        
        log.info("统计商家订单数量: {}", businessId);
        Integer count = orderService.countOrdersByBusinessId(businessId);
        return R.success(count);
    }

    @GetMapping("/state/{state}/count")
    @Operation(summary = "统计特定状态订单数量", description = "统计指定状态的订单总数")
    public R<Integer> countOrdersByState(
            @Parameter(description = "订单状态", required = true) 
            @PathVariable @NotNull Integer state) {
        
        log.info("统计特定状态订单数量: {}", state);
        Integer count = orderService.countOrdersByState(state);
        return R.success(count);
    }

    @GetMapping("/user/{userPhone}/time-range")
    @Operation(summary = "按时间范围查询用户订单", description = "根据用户手机号和时间范围查询订单")
    public R<List<UserOrder>> getOrdersByUserPhoneAndTimeRange(
            @Parameter(description = "用户手机号", required = true) 
            @PathVariable @NotBlank String userPhone,
            @Parameter(description = "开始时间", required = true) 
            @RequestParam @NotBlank String startTime,
            @Parameter(description = "结束时间", required = true) 
            @RequestParam @NotBlank String endTime) {
        
        log.info("按时间范围查询用户订单: {}-{}-{}", userPhone, startTime, endTime);
        List<UserOrder> orders = orderService.getOrdersByUserPhoneAndTimeRange(userPhone, startTime, endTime);
        return R.success(orders);
    }

    @GetMapping("/business/{businessId}/time-range")
    @Operation(summary = "按时间范围查询商家订单", description = "根据商家ID和时间范围查询订单")
    public R<List<UserOrder>> getOrdersByBusinessIdAndTimeRange(
            @Parameter(description = "商家ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer businessId,
            @Parameter(description = "开始时间", required = true) 
            @RequestParam @NotBlank String startTime,
            @Parameter(description = "结束时间", required = true) 
            @RequestParam @NotBlank String endTime) {
        
        log.info("按时间范围查询商家订单: {}-{}-{}", businessId, startTime, endTime);
        List<UserOrder> orders = orderService.getOrdersByBusinessIdAndTimeRange(businessId, startTime, endTime);
        return R.success(orders);
    }

    @GetMapping("/price-range")
    @Operation(summary = "按价格范围查询订单", description = "根据价格范围查询订单")
    public R<List<UserOrder>> getOrdersByPriceRange(
            @Parameter(description = "最低价格", required = true) 
            @RequestParam @NotNull @Min(0) Double minPrice,
            @Parameter(description = "最高价格", required = true) 
            @RequestParam @NotNull @Min(0) Double maxPrice) {
        
        log.info("按价格范围查询订单: {}-{}", minPrice, maxPrice);
        if (minPrice > maxPrice) {
            return R.error("最低价格不能大于最高价格");
        }
        List<UserOrder> orders = orderService.getOrdersByPriceRange(minPrice, maxPrice);
        return R.success(orders);
    }

    @GetMapping("/recent")
    @Operation(summary = "查询最近订单", description = "查询最近的订单，按时间倒序")
    public R<List<UserOrder>> getRecentOrders(
            @Parameter(description = "限制数量", required = false) 
            @RequestParam(defaultValue = "10") @Min(1) Integer limit) {
        
        log.info("查询最近订单: {}", limit);
        List<UserOrder> orders = orderService.getRecentOrders(limit);
        return R.success(orders);
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "删除订单", description = "删除指定订单（仅允许删除已取消的订单）")
    public R<String> deleteOrder(
            @Parameter(description = "订单ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("删除订单: {}", id);
        Boolean success = orderService.deleteOrder(id);
        if (success) {
            return R.success("订单删除成功");
        } else {
            return R.error("订单删除失败");
        }
    }

    @GetMapping("/{id}/time")
    @Operation(summary = "查询订单时间", description = "查询指定订单的创建时间")
    public R<LocalDateTime> getOrderTime(
            @Parameter(description = "订单ID", required = true) 
            @PathVariable @NotNull @Min(1) Integer id) {
        
        log.info("查询订单时间: {}", id);
        UserOrder order = orderService.getById(id);
        if (order != null) {
            return R.success(order.getCreatedAt());
        } else {
            return R.error("订单不存在");
        }
    }

    // 兼容原有接口格式
    @PostMapping("/getUserOrderById")
    @Operation(summary = "根据ID查询订单(兼容接口)", description = "根据订单ID查询订单信息(兼容原有接口)")
    public R<UserOrder> getUserOrderById(@RequestBody Map<String, Integer> requestBody) {
        Integer id = requestBody.get("ID");
        if (id == null) {
            return R.error("订单ID不能为空");
        }
        
        log.info("查询订单信息(兼容接口): {}", id);
        UserOrder order = orderService.getById(id);
        if (order != null) {
            return R.success(order);
        } else {
            return R.error("订单不存在");
        }
    }

    @PostMapping("/addUserOrder")
    @Operation(summary = "创建订单(兼容接口)", description = "创建新的订单(兼容原有接口)")
    public R<Integer> addUserOrder(@RequestBody OrderRequestDTO orderRequestDTO) {
        log.info("创建订单(兼容接口): {}", orderRequestDTO);
        Integer orderId = orderService.createOrder(orderRequestDTO);
        if (orderId != null) {
            return R.success("订单创建成功", orderId);
        } else {
            return R.error("订单创建失败");
        }
    }

    @PostMapping("/havePayed")
    @Operation(summary = "订单支付(兼容接口)", description = "处理订单支付(兼容原有接口)")
    public R<Boolean> havePayed(@RequestBody Map<String, Integer> requestBody) {
        Integer id = requestBody.get("ID");
        if (id == null) {
            return R.error("订单ID不能为空");
        }
        
        log.info("订单支付(兼容接口): {}", id);
        Boolean success = orderService.payOrder(id);
        return R.success(success);
    }

    @GetMapping("/test-business/{id}")
    @Operation(summary = "测试商家服务调用", description = "测试Feign调用商家服务是否正常")
    public R<Object> testBusinessService(@PathVariable Integer id) {
        log.info("测试商家服务调用: {}", id);
        try {
            log.info("开始调用BusinessClient.getBusinessById({})", id);
            R<org.example.entity.Business> result = businessClient.getBusinessById(id);
            log.info("商家服务调用结果: code={}, message={}, data={}", 
                result.getCode(), result.getMessage(), result.getData() != null ? "有数据" : "无数据");
            return R.success("调用成功", result);
        } catch (feign.FeignException e) {
            log.error("Feign调用异常: status={}, contentUTF8={}", e.status(), e.contentUTF8(), e);
            return R.error("Feign调用失败: " + e.status() + " - " + e.contentUTF8());
        } catch (Exception e) {
            log.error("商家服务调用失败", e);
            return R.error("调用失败: " + e.getClass().getSimpleName() + " - " + e.getMessage());
        }
    }

    @PostMapping("/getAllUserOrder")
    @Operation(summary = "查询用户订单(兼容接口)", description = "根据用户手机号查询订单列表(兼容原有接口)")
    public R<List<UserOrder>> getAllUserOrder(@RequestBody Map<String, String> requestBody) {
        String userPhone = requestBody.get("userPhone");
        if (userPhone == null || userPhone.trim().isEmpty()) {
            return R.error("用户手机号不能为空");
        }
        
        log.info("查询用户订单(兼容接口): {}", userPhone);
        List<UserOrder> orders = orderService.getOrdersByUserPhone(userPhone);
        return R.success(orders);
    }

    @PostMapping("/getAllUserOrderDetails")
    @Operation(summary = "查询用户订单详情列表(完整信息)", description = "根据用户手机号查询包含商家和食物信息的订单详情列表")
    public R<List<OrderDetailDTO>> getAllUserOrderDetails(@RequestBody Map<String, String> requestBody) {
        String userPhone = requestBody.get("userPhone");
        if (userPhone == null || userPhone.trim().isEmpty()) {
            return R.error("用户手机号不能为空");
        }
        
        log.info("查询用户订单详情列表: {}", userPhone);
        List<OrderDetailDTO> orderDetails = orderService.getOrderDetailsByUserPhone(userPhone);
        return R.success(orderDetails);
    }

    @PostMapping("/getOrderDetail")
    @Operation(summary = "查询订单详情(兼容接口)", description = "根据订单ID查询详细信息(兼容原有接口)")
    public R<OrderDetailDTO> getOrderDetail(@RequestBody Map<String, Integer> requestBody) {
        Integer id = requestBody.get("ID");
        if (id == null) {
            return R.error("订单ID不能为空");
        }
        
        log.info("查询订单详情(兼容接口): {}", id);
        OrderDetailDTO orderDetail = orderService.getOrderDetail(id);
        if (orderDetail != null) {
            return R.success(orderDetail);
        } else {
            return R.error("订单详情不存在");
        }
    }
}

================
File: eleme-order-service/src/main/java/org/example/feign/BusinessClient.java
================
package org.example.feign;

import org.example.dto.R;
import org.example.entity.Business;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(value = "eleme-business-service", fallback = BusinessClientFallback.class)
public interface BusinessClient {

    /**
     * 根据ID查询商家信息
     * @param id 商家ID
     * @return 商家信息
     */
    @GetMapping("/business/{id}")
    R<Business> getBusinessById(@PathVariable("id") Integer id);
}

================
File: eleme-order-service/src/main/java/org/example/feign/BusinessClientFallback.java
================
package org.example.feign;

import lombok.extern.slf4j.Slf4j;
import org.example.dto.R;
import org.example.entity.Business;
import org.springframework.stereotype.Component;

@Component
@Slf4j
public class BusinessClientFallback implements BusinessClient {

    @Override
    public R<Business> getBusinessById(Integer id) {
        log.error("调用商家服务失败，商家ID: {}", id);
        return R.error("商家服务暂时不可用");
    }
}

================
File: eleme-order-service/src/main/java/org/example/feign/FoodClient.java
================
package org.example.feign;

import org.example.dto.R;
import org.example.entity.Food;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import java.util.List;

@FeignClient(value = "eleme-food-service", fallback = FoodClientFallback.class)
public interface FoodClient {

    /**
     * 根据ID查询食物信息
     * @param id 食物ID
     * @return 食物信息
     */
    @GetMapping("/food/{id}")
    R<Food> getFoodById(@PathVariable("id") Integer id);

    /**
     * 批量查询食物信息
     * @param ids 食物ID列表
     * @return 食物信息列表
     */
    @PostMapping("/food/batch")
    R<List<Food>> getFoodsByIds(@RequestBody List<Integer> ids);

    /**
     * 根据商家ID查询上架食物
     * @param businessId 商家ID
     * @return 食物列表
     */
    @GetMapping("/food/business/{businessId}/onsale")
    R<List<Food>> getOnSaleFoodsByBusinessId(@PathVariable("businessId") Integer businessId);
}

================
File: eleme-order-service/src/main/java/org/example/feign/FoodClientFallback.java
================
package org.example.feign;

import lombok.extern.slf4j.Slf4j;
import org.example.dto.R;
import org.example.entity.Food;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@Slf4j
public class FoodClientFallback implements FoodClient {

    @Override
    public R<Food> getFoodById(Integer id) {
        log.error("调用食物服务失败，食物ID: {}", id);
        return R.error("食物服务暂时不可用");
    }

    @Override
    public R<List<Food>> getFoodsByIds(List<Integer> ids) {
        log.error("调用食物服务失败，食物ID列表: {}", ids);
        return R.error("食物服务暂时不可用");
    }

    @Override
    public R<List<Food>> getOnSaleFoodsByBusinessId(Integer businessId) {
        log.error("调用食物服务失败，商家ID: {}", businessId);
        return R.error("食物服务暂时不可用");
    }
}

================
File: eleme-order-service/src/main/java/org/example/feign/UserClient.java
================
package org.example.feign;

import org.example.dto.R;
import org.example.entity.User;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(value = "eleme-user-service", fallback = UserClientFallback.class)
public interface UserClient {

    /**
     * 根据手机号查询用户信息
     * @param phone 手机号
     * @return 用户信息
     */
    @GetMapping("/user/phone/{phone}")
    R<User> getUserByPhone(@PathVariable("phone") String phone);

    /**
     * 根据ID查询用户信息
     * @param id 用户ID
     * @return 用户信息
     */
    @GetMapping("/user/{id}")
    R<User> getUserById(@PathVariable("id") Integer id);
}

================
File: eleme-order-service/src/main/java/org/example/feign/UserClientFallback.java
================
package org.example.feign;

import lombok.extern.slf4j.Slf4j;
import org.example.dto.R;
import org.example.entity.User;
import org.springframework.stereotype.Component;

@Component
@Slf4j
public class UserClientFallback implements UserClient {

    @Override
    public R<User> getUserByPhone(String phone) {
        log.error("调用用户服务失败，手机号: {}", phone);
        return R.error("用户服务暂时不可用");
    }

    @Override
    public R<User> getUserById(Integer id) {
        log.error("调用用户服务失败，用户ID: {}", id);
        return R.error("用户服务暂时不可用");
    }
}

================
File: eleme-order-service/src/main/java/org/example/mapper/UserOrderMapper.java
================
package org.example.mapper;

import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.example.entity.UserOrder;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface UserOrderMapper extends BaseMapper<UserOrder> {

    /**
     * 根据用户手机号查询订单
     * @param userPhone 用户手机号
     * @return 订单列表
     */
    @Select("SELECT * FROM user_order WHERE user_phone = #{userPhone} ORDER BY created_at DESC")
    List<UserOrder> findAllByUserPhone(String userPhone);

    /**
     * 根据商家ID查询订单
     * @param businessId 商家ID
     * @return 订单列表
     */
    @Select("SELECT * FROM user_order WHERE business_id = #{businessId} ORDER BY created_at DESC")
    List<UserOrder> findAllByBusinessId(Integer businessId);

    /**
     * 根据订单状态查询订单
     * @param state 订单状态
     * @return 订单列表
     */
    @Select("SELECT * FROM user_order WHERE state = #{state} ORDER BY created_at DESC")
    List<UserOrder> findAllByState(Integer state);

    /**
     * 根据用户手机号和订单状态查询订单
     * @param userPhone 用户手机号
     * @param state 订单状态
     * @return 订单列表
     */
    @Select("SELECT * FROM user_order WHERE user_phone = #{userPhone} AND state = #{state} ORDER BY created_at DESC")
    List<UserOrder> findAllByUserPhoneAndState(String userPhone, Integer state);

    /**
     * 根据商家ID和订单状态查询订单
     * @param businessId 商家ID
     * @param state 订单状态
     * @return 订单列表
     */
    @Select("SELECT * FROM user_order WHERE business_id = #{businessId} AND state = #{state} ORDER BY created_at DESC")
    List<UserOrder> findAllByBusinessIdAndState(Integer businessId, Integer state);

    /**
     * 统计用户订单数量
     * @param userPhone 用户手机号
     * @return 订单数量
     */
    @Select("SELECT COUNT(*) FROM user_order WHERE user_phone = #{userPhone}")
    Integer countByUserPhone(String userPhone);

    /**
     * 统计商家订单数量
     * @param businessId 商家ID
     * @return 订单数量
     */
    @Select("SELECT COUNT(*) FROM user_order WHERE business_id = #{businessId}")
    Integer countByBusinessId(Integer businessId);

    /**
     * 统计特定状态的订单数量
     * @param state 订单状态
     * @return 订单数量
     */
    @Select("SELECT COUNT(*) FROM user_order WHERE state = #{state}")
    Integer countByState(Integer state);

    /**
     * 更新订单状态
     * @param id 订单ID
     * @param state 新状态
     * @return 更新行数
     */
    @Update("UPDATE user_order SET state = #{state} WHERE id = #{id}")
    int updateStateById(@Param("id") Integer id, @Param("state") Integer state);

    /**
     * 根据用户手机号和时间范围查询订单
     * @param userPhone 用户手机号
     * @param startTime 开始时间
     * @param endTime 结束时间
     * @return 订单列表
     */
    @Select("SELECT * FROM user_order WHERE user_phone = #{userPhone} AND created_at BETWEEN #{startTime} AND #{endTime} ORDER BY created_at DESC")
    List<UserOrder> findOrdersByUserPhoneAndTimeRange(String userPhone, String startTime, String endTime);

    /**
     * 根据商家ID和时间范围查询订单
     * @param businessId 商家ID
     * @param startTime 开始时间
     * @param endTime 结束时间
     * @return 订单列表
     */
    @Select("SELECT * FROM user_order WHERE business_id = #{businessId} AND created_at BETWEEN #{startTime} AND #{endTime} ORDER BY created_at DESC")
    List<UserOrder> findOrdersByBusinessIdAndTimeRange(Integer businessId, String startTime, String endTime);

    /**
     * 根据价格范围查询订单
     * @param minPrice 最低价格
     * @param maxPrice 最高价格
     * @return 订单列表
     */
    @Select("SELECT * FROM user_order WHERE price >= #{minPrice} AND price <= #{maxPrice} ORDER BY created_at DESC")
    List<UserOrder> findOrdersByPriceRange(Double minPrice, Double maxPrice);

    /**
     * 查询热门订单（按创建时间最近）
     * @param limit 限制数量
     * @return 订单列表
     */
    @Select("SELECT * FROM user_order ORDER BY created_at DESC LIMIT #{limit}")
    List<UserOrder> findRecentOrders(Integer limit);
}

================
File: eleme-order-service/src/main/java/org/example/service/impl/OrderServiceImpl.java
================
package org.example.service.impl;

import com.alibaba.csp.sentinel.annotation.SentinelResource;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.OrderDetailDTO;
import org.example.dto.OrderRequestDTO;
import org.example.dto.R;
import org.example.entity.Business;
import org.example.entity.Food;
import org.example.entity.User;
import org.example.entity.UserOrder;
import org.example.feign.BusinessClient;
import org.example.feign.FoodClient;
import org.example.feign.UserClient;
import org.example.mapper.UserOrderMapper;
import org.example.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Service
@Slf4j
public class OrderServiceImpl implements OrderService {

    @Autowired
    private UserOrderMapper userOrderMapper;

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    @Autowired
    private UserClient userClient;

    @Autowired
    private BusinessClient businessClient;

    @Autowired
    private FoodClient foodClient;

    private static final String ORDER_CACHE_KEY = "order:";
    private static final String USER_ORDERS_CACHE_KEY = "user:orders:";
    private static final String BUSINESS_ORDERS_CACHE_KEY = "business:orders:";
    private static final String ORDER_DETAIL_CACHE_KEY = "order:detail:";
    private static final long CACHE_EXPIRE_TIME = 30; // 30分钟

    @Override
    @SentinelResource(value = "getById", fallback = "getByIdFallback")
    public UserOrder getById(Integer id) {
        if (id == null) {
            return null;
        }

        // 先从缓存中获取
        String cacheKey = ORDER_CACHE_KEY + id;
        UserOrder order = (UserOrder) redisTemplate.opsForValue().get(cacheKey);
        if (order != null) {
            log.debug("从缓存中获取订单信息: {}", id);
            return order;
        }

        // 从数据库查询
        order = userOrderMapper.selectById(id);
        if (order != null) {
            // 存入缓存
            redisTemplate.opsForValue().set(cacheKey, order, CACHE_EXPIRE_TIME, TimeUnit.MINUTES);
            log.debug("从数据库获取订单信息并缓存: {}", id);
        }
        return order;
    }

    @Override
    @Transactional
    @SentinelResource(value = "createOrder", fallback = "createOrderFallback")
    public Integer createOrder(OrderRequestDTO orderRequestDTO) {
        if (orderRequestDTO == null || orderRequestDTO.getUserPhone() == null 
            || orderRequestDTO.getBusinessID() == null || orderRequestDTO.getOrderList() == null 
            || orderRequestDTO.getPrice() == null) {
            log.error("创建订单失败，参数不完整: {}", orderRequestDTO);
            return null;
        }

        try {
            // 1. 验证用户是否存在
            R<User> userResult = userClient.getUserByPhone(orderRequestDTO.getUserPhone());
            if (!userResult.isSuccess() || userResult.getData() == null) {
                log.error("用户不存在: {}", orderRequestDTO.getUserPhone());
                return null;
            }

            // 2. 验证商家是否存在
            R<Business> businessResult = businessClient.getBusinessById(orderRequestDTO.getBusinessID());
            if (!businessResult.isSuccess() || businessResult.getData() == null) {
                log.error("商家不存在: {}", orderRequestDTO.getBusinessID());
                return null;
            }

            // 3. 验证商品是否存在且可用
            R<List<Food>> foodResult = foodClient.getFoodsByIds(orderRequestDTO.getOrderList());
            if (!foodResult.isSuccess() || foodResult.getData() == null || foodResult.getData().isEmpty()) {
                log.error("商品不存在或不可用: {}", orderRequestDTO.getOrderList());
                return null;
            }

            // 4. 获取食物信息（用于订单详情，不进行价格验证）
            List<Food> foods = foodResult.getData();
            log.info("获取食物信息成功，食物数量: {}, 使用前端传入价格: {}", foods.size(), orderRequestDTO.getPrice());

            // 5. 创建订单
            UserOrder order = new UserOrder();
            order.setUserPhone(orderRequestDTO.getUserPhone());
            order.setBusinessId(orderRequestDTO.getBusinessID());
            order.setPrice(orderRequestDTO.getPrice());
            order.setDeliveryFee(orderRequestDTO.getDeliveryFee());
            order.setDeliveryAddress(orderRequestDTO.getDeliveryAddress());
            order.setReceiverName(orderRequestDTO.getReceiverName());
            order.setReceiverPhone(orderRequestDTO.getReceiverPhone());
            order.setRemark(orderRequestDTO.getRemark());
            order.setState(0); // 0: 未支付
            order.setCreatedAt(LocalDateTime.now());
            
            // 将订单列表转换为字符串
            String orderListStr = orderRequestDTO.getOrderList().stream()
                    .map(String::valueOf)
                    .collect(Collectors.joining("-"));
            order.setOrderList(orderListStr);

            // 保存到数据库
            int result = userOrderMapper.insert(order);
            if (result > 0) {
                // 清理相关缓存
                clearUserOrdersCache(orderRequestDTO.getUserPhone());
                clearBusinessOrdersCache(orderRequestDTO.getBusinessID());
                log.info("创建订单成功: {}", order.getId());
                return order.getId();
            }
        } catch (Exception e) {
            log.error("创建订单失败", e);
        }
        return null;
    }

    @Override
    @Transactional
    @SentinelResource(value = "payOrder", fallback = "payOrderFallback")
    public Boolean payOrder(Integer id) {
        if (id == null) {
            return false;
        }

        try {
            UserOrder order = userOrderMapper.selectById(id);
            if (order == null) {
                log.error("订单不存在: {}", id);
                return false;
            }

            if (order.getState() != 0) {
                log.error("订单状态不正确，无法支付: {}, 当前状态: {}", id, order.getState());
                return false;
            }

            // 更新订单状态为已支付
            int result = userOrderMapper.updateStateById(id, 1);
            if (result > 0) {
                // 清理相关缓存
                clearOrderCache(id);
                clearUserOrdersCache(order.getUserPhone());
                clearBusinessOrdersCache(order.getBusinessId());
                log.info("订单支付成功: {}", id);
                return true;
            }
        } catch (Exception e) {
            log.error("订单支付失败", e);
        }
        return false;
    }

    @Override
    @SentinelResource(value = "getOrdersByUserPhone", fallback = "getOrdersByUserPhoneFallback")
    public List<UserOrder> getOrdersByUserPhone(String userPhone) {
        if (userPhone == null || userPhone.trim().isEmpty()) {
            return List.of();
        }

        // 先从缓存中获取
        String cacheKey = USER_ORDERS_CACHE_KEY + userPhone;
        List<UserOrder> orders = (List<UserOrder>) redisTemplate.opsForValue().get(cacheKey);
        if (orders != null) {
            log.debug("从缓存中获取用户订单列表: {}", userPhone);
            return orders;
        }

        // 从数据库查询
        orders = userOrderMapper.findAllByUserPhone(userPhone);
        // 存入缓存
        redisTemplate.opsForValue().set(cacheKey, orders, CACHE_EXPIRE_TIME, TimeUnit.MINUTES);
        log.debug("从数据库获取用户订单列表并缓存: {}", userPhone);
        return orders;
    }

    @Override
    @SentinelResource(value = "getOrderDetailsByUserPhone", fallback = "getOrderDetailsByUserPhoneFallback")
    public List<OrderDetailDTO> getOrderDetailsByUserPhone(String userPhone) {
        if (userPhone == null || userPhone.trim().isEmpty()) {
            return List.of();
        }

        try {
            // 先获取用户的所有订单
            List<UserOrder> orders = userOrderMapper.findAllByUserPhone(userPhone);
            if (orders.isEmpty()) {
                return List.of();
            }

            // 为每个订单构建详情
            List<OrderDetailDTO> orderDetails = new ArrayList<>();
            for (UserOrder order : orders) {
                try {
                    OrderDetailDTO orderDetail = new OrderDetailDTO();
                    orderDetail.setId(order.getId());
                    orderDetail.setBusinessID(order.getBusinessId());
                    orderDetail.setUserPhone(order.getUserPhone());
                    orderDetail.setOrderList(order.getOrderList());
                    orderDetail.setPrice(order.getPrice());
                    orderDetail.setState(order.getState());
                    orderDetail.setCreatedAt(order.getCreatedAt());
                    orderDetail.setPaidAt(order.getPaidAt());
                    orderDetail.setCompletedAt(order.getCompletedAt());

                    // 获取商家信息
                    R<Business> businessResult = businessClient.getBusinessById(order.getBusinessId());
                    if (businessResult.isSuccess() && businessResult.getData() != null) {
                        orderDetail.setBusiness(businessResult.getData());
                    }

                    // 获取商品信息
                    if (order.getOrderList() != null && !order.getOrderList().isEmpty()) {
                        List<Integer> foodIds = Arrays.stream(order.getOrderList().split("-"))
                                .map(Integer::parseInt)
                                .collect(Collectors.toList());
                        
                        R<List<Food>> foodResult = foodClient.getFoodsByIds(foodIds);
                        if (foodResult.isSuccess() && foodResult.getData() != null) {
                            orderDetail.setOrderItems(foodResult.getData());
                        }
                    }

                    orderDetails.add(orderDetail);
                } catch (Exception e) {
                    log.error("获取订单{}详情失败，跳过此订单", order.getId(), e);
                    // 即使某个订单详情获取失败，也不影响其他订单
                }
            }

            log.debug("获取用户订单详情列表成功: {}, 订单数量: {}", userPhone, orderDetails.size());
            return orderDetails;
        } catch (Exception e) {
            log.error("获取用户订单详情列表失败", e);
            return List.of();
        }
    }

    @Override
    @SentinelResource(value = "getOrdersByBusinessId", fallback = "getOrdersByBusinessIdFallback")
    public List<UserOrder> getOrdersByBusinessId(Integer businessId) {
        if (businessId == null) {
            return List.of();
        }

        // 先从缓存中获取
        String cacheKey = BUSINESS_ORDERS_CACHE_KEY + businessId;
        List<UserOrder> orders = (List<UserOrder>) redisTemplate.opsForValue().get(cacheKey);
        if (orders != null) {
            log.debug("从缓存中获取商家订单列表: {}", businessId);
            return orders;
        }

        // 从数据库查询
        orders = userOrderMapper.findAllByBusinessId(businessId);
        // 存入缓存
        redisTemplate.opsForValue().set(cacheKey, orders, CACHE_EXPIRE_TIME, TimeUnit.MINUTES);
        log.debug("从数据库获取商家订单列表并缓存: {}", businessId);
        return orders;
    }

    @Override
    @SentinelResource(value = "getOrdersByState", fallback = "getOrdersByStateFallback")
    public List<UserOrder> getOrdersByState(Integer state) {
        if (state == null) {
            return List.of();
        }
        return userOrderMapper.findAllByState(state);
    }

    @Override
    @SentinelResource(value = "getOrdersByUserPhoneAndState", fallback = "getOrdersByUserPhoneAndStateFallback")
    public List<UserOrder> getOrdersByUserPhoneAndState(String userPhone, Integer state) {
        if (userPhone == null || userPhone.trim().isEmpty() || state == null) {
            return List.of();
        }
        return userOrderMapper.findAllByUserPhoneAndState(userPhone, state);
    }

    @Override
    @SentinelResource(value = "getOrdersByBusinessIdAndState", fallback = "getOrdersByBusinessIdAndStateFallback")
    public List<UserOrder> getOrdersByBusinessIdAndState(Integer businessId, Integer state) {
        if (businessId == null || state == null) {
            return List.of();
        }
        return userOrderMapper.findAllByBusinessIdAndState(businessId, state);
    }

    @Override
    @SentinelResource(value = "getOrderDetail", fallback = "getOrderDetailFallback")
    public OrderDetailDTO getOrderDetail(Integer id) {
        if (id == null) {
            return null;
        }

        // 先从缓存中获取
        String cacheKey = ORDER_DETAIL_CACHE_KEY + id;
        OrderDetailDTO orderDetail = (OrderDetailDTO) redisTemplate.opsForValue().get(cacheKey);
        if (orderDetail != null) {
            log.debug("从缓存中获取订单详情: {}", id);
            return orderDetail;
        }

        try {
            // 从数据库查询订单
            UserOrder order = userOrderMapper.selectById(id);
            if (order == null) {
                return null;
            }

            // 构建订单详情
            orderDetail = new OrderDetailDTO();
            orderDetail.setId(order.getId());
            orderDetail.setBusinessID(order.getBusinessId());
            orderDetail.setUserPhone(order.getUserPhone());
            orderDetail.setOrderList(order.getOrderList());
            orderDetail.setPrice(order.getPrice());
            orderDetail.setState(order.getState());
            orderDetail.setCreatedAt(order.getCreatedAt());

            // 获取商家信息
            R<Business> businessResult = businessClient.getBusinessById(order.getBusinessId());
            if (businessResult.isSuccess() && businessResult.getData() != null) {
                orderDetail.setBusiness(businessResult.getData());
            }

            // 获取商品信息
            if (order.getOrderList() != null && !order.getOrderList().isEmpty()) {
                List<Integer> foodIds = Arrays.stream(order.getOrderList().split("-"))
                        .map(Integer::parseInt)
                        .collect(Collectors.toList());
                
                R<List<Food>> foodResult = foodClient.getFoodsByIds(foodIds);
                if (foodResult.isSuccess() && foodResult.getData() != null) {
                    orderDetail.setOrderItems(foodResult.getData());
                }
            }

            // 存入缓存
            redisTemplate.opsForValue().set(cacheKey, orderDetail, CACHE_EXPIRE_TIME, TimeUnit.MINUTES);
            log.debug("从数据库获取订单详情并缓存: {}", id);
            return orderDetail;
        } catch (Exception e) {
            log.error("获取订单详情失败", e);
            return null;
        }
    }

    @Override
    @Transactional
    @SentinelResource(value = "updateOrderState", fallback = "updateOrderStateFallback")
    public Boolean updateOrderState(Integer id, Integer state) {
        if (id == null || state == null) {
            return false;
        }

        try {
            UserOrder order = userOrderMapper.selectById(id);
            if (order == null) {
                log.error("订单不存在: {}", id);
                return false;
            }

            int result = userOrderMapper.updateStateById(id, state);
            if (result > 0) {
                // 清理相关缓存
                clearOrderCache(id);
                clearOrderDetailCache(id);
                clearUserOrdersCache(order.getUserPhone());
                clearBusinessOrdersCache(order.getBusinessId());
                log.info("更新订单状态成功: {}, 新状态: {}", id, state);
                return true;
            }
        } catch (Exception e) {
            log.error("更新订单状态失败", e);
        }
        return false;
    }

    @Override
    @Transactional
    @SentinelResource(value = "cancelOrder", fallback = "cancelOrderFallback")
    public Boolean cancelOrder(Integer id) {
        return updateOrderState(id, -1); // -1: 已取消
    }

    @Override
    @Transactional
    @SentinelResource(value = "confirmOrder", fallback = "confirmOrderFallback")
    public Boolean confirmOrder(Integer id) {
        return updateOrderState(id, 2); // 2: 已确认
    }

    @Override
    @Transactional
    @SentinelResource(value = "completeOrder", fallback = "completeOrderFallback")
    public Boolean completeOrder(Integer id) {
        return updateOrderState(id, 3); // 3: 已完成
    }

    @Override
    @SentinelResource(value = "countOrdersByUserPhone", fallback = "countOrdersByUserPhoneFallback")
    public Integer countOrdersByUserPhone(String userPhone) {
        if (userPhone == null || userPhone.trim().isEmpty()) {
            return 0;
        }
        return userOrderMapper.countByUserPhone(userPhone);
    }

    @Override
    @SentinelResource(value = "countOrdersByBusinessId", fallback = "countOrdersByBusinessIdFallback")
    public Integer countOrdersByBusinessId(Integer businessId) {
        if (businessId == null) {
            return 0;
        }
        return userOrderMapper.countByBusinessId(businessId);
    }

    @Override
    @SentinelResource(value = "countOrdersByState", fallback = "countOrdersByStateFallback")
    public Integer countOrdersByState(Integer state) {
        if (state == null) {
            return 0;
        }
        return userOrderMapper.countByState(state);
    }

    @Override
    @SentinelResource(value = "getOrdersByUserPhoneAndTimeRange", fallback = "getOrdersByUserPhoneAndTimeRangeFallback")
    public List<UserOrder> getOrdersByUserPhoneAndTimeRange(String userPhone, String startTime, String endTime) {
        if (userPhone == null || userPhone.trim().isEmpty() || startTime == null || endTime == null) {
            return List.of();
        }
        return userOrderMapper.findOrdersByUserPhoneAndTimeRange(userPhone, startTime, endTime);
    }

    @Override
    @SentinelResource(value = "getOrdersByBusinessIdAndTimeRange", fallback = "getOrdersByBusinessIdAndTimeRangeFallback")
    public List<UserOrder> getOrdersByBusinessIdAndTimeRange(Integer businessId, String startTime, String endTime) {
        if (businessId == null || startTime == null || endTime == null) {
            return List.of();
        }
        return userOrderMapper.findOrdersByBusinessIdAndTimeRange(businessId, startTime, endTime);
    }

    @Override
    @SentinelResource(value = "getOrdersByPriceRange", fallback = "getOrdersByPriceRangeFallback")
    public List<UserOrder> getOrdersByPriceRange(Double minPrice, Double maxPrice) {
        if (minPrice == null || maxPrice == null || minPrice > maxPrice) {
            return List.of();
        }
        return userOrderMapper.findOrdersByPriceRange(minPrice, maxPrice);
    }

    @Override
    @SentinelResource(value = "getRecentOrders", fallback = "getRecentOrdersFallback")
    public List<UserOrder> getRecentOrders(Integer limit) {
        if (limit == null || limit <= 0) {
            limit = 10;
        }
        return userOrderMapper.findRecentOrders(limit);
    }

    @Override
    @Transactional
    @SentinelResource(value = "deleteOrder", fallback = "deleteOrderFallback")
    public Boolean deleteOrder(Integer id) {
        if (id == null) {
            return false;
        }

        try {
            UserOrder order = userOrderMapper.selectById(id);
            if (order == null) {
                log.error("订单不存在: {}", id);
                return false;
            }

            // 只允许取消状态的订单被删除
            if (order.getState() != -1) {
                log.error("订单状态不允许删除: {}, 当前状态: {}", id, order.getState());
                return false;
            }

            int result = userOrderMapper.deleteById(id);
            if (result > 0) {
                // 清理相关缓存
                clearOrderCache(id);
                clearOrderDetailCache(id);
                clearUserOrdersCache(order.getUserPhone());
                clearBusinessOrdersCache(order.getBusinessId());
                log.info("删除订单成功: {}", id);
                return true;
            }
        } catch (Exception e) {
            log.error("删除订单失败", e);
        }
        return false;
    }

    /**
     * 清理订单缓存
     */
    private void clearOrderCache(Integer id) {
        if (id != null) {
            redisTemplate.delete(ORDER_CACHE_KEY + id);
        }
    }

    /**
     * 清理订单详情缓存
     */
    private void clearOrderDetailCache(Integer id) {
        if (id != null) {
            redisTemplate.delete(ORDER_DETAIL_CACHE_KEY + id);
        }
    }

    /**
     * 清理用户订单缓存
     */
    private void clearUserOrdersCache(String userPhone) {
        if (userPhone != null) {
            redisTemplate.delete(USER_ORDERS_CACHE_KEY + userPhone);
        }
    }

    /**
     * 清理商家订单缓存
     */
    private void clearBusinessOrdersCache(Integer businessId) {
        if (businessId != null) {
            redisTemplate.delete(BUSINESS_ORDERS_CACHE_KEY + businessId);
        }
    }

    // Sentinel 降级方法
    public UserOrder getByIdFallback(Integer id, Throwable throwable) {
        log.error("获取订单信息降级处理: {}", id, throwable);
        return null;
    }

    public Integer createOrderFallback(OrderRequestDTO orderRequestDTO, Throwable throwable) {
        log.error("创建订单降级处理: {}", orderRequestDTO, throwable);
        return null;
    }

    public Boolean payOrderFallback(Integer id, Throwable throwable) {
        log.error("订单支付降级处理: {}", id, throwable);
        return false;
    }

    public List<UserOrder> getOrdersByUserPhoneFallback(String userPhone, Throwable throwable) {
        log.error("获取用户订单列表降级处理: {}", userPhone, throwable);
        return List.of();
    }

    public List<OrderDetailDTO> getOrderDetailsByUserPhoneFallback(String userPhone, Throwable throwable) {
        log.error("获取用户订单详情列表降级处理: {}", userPhone, throwable);
        return List.of();
    }

    public List<UserOrder> getOrdersByBusinessIdFallback(Integer businessId, Throwable throwable) {
        log.error("获取商家订单列表降级处理: {}", businessId, throwable);
        return List.of();
    }

    public List<UserOrder> getOrdersByStateFallback(Integer state, Throwable throwable) {
        log.error("获取订单状态列表降级处理: {}", state, throwable);
        return List.of();
    }

    public List<UserOrder> getOrdersByUserPhoneAndStateFallback(String userPhone, Integer state, Throwable throwable) {
        log.error("获取用户订单状态列表降级处理: {}-{}", userPhone, state, throwable);
        return List.of();
    }

    public List<UserOrder> getOrdersByBusinessIdAndStateFallback(Integer businessId, Integer state, Throwable throwable) {
        log.error("获取商家订单状态列表降级处理: {}-{}", businessId, state, throwable);
        return List.of();
    }

    public OrderDetailDTO getOrderDetailFallback(Integer id, Throwable throwable) {
        log.error("获取订单详情降级处理: {}", id, throwable);
        return null;
    }

    public Boolean updateOrderStateFallback(Integer id, Integer state, Throwable throwable) {
        log.error("更新订单状态降级处理: {}-{}", id, state, throwable);
        return false;
    }

    public Boolean cancelOrderFallback(Integer id, Throwable throwable) {
        log.error("取消订单降级处理: {}", id, throwable);
        return false;
    }

    public Boolean confirmOrderFallback(Integer id, Throwable throwable) {
        log.error("确认订单降级处理: {}", id, throwable);
        return false;
    }

    public Boolean completeOrderFallback(Integer id, Throwable throwable) {
        log.error("完成订单降级处理: {}", id, throwable);
        return false;
    }

    public Integer countOrdersByUserPhoneFallback(String userPhone, Throwable throwable) {
        log.error("统计用户订单数量降级处理: {}", userPhone, throwable);
        return 0;
    }

    public Integer countOrdersByBusinessIdFallback(Integer businessId, Throwable throwable) {
        log.error("统计商家订单数量降级处理: {}", businessId, throwable);
        return 0;
    }

    public Integer countOrdersByStateFallback(Integer state, Throwable throwable) {
        log.error("统计订单状态数量降级处理: {}", state, throwable);
        return 0;
    }

    public List<UserOrder> getOrdersByUserPhoneAndTimeRangeFallback(String userPhone, String startTime, String endTime, Throwable throwable) {
        log.error("获取用户时间范围订单降级处理: {}-{}-{}", userPhone, startTime, endTime, throwable);
        return List.of();
    }

    public List<UserOrder> getOrdersByBusinessIdAndTimeRangeFallback(Integer businessId, String startTime, String endTime, Throwable throwable) {
        log.error("获取商家时间范围订单降级处理: {}-{}-{}", businessId, startTime, endTime, throwable);
        return List.of();
    }

    public List<UserOrder> getOrdersByPriceRangeFallback(Double minPrice, Double maxPrice, Throwable throwable) {
        log.error("获取价格范围订单降级处理: {}-{}", minPrice, maxPrice, throwable);
        return List.of();
    }

    public List<UserOrder> getRecentOrdersFallback(Integer limit, Throwable throwable) {
        log.error("获取最近订单降级处理: {}", limit, throwable);
        return List.of();
    }

    public Boolean deleteOrderFallback(Integer id, Throwable throwable) {
        log.error("删除订单降级处理: {}", id, throwable);
        return false;
    }
}

================
File: eleme-order-service/src/main/java/org/example/service/OrderService.java
================
package org.example.service;

import org.example.dto.OrderDetailDTO;
import org.example.dto.OrderRequestDTO;
import org.example.entity.UserOrder;

import java.util.List;

public interface OrderService {

    /**
     * 根据ID查询订单
     * @param id 订单ID
     * @return 订单信息
     */
    UserOrder getById(Integer id);

    /**
     * 创建新订单
     * @param orderRequestDTO 订单请求DTO
     * @return 订单ID
     */
    Integer createOrder(OrderRequestDTO orderRequestDTO);

    /**
     * 订单支付
     * @param id 订单ID
     * @return 是否成功
     */
    Boolean payOrder(Integer id);

    /**
     * 根据用户手机号查询订单
     * @param userPhone 用户手机号
     * @return 订单列表
     */
    List<UserOrder> getOrdersByUserPhone(String userPhone);

    /**
     * 根据用户手机号查询订单详情列表（包含商家和食物信息）
     * @param userPhone 用户手机号
     * @return 订单详情列表
     */
    List<OrderDetailDTO> getOrderDetailsByUserPhone(String userPhone);

    /**
     * 根据商家ID查询订单
     * @param businessId 商家ID
     * @return 订单列表
     */
    List<UserOrder> getOrdersByBusinessId(Integer businessId);

    /**
     * 根据订单状态查询订单
     * @param state 订单状态
     * @return 订单列表
     */
    List<UserOrder> getOrdersByState(Integer state);

    /**
     * 根据用户手机号和状态查询订单
     * @param userPhone 用户手机号
     * @param state 订单状态
     * @return 订单列表
     */
    List<UserOrder> getOrdersByUserPhoneAndState(String userPhone, Integer state);

    /**
     * 根据商家ID和状态查询订单
     * @param businessId 商家ID
     * @param state 订单状态
     * @return 订单列表
     */
    List<UserOrder> getOrdersByBusinessIdAndState(Integer businessId, Integer state);

    /**
     * 获取订单详情
     * @param id 订单ID
     * @return 订单详情DTO
     */
    OrderDetailDTO getOrderDetail(Integer id);

    /**
     * 更新订单状态
     * @param id 订单ID
     * @param state 新状态
     * @return 是否成功
     */
    Boolean updateOrderState(Integer id, Integer state);

    /**
     * 取消订单
     * @param id 订单ID
     * @return 是否成功
     */
    Boolean cancelOrder(Integer id);

    /**
     * 确认订单
     * @param id 订单ID
     * @return 是否成功
     */
    Boolean confirmOrder(Integer id);

    /**
     * 完成订单
     * @param id 订单ID
     * @return 是否成功
     */
    Boolean completeOrder(Integer id);

    /**
     * 统计用户订单数量
     * @param userPhone 用户手机号
     * @return 订单数量
     */
    Integer countOrdersByUserPhone(String userPhone);

    /**
     * 统计商家订单数量
     * @param businessId 商家ID
     * @return 订单数量
     */
    Integer countOrdersByBusinessId(Integer businessId);

    /**
     * 统计特定状态的订单数量
     * @param state 订单状态
     * @return 订单数量
     */
    Integer countOrdersByState(Integer state);

    /**
     * 根据时间范围查询订单
     * @param userPhone 用户手机号
     * @param startTime 开始时间
     * @param endTime 结束时间
     * @return 订单列表
     */
    List<UserOrder> getOrdersByUserPhoneAndTimeRange(String userPhone, String startTime, String endTime);

    /**
     * 根据商家ID和时间范围查询订单
     * @param businessId 商家ID
     * @param startTime 开始时间
     * @param endTime 结束时间
     * @return 订单列表
     */
    List<UserOrder> getOrdersByBusinessIdAndTimeRange(Integer businessId, String startTime, String endTime);

    /**
     * 根据价格范围查询订单
     * @param minPrice 最低价格
     * @param maxPrice 最高价格
     * @return 订单列表
     */
    List<UserOrder> getOrdersByPriceRange(Double minPrice, Double maxPrice);

    /**
     * 查询最近订单
     * @param limit 限制数量
     * @return 订单列表
     */
    List<UserOrder> getRecentOrders(Integer limit);

    /**
     * 删除订单
     * @param id 订单ID
     * @return 是否成功
     */
    Boolean deleteOrder(Integer id);
}

================
File: eleme-order-service/src/main/java/org/example/OrderServiceApplication.java
================
package org.example;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
@MapperScan("org.example.mapper")
public class OrderServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(OrderServiceApplication.class, args);
    }
}

================
File: eleme-order-service/src/main/resources/application.yml
================
server:
  port: 8004

spring:
  application:
    name: eleme-order-service
  
  config:
    import: "optional:nacos:eleme-order-service.yml"
  
  profiles:
    active: dev
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: public
        group: DEFAULT_GROUP
      config:
        server-addr: localhost:8848
        file-extension: yml
        namespace: public
        group: DEFAULT_GROUP
        shared-configs:
          - data-id: eleme-order-service.yml
            group: DEFAULT_GROUP
            refresh: true
    sentinel:
      transport:
        dashboard: localhost:8080
      datasource:
        ds1:
          nacos:
            server-addr: localhost:8848
            username: nacos
            password: nacos
            namespace: eleme-dev
            dataId: eleme-order-service-sentinel-rules
            groupId: DEFAULT_GROUP
            rule-type: flow
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/eleme_db?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: eleme
    password: eleme123
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  redis:
    host: localhost
    port: 6379
    password: redis_password
    database: 3
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
    timeout: 5000ms

mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      id-type: AUTO
      table-prefix: t_
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
  mapper-locations: classpath*:mapper/**/*Mapper.xml

logging:
  level:
    org.example: DEBUG
    org.springframework.cloud.openfeign: DEBUG
    org.example.feign: DEBUG
    feign: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

feign:
  client:
    config:
      default:
        connectTimeout: 10000
        readTimeout: 10000
        loggerLevel: full
  sentinel:
    enabled: false
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

================
File: eleme-order-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-order-service</artifactId>
    <description>订单服务</description>

    <dependencies>
        <!-- 公共模块 -->
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>eleme-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring Cloud Gateway 依赖移除 - 只有网关服务需要此依赖 -->

        <!-- Nacos Discovery -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!-- Nacos Config -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!-- Sentinel -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>

        <!-- OpenFeign -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

        <!-- Load Balancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>

        <!-- MyBatis Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>

        <!-- MySQL -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- SpringDoc OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>

        <!-- Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

================
File: eleme-payment-service/src/main/java/org/example/dto/PaymentRequestDTO.java
================
package org.example.dto;

import lombok.Data;

import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.math.BigDecimal;

@Data
public class PaymentRequestDTO {

    /**
     * 订单ID
     */
    @NotNull(message = "订单ID不能为空")
    private Integer orderId;

    /**
     * 用户手机号
     */
    @NotBlank(message = "用户手机号不能为空")
    private String userPhone;

    /**
     * 支付金额
     */
    @NotNull(message = "支付金额不能为空")
    @DecimalMin(value = "0.01", message = "支付金额必须大于0")
    private BigDecimal amount;

    /**
     * 支付方式: 1-支付宝, 2-微信, 3-银联, 4-余额
     */
    @NotNull(message = "支付方式不能为空")
    private Integer paymentMethod;

    /**
     * 支付描述
     */
    private String description;

    /**
     * 支付成功后的回调地址
     */
    private String returnUrl;

    /**
     * 客户端IP
     */
    private String clientIp;

    /**
     * 设备信息
     */
    private String deviceInfo;
}

================
File: eleme-payment-service/src/main/java/org/example/dto/PaymentResponseDTO.java
================
package org.example.dto;

import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Data
public class PaymentResponseDTO {

    /**
     * 支付记录ID
     */
    private Long id;

    /**
     * 支付单号
     */
    private String paymentNo;

    /**
     * 订单ID
     */
    private Integer orderId;

    /**
     * 用户手机号
     */
    private String userPhone;

    /**
     * 支付金额
     */
    private BigDecimal amount;

    /**
     * 支付方式: 1-支付宝, 2-微信, 3-银联, 4-余额
     */
    private Integer paymentMethod;

    /**
     * 支付状态: 0-待支付, 1-支付中, 2-支付成功, 3-支付失败, 4-已取消, 5-已退款
     */
    private Integer paymentStatus;

    /**
     * 第三方支付平台交易号
     */
    private String transactionId;

    /**
     * 支付成功时间
     */
    private LocalDateTime paymentTime;

    /**
     * 支付失败原因
     */
    private String failureReason;

    /**
     * 支付二维码（用于扫码支付）
     */
    private String qrCode;

    /**
     * 支付链接（用于H5支付）
     */
    private String paymentUrl;

    /**
     * 创建时间
     */
    private LocalDateTime createdAt;

    /**
     * 过期时间
     */
    private LocalDateTime expiredAt;
}

================
File: eleme-payment-service/src/main/java/org/example/dto/RefundRequestDTO.java
================
package org.example.dto;

import lombok.Data;

import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.math.BigDecimal;

@Data
public class RefundRequestDTO {

    /**
     * 支付单号
     */
    @NotBlank(message = "支付单号不能为空")
    private String paymentNo;

    /**
     * 退款金额
     */
    @NotNull(message = "退款金额不能为空")
    @DecimalMin(value = "0.01", message = "退款金额必须大于0")
    private BigDecimal refundAmount;

    /**
     * 退款原因
     */
    @NotBlank(message = "退款原因不能为空")
    private String refundReason;

    /**
     * 操作员
     */
    private String operator;

    /**
     * 退款单号（可选，系统自动生成）
     */
    private String refundNo;
}

================
File: eleme-payment-service/src/main/java/org/example/entity/Payment.java
================
package org.example.entity;

import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Data
@TableName("t_payment")
public class Payment implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 支付记录ID
     */
    @TableId(value = "id", type = IdType.AUTO)
    private Long id;

    /**
     * 支付单号（唯一）
     */
    private String paymentNo;

    /**
     * 订单ID
     */
    private Integer orderId;

    /**
     * 用户手机号
     */
    private String userPhone;

    /**
     * 支付金额
     */
    private BigDecimal amount;

    /**
     * 支付方式: 1-支付宝, 2-微信, 3-银联, 4-余额
     */
    private Integer paymentMethod;

    /**
     * 支付状态: 0-待支付, 1-支付中, 2-支付成功, 3-支付失败, 4-已取消, 5-已退款
     */
    private Integer paymentStatus;

    /**
     * 第三方支付平台交易号
     */
    private String transactionId;

    /**
     * 第三方支付平台用户标识
     */
    private String thirdPartyUserId;

    /**
     * 支付成功时间
     */
    private LocalDateTime paymentTime;

    /**
     * 支付失败原因
     */
    private String failureReason;

    /**
     * 退款金额
     */
    private BigDecimal refundAmount;

    /**
     * 退款时间
     */
    private LocalDateTime refundTime;

    /**
     * 退款原因
     */
    private String refundReason;

    /**
     * 支付平台回调信息
     */
    private String callbackData;

    /**
     * 备注
     */
    private String remarks;

    /**
     * 创建时间
     */
    private LocalDateTime createdAt;

    /**
     * 更新时间
     */
    private LocalDateTime updatedAt;

    /**
     * 过期时间
     */
    private LocalDateTime expiredAt;

    /**
     * 是否删除: 0-未删除, 1-已删除
     */
    private Integer deleted;
}

================
File: eleme-payment-service/src/main/java/org/example/PaymentServiceApplication.java
================
package org.example;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
@MapperScan("org.example.mapper")
public class PaymentServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(PaymentServiceApplication.class, args);
    }
}

================
File: eleme-payment-service/src/main/resources/application.yml
================
server:
  port: 8005

spring:
  application:
    name: eleme-payment-service
  
  config:
    import: "optional:nacos:eleme-payment-service.yml"
  
  profiles:
    active: dev
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: public
        group: DEFAULT_GROUP
      config:
        server-addr: localhost:8848
        namespace: public
        group: DEFAULT_GROUP
        file-extension: yml
        shared-configs:
          - data-id: eleme-common.yml
            refresh: true
    sentinel:
      transport:
        dashboard: localhost:8080
        port: 8725
      eager: true
      log:
        dir: logs/sentinel
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/eleme_payment?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: eleme_user
    password: eleme_password
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  redis:
    host: localhost
    port: 6379
    password: 
    database: 4
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
    timeout: 5000ms

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

================
File: eleme-payment-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-payment-service</artifactId>
    <description>支付服务</description>

    <dependencies>
        <!-- 公共模块 -->
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>eleme-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring Cloud Gateway 依赖移除 - 只有网关服务需要此依赖 -->

        <!-- Nacos Discovery -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!-- Nacos Config -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!-- Sentinel -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>

        <!-- OpenFeign -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

        <!-- Load Balancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>

        <!-- MyBatis Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>

        <!-- MySQL -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- SpringDoc OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>

        <!-- Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

================
File: eleme-user-service/src/main/java/org/example/config/FeignConfig.java
================
package org.example.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import feign.codec.Decoder;
import feign.codec.Encoder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
import org.springframework.cloud.openfeign.support.SpringDecoder;
import org.springframework.cloud.openfeign.support.SpringEncoder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;

/**
 * Feign配置类
 * 配置Feign客户端使用统一的日期时间格式
 */
@Configuration
public class FeignConfig {

    @Autowired
    private ObjectMapper objectMapper;

    @Bean
    public Encoder feignEncoder() {
        HttpMessageConverter jacksonConverter = new MappingJackson2HttpMessageConverter(objectMapper);
        return new SpringEncoder(() -> new HttpMessageConverters(jacksonConverter));
    }

    @Bean
    public Decoder feignDecoder() {
        HttpMessageConverter jacksonConverter = new MappingJackson2HttpMessageConverter(objectMapper);
        return new SpringDecoder(() -> new HttpMessageConverters(jacksonConverter));
    }
}

================
File: eleme-user-service/src/main/java/org/example/config/GlobalExceptionHandler.java
================
package org.example.config;

import lombok.extern.slf4j.Slf4j;
import org.example.constants.CommonConstants;
import org.example.dto.R;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import java.util.stream.Collectors;

/**
 * 全局异常处理器
 */
@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {

    /**
     * 处理参数校验异常
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public R<Object> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {
        String message = e.getBindingResult().getFieldErrors().stream()
                .map(FieldError::getDefaultMessage)
                .collect(Collectors.joining(", "));
        log.warn("参数校验失败: {}", message);
        return R.error(CommonConstants.ERROR_CODE, message);
    }

    /**
     * 处理绑定异常
     */
    @ExceptionHandler(BindException.class)
    public R<Object> handleBindException(BindException e) {
        String message = e.getBindingResult().getFieldErrors().stream()
                .map(FieldError::getDefaultMessage)
                .collect(Collectors.joining(", "));
        log.warn("参数绑定失败: {}", message);
        return R.error(CommonConstants.ERROR_CODE, message);
    }

    /**
     * 处理约束违反异常
     */
    @ExceptionHandler(ConstraintViolationException.class)
    public R<Object> handleConstraintViolationException(ConstraintViolationException e) {
        String message = e.getConstraintViolations().stream()
                .map(ConstraintViolation::getMessage)
                .collect(Collectors.joining(", "));
        log.warn("约束违反: {}", message);
        return R.error(CommonConstants.ERROR_CODE, message);
    }

    /**
     * 处理运行时异常
     */
    @ExceptionHandler(RuntimeException.class)
    public R<Object> handleRuntimeException(RuntimeException e) {
        log.error("运行时异常", e);
        return R.error(CommonConstants.ERROR_CODE, "系统内部错误，请稍后重试");
    }

    /**
     * 处理所有异常
     */
    @ExceptionHandler(Exception.class)
    public R<Object> handleException(Exception e) {
        log.error("系统异常", e);
        return R.error(CommonConstants.ERROR_CODE, "系统繁忙，请稍后重试");
    }
}

================
File: eleme-user-service/src/main/java/org/example/config/JacksonConfig.java
================
package org.example.config;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Jackson配置类
 * 统一配置日期时间的序列化和反序列化格式
 */
@Configuration
public class JacksonConfig {

    private static final String DATE_TIME_PATTERN = "yyyy-MM-dd HH:mm:ss";
    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(DATE_TIME_PATTERN);

    @Bean
    @Primary
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        
        // 注册Java时间模块
        JavaTimeModule javaTimeModule = new JavaTimeModule();
        
        // 配置LocalDateTime的序列化和反序列化
        javaTimeModule.addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(DATE_TIME_FORMATTER));
        javaTimeModule.addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(DATE_TIME_FORMATTER));
        
        mapper.registerModule(javaTimeModule);
        
        // 禁用将日期写为时间戳的功能
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        
        // 忽略未知字段，避免反序列化时出错
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        
        return mapper;
    }
}

================
File: eleme-user-service/src/main/java/org/example/controller/UserController.java
================
package org.example.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
import org.example.dto.R;
import org.example.dto.UserLoginDTO;
import org.example.dto.UserRegisterDTO;
import org.example.dto.UserUpdateDTO;
import org.example.entity.User;
import org.example.service.EmailService;
import org.example.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

/**
 * 用户控制器
 */
@Slf4j
@RestController
@RequestMapping("/user")
@Tag(name = "用户管理", description = "用户注册、登录、个人信息管理")
@Validated
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private EmailService emailService;

    /**
     * 用户登录
     */
    @PostMapping("/login")
    @Operation(summary = "用户登录", description = "通过手机号和密码登录")
    public R<Object> login(@Valid @RequestBody UserLoginDTO loginDTO) {
        log.info("用户登录请求: {}", loginDTO.getPhoneNumber());
        return userService.login(loginDTO);
    }

    /**
     * 用户注册
     */
    @PostMapping("/register")
    @Operation(summary = "用户注册", description = "用户注册新账号")
    public R<Object> register(@Valid @RequestBody UserRegisterDTO registerDTO) {
        log.info("用户注册请求: {}", registerDTO.getPhoneNumber());
        return userService.register(registerDTO);
    }

    /**
     * 发送邮箱验证码
     */
    @PostMapping("/sendVerificationCode")
    @Operation(summary = "发送邮箱验证码", description = "向指定邮箱发送验证码")
    public R<Object> sendVerificationCode(@RequestBody Map<String, String> request) {
        String email = request.get("email");
        log.info("发送邮箱验证码请求: {}", email);
        
        if (email == null || email.trim().isEmpty()) {
            return R.error("邮箱不能为空");
        }

        // 检查邮箱格式
        if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            return R.error("邮箱格式不正确");
        }

        // 检查邮箱是否已注册
        if (userService.isEmailRegistered(email)) {
            return R.error("该邮箱已被注册");
        }

        boolean success = emailService.sendVerificationCode(email);
        if (success) {
            return R.success("验证码已发送到您的邮箱，请注意查收");
        } else {
            return R.error("验证码发送失败，请稍后重试");
        }
    }

    /**
     * 获取用户信息
     */
    @GetMapping("/info")
    @Operation(summary = "获取用户信息", description = "获取当前登录用户的详细信息")
    public R<User> getUserInfo(
            @Parameter(description = "用户手机号，从请求头获取") 
            @RequestHeader("X-User-Id") String phoneNumber) {
        log.info("获取用户信息请求: {}", phoneNumber);
        return userService.getUserByPhoneNumber(phoneNumber);
    }

    /**
     * 更新用户信息
     */
    @PutMapping("/update")
    @Operation(summary = "更新用户信息", description = "更新用户个人信息")
    public R<Object> updateUser(
            @Parameter(description = "用户手机号，从请求头获取") 
            @RequestHeader("X-User-Id") String phoneNumber,
            @Valid @RequestBody UserUpdateDTO updateDTO) {
        log.info("更新用户信息请求: {}", phoneNumber);
        return userService.updateUser(phoneNumber, updateDTO);
    }

    /**
     * 修改密码
     */
    @PutMapping("/changePassword")
    @Operation(summary = "修改密码", description = "修改用户登录密码")
    public R<Object> changePassword(
            @Parameter(description = "用户手机号，从请求头获取") 
            @RequestHeader("X-User-Id") String phoneNumber,
            @RequestBody Map<String, String> request) {
        log.info("修改密码请求: {}", phoneNumber);
        
        String oldPassword = request.get("oldPassword");
        String newPassword = request.get("newPassword");
        
        if (oldPassword == null || newPassword == null) {
            return R.error("旧密码和新密码不能为空");
        }
        
        return userService.changePassword(phoneNumber, oldPassword, newPassword);
    }

    /**
     * 检查手机号是否已注册
     */
    @GetMapping("/checkPhone")
    @Operation(summary = "检查手机号", description = "检查手机号是否已注册")
    public R<Object> checkPhoneNumber(@Parameter(description = "手机号") @RequestParam String phoneNumber) {
        log.info("检查手机号请求: {}", phoneNumber);
        
        if (phoneNumber == null || phoneNumber.trim().isEmpty()) {
            return R.error("手机号不能为空");
        }
        
        boolean registered = userService.isPhoneNumberRegistered(phoneNumber);
        return R.success("检查完成", Map.of("registered", registered));
    }

    /**
     * 检查邮箱是否已注册
     */
    @GetMapping("/checkEmail")
    @Operation(summary = "检查邮箱", description = "检查邮箱是否已注册")
    public R<Object> checkEmail(@Parameter(description = "邮箱") @RequestParam String email) {
        log.info("检查邮箱请求: {}", email);
        
        if (email == null || email.trim().isEmpty()) {
            return R.error("邮箱不能为空");
        }
        
        boolean registered = userService.isEmailRegistered(email);
        return R.success("检查完成", Map.of("registered", registered));
    }

    /**
     * 根据手机号获取用户信息（供其他服务调用）
     */
    @GetMapping("/phone/{phone}")
    @Operation(summary = "根据手机号获取用户信息", description = "根据手机号获取用户信息（供其他服务调用）")
    public R<User> getUserByPhone(
            @Parameter(description = "用户手机号", required = true) 
            @PathVariable("phone") String phone) {
        log.info("根据手机号获取用户信息: {}", phone);
        return userService.getUserByPhoneNumber(phone);
    }

    /**
     * 健康检查
     */
    @GetMapping("/health")
    @Operation(summary = "健康检查", description = "服务健康状态检查")
    public R<Object> health() {
        return R.success("用户服务运行正常");
    }
}

================
File: eleme-user-service/src/main/java/org/example/dto/UserLoginDTO.java
================
package org.example.dto;

import lombok.Data;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import java.io.Serializable;

/**
 * 用户登录DTO
 */
@Data
public class UserLoginDTO implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 手机号
     */
    @NotBlank(message = "手机号不能为空")
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    private String phoneNumber;

    /**
     * 密码
     */
    @NotBlank(message = "密码不能为空")
    private String password;

    /**
     * 验证码ID（如果需要验证码）
     */
    private String captchaId;

    /**
     * 验证码值（如果需要验证码）
     */
    private String captchaValue;
}

================
File: eleme-user-service/src/main/java/org/example/dto/UserRegisterDTO.java
================
package org.example.dto;

import lombok.Data;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import java.io.Serializable;

/**
 * 用户注册DTO
 */
@Data
public class UserRegisterDTO implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 手机号
     */
    @NotBlank(message = "手机号不能为空")
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    private String phoneNumber;

    /**
     * 密码
     */
    @NotBlank(message = "密码不能为空")
    @Size(min = 6, max = 20, message = "密码长度必须在6-20位之间")
    private String password;

    /**
     * 确认密码
     */
    @NotBlank(message = "确认密码不能为空")
    private String confirmPassword;

    /**
     * 用户姓名
     */
    @NotBlank(message = "用户姓名不能为空")
    @Size(max = 20, message = "用户姓名长度不能超过20位")
    private String name;

    /**
     * 邮箱
     */
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    private String email;

    /**
     * 性别
     */
    @Pattern(regexp = "^(男|女)$", message = "性别只能为男或女")
    private String gender;

    /**
     * 邮箱验证码
     */
    @NotBlank(message = "邮箱验证码不能为空")
    private String verifyCode;
}

================
File: eleme-user-service/src/main/java/org/example/dto/UserUpdateDTO.java
================
package org.example.dto;

import lombok.Data;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import java.io.Serializable;

/**
 * 用户信息更新DTO
 */
@Data
public class UserUpdateDTO implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 用户姓名
     */
    @Size(max = 20, message = "用户姓名长度不能超过20位")
    private String name;

    /**
     * 邮箱
     */
    @Email(message = "邮箱格式不正确")
    private String email;

    /**
     * 性别
     */
    @Pattern(regexp = "^(男|女)$", message = "性别只能为男或女")
    private String gender;

    /**
     * 头像URL
     */
    private String avatar;
}

================
File: eleme-user-service/src/main/java/org/example/mapper/UserMapper.java
================
package org.example.mapper;

import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.example.entity.User;

/**
 * 用户Mapper接口
 */
@Mapper
public interface UserMapper extends BaseMapper<User> {

    /**
     * 根据手机号和密码查询用户
     *
     * @param phoneNumber 手机号
     * @param password 密码
     * @return 用户信息
     */
    @Select("SELECT * FROM user WHERE phone_number = #{phoneNumber} AND password = #{password} AND status = 1")
    User findByPhoneNumberAndPassword(@Param("phoneNumber") String phoneNumber, 
                                     @Param("password") String password);

    /**
     * 根据手机号查询用户
     *
     * @param phoneNumber 手机号
     * @return 用户信息
     */
    @Select("SELECT * FROM user WHERE phone_number = #{phoneNumber} AND status = 1")
    User findByPhoneNumber(@Param("phoneNumber") String phoneNumber);

    /**
     * 检查手机号是否已存在
     *
     * @param phoneNumber 手机号
     * @return 是否存在
     */
    @Select("SELECT COUNT(1) > 0 FROM user WHERE phone_number = #{phoneNumber}")
    boolean existsByPhoneNumber(@Param("phoneNumber") String phoneNumber);

    /**
     * 根据邮箱查询用户
     *
     * @param email 邮箱
     * @return 用户信息
     */
    @Select("SELECT * FROM user WHERE email = #{email} AND status = 1")
    User findByEmail(@Param("email") String email);

    /**
     * 检查邮箱是否已存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    @Select("SELECT COUNT(1) > 0 FROM user WHERE email = #{email}")
    boolean existsByEmail(@Param("email") String email);
}

================
File: eleme-user-service/src/main/java/org/example/service/impl/EmailServiceImpl.java
================
package org.example.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.example.constants.CommonConstants;
import org.example.service.EmailService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import java.util.Random;
import java.util.concurrent.TimeUnit;

/**
 * 邮件服务实现类
 */
@Slf4j
@Service
public class EmailServiceImpl implements EmailService {

    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private StringRedisTemplate redisTemplate;

    @Override
    public boolean sendVerificationCode(String email) {
        try {
            // 检查是否频繁发送
            String rateKey = "email_rate:" + email;
            String rateValue = redisTemplate.opsForValue().get(rateKey);
            if (rateValue != null) {
                log.warn("邮箱 {} 发送验证码过于频繁", email);
                return false;
            }

            // 生成6位数验证码
            String code = generateVerificationCode();

            // 发送邮件
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom("org@org6.org");
            message.setTo(email);
            message.setSubject("饿了么注册验证码");
            message.setText(String.format(
                "您好！\n\n" +
                "您正在注册饿了么账号，验证码为：%s\n\n" +
                "验证码有效期为5分钟，请尽快完成验证。\n" +
                "如果不是您本人操作，请忽略此邮件。\n\n" +
                "饿了么团队", code));

            mailSender.send(message);

            // 存储验证码到Redis，5分钟过期
            String codeKey = CommonConstants.EMAIL_CODE_PREFIX + email;
            redisTemplate.opsForValue().set(codeKey, code, CommonConstants.EMAIL_CODE_EXPIRE, TimeUnit.SECONDS);

            // 设置发送频率限制，60秒内不能重复发送
            redisTemplate.opsForValue().set(rateKey, "1", 60, TimeUnit.SECONDS);

            log.info("验证码发送成功到邮箱: {}", email);
            return true;

        } catch (Exception e) {
            log.error("发送邮箱验证码失败: {}", email, e);
            return false;
        }
    }

    @Override
    public boolean verifyCode(String email, String code) {
        try {
            String codeKey = CommonConstants.EMAIL_CODE_PREFIX + email;
            String storedCode = redisTemplate.opsForValue().get(codeKey);

            if (storedCode != null && storedCode.equals(code)) {
                // 验证成功后删除验证码
                redisTemplate.delete(codeKey);
                log.info("邮箱验证码验证成功: {}", email);
                return true;
            }

            log.warn("邮箱验证码验证失败: {}, 输入的验证码: {}", email, code);
            return false;

        } catch (Exception e) {
            log.error("验证邮箱验证码异常: {}", email, e);
            return false;
        }
    }

    /**
     * 生成6位数字验证码
     */
    private String generateVerificationCode() {
        Random random = new Random();
        StringBuilder code = new StringBuilder();
        for (int i = 0; i < 6; i++) {
            code.append(random.nextInt(10));
        }
        return code.toString();
    }
}

================
File: eleme-user-service/src/main/java/org/example/service/impl/UserServiceImpl.java
================
package org.example.service.impl;

import cn.hutool.core.util.StrUtil;
import cn.hutool.crypto.digest.DigestUtil;
import com.alibaba.csp.sentinel.annotation.SentinelResource;
import lombok.extern.slf4j.Slf4j;
import org.example.constants.CommonConstants;
import org.example.dto.R;
import org.example.dto.UserLoginDTO;
import org.example.dto.UserRegisterDTO;
import org.example.dto.UserUpdateDTO;
import org.example.entity.User;
import org.example.mapper.UserMapper;
import org.example.service.EmailService;
import org.example.service.UserService;
import org.example.utils.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * 用户服务实现类
 */
@Slf4j
@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserMapper userMapper;

    @Autowired
    private EmailService emailService;

    @Autowired
    private StringRedisTemplate redisTemplate;

    @Override
    @SentinelResource(value = "user-login", fallback = "loginFallback")
    public R<Object> login(UserLoginDTO loginDTO) {
        try {
            // 检查参数
            if (StrUtil.isBlank(loginDTO.getPhoneNumber()) || StrUtil.isBlank(loginDTO.getPassword())) {
                return R.error(CommonConstants.ERROR_CODE, "手机号和密码不能为空");
            }

            // 验证验证码（如果需要）
            if (StrUtil.isNotBlank(loginDTO.getCaptchaId()) && StrUtil.isNotBlank(loginDTO.getCaptchaValue())) {
                if (!verifyCaptcha(loginDTO.getCaptchaId(), loginDTO.getCaptchaValue())) {
                    return R.error(CommonConstants.ERROR_CODE, "验证码错误");
                }
            }

            // 密码加密
            String encryptedPassword = DigestUtil.md5Hex(loginDTO.getPassword());

            // 查询用户
            User user = userMapper.findByPhoneNumberAndPassword(loginDTO.getPhoneNumber(), encryptedPassword);
            if (user == null) {
                log.warn("用户登录失败，手机号或密码错误: {}", loginDTO.getPhoneNumber());
                return R.error(CommonConstants.ERROR_CODE, "手机号或密码错误");
            }

            // 检查用户状态
            if (user.getStatus() != CommonConstants.USER_STATUS_NORMAL) {
                return R.error(CommonConstants.ERROR_CODE, "用户已被禁用");
            }

            // 生成JWT Token
            String token = JwtUtil.generateUserToken(user.getPhoneNumber());

            // 缓存用户信息到Redis
            String userKey = CommonConstants.USER_TOKEN_PREFIX + user.getPhoneNumber();
            redisTemplate.opsForValue().set(userKey, token, CommonConstants.TOKEN_EXPIRE, java.util.concurrent.TimeUnit.SECONDS);

            // 构造返回数据
            Map<String, Object> loginResult = new HashMap<>();
            loginResult.put("token", token);
            
            // 用户信息（隐藏敏感信息）
            Map<String, Object> userInfo = new HashMap<>();
            userInfo.put("phoneNumber", user.getPhoneNumber());
            userInfo.put("name", user.getName());
            userInfo.put("email", user.getEmail());
            userInfo.put("gender", user.getGender());
            userInfo.put("avatar", user.getAvatar());
            loginResult.put("user", userInfo);

            log.info("用户登录成功: {}", user.getPhoneNumber());
            return R.success("登录成功", loginResult);

        } catch (Exception e) {
            log.error("用户登录异常", e);
            return R.error("登录失败，请稍后重试");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    @SentinelResource(value = "user-register", fallback = "registerFallback")
    public R<Object> register(UserRegisterDTO registerDTO) {
        try {
            // 检查密码一致性
            if (!registerDTO.getPassword().equals(registerDTO.getConfirmPassword())) {
                return R.error(CommonConstants.ERROR_CODE, "两次密码不一致");
            }

            // 检查手机号是否已注册
            if (userMapper.existsByPhoneNumber(registerDTO.getPhoneNumber())) {
                return R.error(CommonConstants.ERROR_CODE, "该手机号已被注册");
            }

            // 检查邮箱是否已注册
            if (userMapper.existsByEmail(registerDTO.getEmail())) {
                return R.error(CommonConstants.ERROR_CODE, "该邮箱已被注册");
            }

            // 验证邮箱验证码
            if (!emailService.verifyCode(registerDTO.getEmail(), registerDTO.getVerifyCode())) {
                return R.error(CommonConstants.ERROR_CODE, "邮箱验证码错误或已过期");
            }

            // 创建用户
            User user = new User();
            user.setPhoneNumber(registerDTO.getPhoneNumber());
            user.setPassword(DigestUtil.md5Hex(registerDTO.getPassword())); // MD5加密
            user.setName(registerDTO.getName());
            user.setEmail(registerDTO.getEmail());
            user.setGender(registerDTO.getGender());
            user.setStatus(CommonConstants.USER_STATUS_NORMAL);
            user.setCreatedAt(LocalDateTime.now());
            user.setUpdatedAt(LocalDateTime.now());

            int result = userMapper.insert(user);
            if (result > 0) {
                log.info("用户注册成功: {}", user.getPhoneNumber());
                return R.success("注册成功");
            } else {
                return R.error("注册失败");
            }

        } catch (Exception e) {
            log.error("用户注册异常", e);
            return R.error("注册失败，请稍后重试");
        }
    }

    @Override
    @SentinelResource(value = "get-user", fallback = "getUserFallback")
    public R<User> getUserByPhoneNumber(String phoneNumber) {
        try {
            if (StrUtil.isBlank(phoneNumber)) {
                return R.error(CommonConstants.ERROR_CODE, "手机号不能为空");
            }

            User user = userMapper.findByPhoneNumber(phoneNumber);
            if (user == null) {
                return R.error(CommonConstants.NOT_FOUND_CODE, "用户不存在");
            }

            // 隐藏敏感信息
            user.setPassword(null);

            return R.success(user);

        } catch (Exception e) {
            log.error("获取用户信息异常", e);
            return R.error("获取用户信息失败");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    @SentinelResource(value = "update-user", fallback = "updateUserFallback")
    public R<Object> updateUser(String phoneNumber, UserUpdateDTO updateDTO) {
        try {
            if (StrUtil.isBlank(phoneNumber)) {
                return R.error(CommonConstants.ERROR_CODE, "手机号不能为空");
            }

            User user = userMapper.findByPhoneNumber(phoneNumber);
            if (user == null) {
                return R.error(CommonConstants.NOT_FOUND_CODE, "用户不存在");
            }

            // 检查邮箱是否被其他用户使用
            if (StrUtil.isNotBlank(updateDTO.getEmail()) && !updateDTO.getEmail().equals(user.getEmail())) {
                if (userMapper.existsByEmail(updateDTO.getEmail())) {
                    return R.error(CommonConstants.ERROR_CODE, "该邮箱已被其他用户使用");
                }
            }

            // 更新用户信息
            if (StrUtil.isNotBlank(updateDTO.getName())) {
                user.setName(updateDTO.getName());
            }
            if (StrUtil.isNotBlank(updateDTO.getEmail())) {
                user.setEmail(updateDTO.getEmail());
            }
            if (StrUtil.isNotBlank(updateDTO.getGender())) {
                user.setGender(updateDTO.getGender());
            }
            if (StrUtil.isNotBlank(updateDTO.getAvatar())) {
                user.setAvatar(updateDTO.getAvatar());
            }
            user.setUpdatedAt(LocalDateTime.now());

            int result = userMapper.updateById(user);
            if (result > 0) {
                log.info("用户信息更新成功: {}", phoneNumber);
                return R.success("更新成功");
            } else {
                return R.error("更新失败");
            }

        } catch (Exception e) {
            log.error("更新用户信息异常", e);
            return R.error("更新失败，请稍后重试");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    @SentinelResource(value = "change-password", fallback = "changePasswordFallback")
    public R<Object> changePassword(String phoneNumber, String oldPassword, String newPassword) {
        try {
            if (StrUtil.isBlank(phoneNumber) || StrUtil.isBlank(oldPassword) || StrUtil.isBlank(newPassword)) {
                return R.error(CommonConstants.ERROR_CODE, "参数不能为空");
            }

            if (newPassword.length() < 6 || newPassword.length() > 20) {
                return R.error(CommonConstants.ERROR_CODE, "新密码长度必须在6-20位之间");
            }

            // 验证旧密码
            String encryptedOldPassword = DigestUtil.md5Hex(oldPassword);
            User user = userMapper.findByPhoneNumberAndPassword(phoneNumber, encryptedOldPassword);
            if (user == null) {
                return R.error(CommonConstants.ERROR_CODE, "旧密码错误");
            }

            // 更新密码
            user.setPassword(DigestUtil.md5Hex(newPassword));
            user.setUpdatedAt(LocalDateTime.now());

            int result = userMapper.updateById(user);
            if (result > 0) {
                // 删除Redis中的Token，强制重新登录
                String userKey = CommonConstants.USER_TOKEN_PREFIX + phoneNumber;
                redisTemplate.delete(userKey);

                log.info("用户密码修改成功: {}", phoneNumber);
                return R.success("密码修改成功，请重新登录");
            } else {
                return R.error("密码修改失败");
            }

        } catch (Exception e) {
            log.error("修改密码异常", e);
            return R.error("密码修改失败，请稍后重试");
        }
    }

    @Override
    public boolean isPhoneNumberRegistered(String phoneNumber) {
        return userMapper.existsByPhoneNumber(phoneNumber);
    }

    @Override
    public boolean isEmailRegistered(String email) {
        return userMapper.existsByEmail(email);
    }

    /**
     * 验证验证码
     */
    private boolean verifyCaptcha(String captchaId, String captchaValue) {
        String key = CommonConstants.CAPTCHA_PREFIX + captchaId;
        String storedValue = redisTemplate.opsForValue().get(key);
        if (storedValue != null && storedValue.equalsIgnoreCase(captchaValue)) {
            redisTemplate.delete(key); // 验证成功后删除
            return true;
        }
        return false;
    }

    // Sentinel 降级方法
    public R<Object> loginFallback(UserLoginDTO loginDTO, Throwable ex) {
        log.error("用户登录服务降级", ex);
        return R.error("登录服务暂时不可用，请稍后重试");
    }

    public R<Object> registerFallback(UserRegisterDTO registerDTO, Throwable ex) {
        log.error("用户注册服务降级", ex);
        return R.error("注册服务暂时不可用，请稍后重试");
    }

    public R<User> getUserFallback(String phoneNumber, Throwable ex) {
        log.error("获取用户信息服务降级", ex);
        return R.error("获取用户信息服务暂时不可用");
    }

    public R<Object> updateUserFallback(String phoneNumber, UserUpdateDTO updateDTO, Throwable ex) {
        log.error("更新用户信息服务降级", ex);
        return R.error("更新用户信息服务暂时不可用");
    }

    public R<Object> changePasswordFallback(String phoneNumber, String oldPassword, String newPassword, Throwable ex) {
        log.error("修改密码服务降级", ex);
        return R.error("修改密码服务暂时不可用");
    }
}

================
File: eleme-user-service/src/main/java/org/example/service/EmailService.java
================
package org.example.service;

/**
 * 邮件服务接口
 */
public interface EmailService {

    /**
     * 发送邮箱验证码
     *
     * @param email 邮箱地址
     * @return 是否发送成功
     */
    boolean sendVerificationCode(String email);

    /**
     * 验证邮箱验证码
     *
     * @param email 邮箱地址
     * @param code 验证码
     * @return 是否验证成功
     */
    boolean verifyCode(String email, String code);
}

================
File: eleme-user-service/src/main/java/org/example/service/UserService.java
================
package org.example.service;

import org.example.dto.R;
import org.example.dto.UserLoginDTO;
import org.example.dto.UserRegisterDTO;
import org.example.dto.UserUpdateDTO;
import org.example.entity.User;

/**
 * 用户服务接口
 */
public interface UserService {

    /**
     * 用户登录
     *
     * @param loginDTO 登录信息
     * @return 登录结果
     */
    R<Object> login(UserLoginDTO loginDTO);

    /**
     * 用户注册
     *
     * @param registerDTO 注册信息
     * @return 注册结果
     */
    R<Object> register(UserRegisterDTO registerDTO);

    /**
     * 根据手机号获取用户信息
     *
     * @param phoneNumber 手机号
     * @return 用户信息
     */
    R<User> getUserByPhoneNumber(String phoneNumber);

    /**
     * 更新用户信息
     *
     * @param phoneNumber 手机号
     * @param updateDTO 更新信息
     * @return 更新结果
     */
    R<Object> updateUser(String phoneNumber, UserUpdateDTO updateDTO);

    /**
     * 修改密码
     *
     * @param phoneNumber 手机号
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     * @return 修改结果
     */
    R<Object> changePassword(String phoneNumber, String oldPassword, String newPassword);

    /**
     * 检查手机号是否已注册
     *
     * @param phoneNumber 手机号
     * @return 是否已注册
     */
    boolean isPhoneNumberRegistered(String phoneNumber);

    /**
     * 检查邮箱是否已注册
     *
     * @param email 邮箱
     * @return 是否已注册
     */
    boolean isEmailRegistered(String email);
}

================
File: eleme-user-service/src/main/java/org/example/UserServiceApplication.java
================
package org.example;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

/**
 * 用户服务启动类
 */
@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
@MapperScan("org.example.mapper")
public class UserServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(UserServiceApplication.class, args);
    }
}

================
File: eleme-user-service/src/main/resources/application.yml
================
server:
  port: 8001

spring:
  application:
    name: eleme-user-service
  
  config:
    import: "optional:nacos:eleme-user-service.yml"
  
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: public
        group: DEFAULT_GROUP
        # 禁用认证
        username: nacos
        password: nacos
      config:
        server-addr: localhost:8848
        file-extension: yml
        namespace: public
        group: DEFAULT_GROUP
        username: nacos
        password: nacos
        shared-configs:
          - data-id: eleme-user-service.yml
            group: DEFAULT_GROUP
            refresh: true
    
    sentinel:
      transport:
        dashboard: localhost:8080
        port: 8721
      eager: true
      log:
        dir: logs/sentinel
      # 暂时注释掉datasource配置，等待依赖问题解决
      # datasource:
      #   ds1:
      #     nacos:
      #       server-addr: localhost:8848
      #       dataId: user-service-flow-rules
      #       groupId: SENTINEL_GROUP
      #       rule-type: flow
      #   ds2:
      #     nacos:
      #       server-addr: localhost:8848
      #       dataId: user-service-degraded-rules
      #       groupId: SENTINEL_GROUP
      #       rule-type: degrade

  # 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/eleme_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false&allowPublicKeyRetrieval=true
    username: eleme
    password: eleme123
    druid:
      initial-size: 5
      min-idle: 5
      max-active: 20
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      filter:
        stat:
          enabled: true
          log-slow-sql: true
          slow-sql-millis: 2000
          merge-sql: true
        wall:
          enabled: true
          config:
            multi-statement-allow: true

  # Redis配置
  redis:
    host: localhost
    port: 6379
    password: redis123
    database: 0
    jedis:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
    timeout: 3000ms

  # 邮件配置
  mail:
    host: smtp.exmail.qq.com
    port: 465
    username: org@org6.org
    password: JM20040202hi10
    properties:
      mail:
        smtp:
          auth: true
          ssl:
            enable: true
          socketFactory:
            class: javax.net.ssl.SSLSocketFactory
            port: 465

# MyBatis Plus 配置
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
  global-config:
    db-config:
      id-type: auto
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
  mapper-locations: classpath*:/mapper/**/*.xml

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}

# Swagger配置
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  info:
    title: 饿了么用户服务API
    description: 用户注册、登录、个人信息管理
    version: 1.0.0
    contact:
      name: 开发团队
      email: dev@eleme.com

# 日志配置
logging:
  level:
    org.example: DEBUG
    com.baomidou.mybatisplus: DEBUG
  file:
    name: logs/user-service.log
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

================
File: eleme-user-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>eleme-user-service</artifactId>
    <packaging>jar</packaging>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Nacos 服务发现 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!-- Nacos 配置中心 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!-- Spring Cloud OpenFeign -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

        <!-- Spring Cloud LoadBalancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>

        <!-- Sentinel 熔断降级 -->
        <!--
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>
        -->

        <!-- MySQL 驱动 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
        </dependency>

        <!-- MyBatis Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>

        <!-- Druid 数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
        </dependency>

        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- 邮件发送 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>

        <!-- 公共模块 -->
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>eleme-common</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- Hutool 工具包 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <!-- FastJSON -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>

        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

================
File: infrastructure/elk/elasticsearch/config/elasticsearch.yml
================
cluster.name: "eleme-cluster"
node.name: "eleme-node-1"
node.master: true
node.data: true

network.host: 0.0.0.0
http.port: 9200
transport.tcp.port: 9300

discovery.type: single-node

# 禁用安全特性 (开发环境)
xpack.security.enabled: false
xpack.monitoring.enabled: true
xpack.watcher.enabled: false
xpack.ml.enabled: false

# 内存设置
bootstrap.memory_lock: true

# 索引设置
action.destructive_requires_name: true

# 日志设置
logger.org.elasticsearch.discovery: INFO
logger.org.elasticsearch.cluster.service: INFO

# 线程池设置
thread_pool.write.queue_size: 1000
thread_pool.search.queue_size: 1000

# 自动创建索引
action.auto_create_index: true

================
File: infrastructure/elk/filebeat/config/filebeat.yml
================
filebeat.inputs:
  # 用户服务日志
  - type: log
    enabled: true
    paths:
      - /var/log/eleme/user-service/*.log
    fields:
      service: user-service
      environment: dev
    fields_under_root: true
    multiline.pattern: '^\d{4}-\d{2}-\d{2}'
    multiline.negate: true
    multiline.match: after

  # 商家服务日志
  - type: log
    enabled: true
    paths:
      - /var/log/eleme/business-service/*.log
    fields:
      service: business-service
      environment: dev
    fields_under_root: true
    multiline.pattern: '^\d{4}-\d{2}-\d{2}'
    multiline.negate: true
    multiline.match: after

  # 食物服务日志
  - type: log
    enabled: true
    paths:
      - /var/log/eleme/food-service/*.log
    fields:
      service: food-service
      environment: dev
    fields_under_root: true
    multiline.pattern: '^\d{4}-\d{2}-\d{2}'
    multiline.negate: true
    multiline.match: after

  # 订单服务日志
  - type: log
    enabled: true
    paths:
      - /var/log/eleme/order-service/*.log
    fields:
      service: order-service
      environment: dev
    fields_under_root: true
    multiline.pattern: '^\d{4}-\d{2}-\d{2}'
    multiline.negate: true
    multiline.match: after

  # 支付服务日志
  - type: log
    enabled: true
    paths:
      - /var/log/eleme/payment-service/*.log
    fields:
      service: payment-service
      environment: dev
    fields_under_root: true
    multiline.pattern: '^\d{4}-\d{2}-\d{2}'
    multiline.negate: true
    multiline.match: after

  # 通知服务日志
  - type: log
    enabled: true
    paths:
      - /var/log/eleme/notification-service/*.log
    fields:
      service: notification-service
      environment: dev
    fields_under_root: true
    multiline.pattern: '^\d{4}-\d{2}-\d{2}'
    multiline.negate: true
    multiline.match: after

  # 验证码服务日志
  - type: log
    enabled: true
    paths:
      - /var/log/eleme/captcha-service/*.log
    fields:
      service: captcha-service
      environment: dev
    fields_under_root: true
    multiline.pattern: '^\d{4}-\d{2}-\d{2}'
    multiline.negate: true
    multiline.match: after

  # 网关服务日志
  - type: log
    enabled: true
    paths:
      - /var/log/eleme/gateway/*.log
    fields:
      service: gateway
      environment: dev
    fields_under_root: true
    multiline.pattern: '^\d{4}-\d{2}-\d{2}'
    multiline.negate: true
    multiline.match: after

  # 监控服务日志
  - type: log
    enabled: true
    paths:
      - /var/log/eleme/monitor/*.log
    fields:
      service: monitor
      environment: dev
    fields_under_root: true
    multiline.pattern: '^\d{4}-\d{2}-\d{2}'
    multiline.negate: true
    multiline.match: after

# 处理器
processors:
  - add_host_metadata:
      when.not.contains.tags: forwarded
  - add_cloud_metadata: ~
  - add_docker_metadata: ~

# 输出到Logstash
output.logstash:
  hosts: ["logstash:5044"]
  compression_level: 3
  bulk_max_size: 1024
  timeout: 30s

# 日志设置
logging.level: info
logging.to_files: true
logging.files:
  path: /var/log/filebeat
  name: filebeat
  keepfiles: 7
  permissions: 0644

# 监控设置
monitoring.enabled: true
monitoring.elasticsearch:
  hosts: ["http://elasticsearch:9200"]

# 设置名称
name: eleme-filebeat

# 标签
tags: ["eleme", "microservice", "dev"]

================
File: infrastructure/elk/kibana/config/kibana.yml
================
server.name: "eleme-kibana"
server.host: "0.0.0.0"
server.port: 5601
server.publicBaseUrl: "http://localhost:5601"

elasticsearch.hosts: ["http://elasticsearch:9200"]
elasticsearch.requestTimeout: 30000
elasticsearch.shardTimeout: 30000

# 国际化设置
i18n.locale: "zh-CN"

# 使用默认日志配置

# 监控设置
monitoring.ui.container.elasticsearch.enabled: true
xpack.monitoring.enabled: true
xpack.monitoring.elasticsearch.hosts: ["http://elasticsearch:9200"]

# 默认索引模式
kibana.index: ".kibana"
kibana.defaultAppId: "discover"

# 安全设置 (开发环境)
xpack.security.enabled: false
xpack.encryptedSavedObjects.enabled: false

# 图表设置
map.includeElasticMapsService: false
map.proxyElasticMapsServiceInMaps: false

# 时间字段
timelion.enabled: true

# 保存的对象
savedObjects.maxImportPayloadBytes: 26214400

# 可视化设置
visualization.colorMapping: {}

# 控制台设置
console.enabled: true
console.ui.enabled: true

================
File: infrastructure/elk/logstash/config/logstash.yml
================
http.host: "0.0.0.0"
xpack.monitoring.enabled: true
xpack.monitoring.elasticsearch.hosts: ["http://elasticsearch:9200"]

# 管道配置
pipeline.ordered: auto
pipeline.workers: 2
pipeline.batch.size: 125
pipeline.batch.delay: 50

# 日志配置
log.level: info
path.logs: /var/log/logstash

# 配置重载
config.reload.automatic: true
config.reload.interval: 3s

# 死信队列
dead_letter_queue.enable: true
dead_letter_queue.max_bytes: 1024mb

# 节点配置
node.name: eleme-logstash

================
File: infrastructure/elk/logstash/pipeline/logstash.conf
================
input {
  # 从Filebeat接收日志
  beats {
    port => 5044
  }
  
  # 从TCP接收日志
  tcp {
    port => 5000
    codec => json_lines
  }
  
  # 从UDP接收日志
  udp {
    port => 5001
    codec => json_lines
  }
  
  # 从HTTP接收日志
  http {
    port => 5002
    codec => json
  }
}

filter {
  # 解析Spring Boot应用日志
  if [fields][service] {
    mutate {
      add_field => { "service_name" => "%{[fields][service]}" }
    }
  }
  
  # 解析JSON格式日志
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # 解析Spring Boot日志格式
  grok {
    match => { 
      "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:level} \[%{DATA:logger}\] - %{GREEDYDATA:log_message}"
    }
  }
  
  # 时间戳处理
  date {
    match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss" ]
    target => "@timestamp"
  }
  
  # 添加标签
  if [level] == "ERROR" {
    mutate {
      add_tag => [ "error" ]
    }
  }
  
  if [level] == "WARN" {
    mutate {
      add_tag => [ "warning" ]
    }
  }
  
  # 提取异常信息
  if [log_message] =~ /Exception|Error/ {
    mutate {
      add_field => { "has_exception" => "true" }
    }
  }
  
  # 提取HTTP信息
  if [log_message] =~ /HTTP/ {
    grok {
      match => { 
        "log_message" => "%{WORD:http_method} %{URIPATH:http_path} HTTP/%{NUMBER:http_version} %{NUMBER:http_status}"
      }
    }
  }
  
  # 清理字段
  mutate {
    remove_field => [ "host", "agent", "ecs" ]
  }
}

output {
  # 输出到Elasticsearch
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "eleme-logs-%{+YYYY.MM.dd}"
    manage_template => false
  }
  
  # 错误日志单独存储
  if "error" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "eleme-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # 控制台输出 (开发环境)
  stdout {
    codec => rubydebug
  }
}

================
File: infrastructure/elk/docker-compose.yml
================
version: '3.8'

services:
  # Elasticsearch
  elasticsearch:
    image: elasticsearch:7.17.0
    platform: linux/amd64
    container_name: eleme-elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - xpack.ml.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elk

  # Logstash
  logstash:
    image: logstash:7.17.0
    platform: linux/amd64
    container_name: eleme-logstash
    depends_on:
      - elasticsearch
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5001:5000"
      - "5044:5044"
    networks:
      - elk

  # Kibana
  kibana:
    image: kibana:7.17.0
    platform: linux/amd64
    container_name: eleme-kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    networks:
      - elk

  # Filebeat (可选，用于收集日志文件)
  filebeat:
    image: elastic/filebeat:7.17.0
    platform: linux/amd64
    container_name: eleme-filebeat
    user: root
    depends_on:
      - elasticsearch
      - logstash
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ../logs:/var/log/eleme
      - filebeat-data:/var/log/filebeat
    networks:
      - elk
    environment:
      - strict.perms=false

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch-data:
    driver: local 
  filebeat-data:
    driver: local

================
File: infrastructure/mysql/init/01-init-database.sql
================
-- 创建 nacos 配置数据库
CREATE DATABASE IF NOT EXISTS nacos_config CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;

-- 创建 nacos 用户
CREATE USER IF NOT EXISTS 'nacos'@'%' IDENTIFIED BY 'nacos123';
GRANT ALL PRIVILEGES ON nacos_config.* TO 'nacos'@'%';

-- 创建 eleme 业务数据库
CREATE DATABASE IF NOT EXISTS eleme_db CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;

-- 创建 eleme 用户
CREATE USER IF NOT EXISTS 'eleme'@'%' IDENTIFIED BY 'eleme123';
GRANT ALL PRIVILEGES ON eleme_db.* TO 'eleme'@'%';

-- 刷新权限
FLUSH PRIVILEGES;

-- 使用 nacos_config 数据库
USE nacos_config;

-- 创建 nacos 配置表
CREATE TABLE IF NOT EXISTS `config_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) DEFAULT NULL,
  `content` longtext NOT NULL COMMENT 'content',
  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COMMENT 'source user',
  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) DEFAULT NULL,
  `c_use` varchar(64) DEFAULT NULL,
  `effect` varchar(64) DEFAULT NULL,
  `type` varchar(64) DEFAULT NULL,
  `c_schema` text,
  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';

-- 创建其他 nacos 相关表
CREATE TABLE IF NOT EXISTS `config_info_aggr` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) NOT NULL COMMENT 'datum_id',
  `content` longtext NOT NULL COMMENT '内容',
  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段';

-- 使用 eleme_db 数据库创建业务表
USE eleme_db;

-- 创建用户表
CREATE TABLE IF NOT EXISTS `user` (
  `phone_number` varchar(20) NOT NULL COMMENT '用户手机号',
  `password` varchar(255) NOT NULL COMMENT '用户密码',
  `gender` varchar(10) DEFAULT NULL COMMENT '用户性别',
  `name` varchar(100) DEFAULT NULL COMMENT '用户姓名',
  `email` varchar(100) DEFAULT NULL COMMENT '用户邮箱',
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `status` tinyint(1) DEFAULT 1 COMMENT '用户状态(0-禁用,1-正常)',
  `avatar` varchar(255) DEFAULT NULL COMMENT '用户头像URL',
  PRIMARY KEY (`phone_number`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='用户表';

-- 创建商家表
CREATE TABLE IF NOT EXISTS `business` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '商家ID',
  `password` varchar(255) DEFAULT NULL COMMENT '商家登录密码',
  `business_name` varchar(100) NOT NULL COMMENT '商家名称',
  `rating` varchar(10) DEFAULT NULL COMMENT '商家评分',
  `sales` varchar(50) DEFAULT NULL COMMENT '商家销量',
  `distance` varchar(50) DEFAULT NULL COMMENT '距离、时间',
  `min_order` varchar(50) DEFAULT NULL COMMENT '起送价格',
  `comment` varchar(255) DEFAULT NULL COMMENT '评价',
  `discounts` text COMMENT '折扣、满减',
  `discount` varchar(100) DEFAULT NULL COMMENT '店内显示折扣',
  `notice` text COMMENT '公告',
  `sidebar_items` text COMMENT '侧栏元素',
  `img_logo` varchar(255) DEFAULT NULL COMMENT '商家LOGO图片地址',
  `delivery` varchar(50) DEFAULT NULL COMMENT '配送费',
  `type` varchar(50) DEFAULT NULL COMMENT '商家类型',
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `status` tinyint(1) DEFAULT 1 COMMENT '商家状态(0-禁用,1-正常)',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='商家表';

-- 创建食物表
CREATE TABLE IF NOT EXISTS `food` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '食物ID',
  `name` varchar(100) NOT NULL COMMENT '食物名称',
  `text` text COMMENT '食物描述',
  `amount` varchar(50) DEFAULT NULL COMMENT '销量',
  `discount` varchar(100) DEFAULT NULL COMMENT '打折信息',
  `red_price` decimal(10,2) DEFAULT NULL COMMENT '现价',
  `gray_price` varchar(50) DEFAULT NULL COMMENT '原价',
  `business` int(11) NOT NULL COMMENT '所属商家ID',
  `img` varchar(255) DEFAULT NULL COMMENT '食物图片路径',
  `selling` tinyint(1) DEFAULT 1 COMMENT '是否上架(0-下架,1-上架)',
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `status` tinyint(1) DEFAULT 1 COMMENT '食物状态(0-禁用,1-正常)',
  `category` varchar(50) DEFAULT NULL COMMENT '食物分类',
  PRIMARY KEY (`id`),
  KEY `idx_business` (`business`),
  KEY `idx_selling` (`selling`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='食物表';

-- 创建用户订单表
CREATE TABLE IF NOT EXISTS `user_order` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '订单ID',
  `business_id` int(11) NOT NULL COMMENT '商家ID',
  `user_phone` varchar(20) NOT NULL COMMENT '用户手机号',
  `order_list` text NOT NULL COMMENT '订单商品列表',
  `price` decimal(10,2) NOT NULL COMMENT '订单总价',
  `state` tinyint(1) DEFAULT 0 COMMENT '订单状态(0-未支付,1-已支付,2-已完成,3-已取消)',
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `paid_at` datetime DEFAULT NULL COMMENT '支付时间',
  `completed_at` datetime DEFAULT NULL COMMENT '完成时间',
  `delivery_address` text COMMENT '收货地址',
  `receiver_name` varchar(100) DEFAULT NULL COMMENT '收货人姓名',
  `receiver_phone` varchar(20) DEFAULT NULL COMMENT '收货人电话',
  `remark` text COMMENT '备注',
  `delivery_fee` decimal(10,2) DEFAULT 0.00 COMMENT '配送费',
  PRIMARY KEY (`id`),
  KEY `idx_business_id` (`business_id`),
  KEY `idx_user_phone` (`user_phone`),
  KEY `idx_state` (`state`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='用户订单表';

================
File: infrastructure/redis/sentinel1/conf/sentinel.conf
================
port 26379
sentinel monitor mymaster redis-master 6379 2
sentinel auth-pass mymaster redis123
sentinel down-after-milliseconds mymaster 5000
sentinel parallel-syncs mymaster 1
sentinel failover-timeout mymaster 10000
sentinel deny-scripts-reconfig yes

================
File: infrastructure/redis/sentinel2/conf/sentinel.conf
================
port 26379
sentinel monitor mymaster redis-master 6379 2
sentinel auth-pass mymaster redis123
sentinel down-after-milliseconds mymaster 5000
sentinel parallel-syncs mymaster 1
sentinel failover-timeout mymaster 10000
sentinel deny-scripts-reconfig yes

================
File: infrastructure/redis/sentinel3/conf/sentinel.conf
================
port 26379
sentinel monitor mymaster redis-master 6379 2
sentinel auth-pass mymaster redis123
sentinel down-after-milliseconds mymaster 5000
sentinel parallel-syncs mymaster 1
sentinel failover-timeout mymaster 10000
sentinel deny-scripts-reconfig yes

================
File: infrastructure/sentinel/sentinel-rules.json
================
[
  {
    "resource": "com.example.controller.UserController",
    "count": 10,
    "grade": 1,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "warmUpPeriodSec": 10,
    "maxQueueingTimeMs": 500
  },
  {
    "resource": "com.example.controller.BusinessController",
    "count": 20,
    "grade": 1,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "warmUpPeriodSec": 10,
    "maxQueueingTimeMs": 500
  },
  {
    "resource": "com.example.controller.FoodController",
    "count": 30,
    "grade": 1,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "warmUpPeriodSec": 10,
    "maxQueueingTimeMs": 500
  },
  {
    "resource": "com.example.controller.OrderController",
    "count": 15,
    "grade": 1,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "warmUpPeriodSec": 10,
    "maxQueueingTimeMs": 500
  },
  {
    "resource": "com.example.controller.PaymentController",
    "count": 10,
    "grade": 1,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "warmUpPeriodSec": 10,
    "maxQueueingTimeMs": 1000
  },
  {
    "resource": "com.example.controller.NotificationController",
    "count": 25,
    "grade": 1,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "warmUpPeriodSec": 10,
    "maxQueueingTimeMs": 500
  },
  {
    "resource": "com.example.controller.CaptchaController",
    "count": 50,
    "grade": 1,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "warmUpPeriodSec": 10,
    "maxQueueingTimeMs": 200
  },
  {
    "resource": "createOrder",
    "count": 0.5,
    "grade": 0,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "timeWindow": 10,
    "minRequestAmount": 5,
    "slowRatioThreshold": 0.5,
    "statIntervalMs": 1000
  },
  {
    "resource": "processPayment",
    "count": 0.6,
    "grade": 0,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "timeWindow": 15,
    "minRequestAmount": 3,
    "slowRatioThreshold": 0.6,
    "statIntervalMs": 1000
  },
  {
    "resource": "sendEmail",
    "count": 0.4,
    "grade": 0,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "timeWindow": 5,
    "minRequestAmount": 3,
    "slowRatioThreshold": 0.4,
    "statIntervalMs": 1000
  },
  {
    "resource": "generateCaptcha",
    "count": 0.8,
    "grade": 0,
    "limitApp": "default",
    "strategy": 0,
    "controlBehavior": 0,
    "clusterMode": false,
    "timeWindow": 3,
    "minRequestAmount": 5,
    "slowRatioThreshold": 0.8,
    "statIntervalMs": 1000
  }
]

================
File: infrastructure/docker-compose.yml
================
version: '3.8'

services:
  # MySQL 主数据库
  mysql-master:
    image: mysql:latest
    platform: linux/amd64
    container_name: mysql-master
    environment:
      - MYSQL_ROOT_PASSWORD=root123
      - MYSQL_DATABASE=eleme_db
      - MYSQL_USER=eleme
      - MYSQL_PASSWORD=eleme123
    volumes:
      - mysql-master-data:/var/lib/mysql
      - ./mysql/config/my.cnf:/etc/mysql/my.cnf
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - eleme-network

  # Nacos 注册中心
  nacos:
    image: nacos/nacos-server:latest
    platform: linux/amd64
    container_name: nacos-server
    ports:
      - "8848:8080"
      - "9848:9848"
    environment:
      - MODE=standalone
      - JVM_XMS=256m
      - JVM_XMX=256m
      - NACOS_AUTH_ENABLE=false
      - NACOS_AUTH_TOKEN=SecretKey012345678901234567890123456789012345678901234567890123456789
      - NACOS_AUTH_IDENTITY_KEY=serverIdentity
      - NACOS_AUTH_IDENTITY_VALUE=security
      - NACOS_CORE_AUTH_ENABLED=false
      - NACOS_CORE_AUTH_CONSOLE_ENABLED=false
      - NACOS_CORE_AUTH_ADMIN_ENABLED=false
    volumes:
      - ./nacos/logs:/home/nacos/logs
      - ./nacos/data:/home/nacos/data
    networks:
      - eleme-network

  # Redis 缓存
  redis:
    image: redis:latest
    platform: linux/amd64
    container_name: redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    command: ["redis-server", "/etc/redis/redis.conf"]
    networks:
      - eleme-network

  # Sentinel Dashboard
  sentinel-dashboard:
    image: bladex/sentinel-dashboard:latest
    platform: linux/amd64
    container_name: sentinel-dashboard
    ports:
      - "8080:8080"
    environment:
      - JVM_OPTS=-Xmx256m -Xms256m
    networks:
      - eleme-network

networks:
  eleme-network:
    driver: bridge

volumes:
  mysql-master-data:
    driver: local
  redis-data:
    driver: local

================
File: infrastructure/README.md
================
# 饿了么SpringCloud基础设施部署指南

本文档介绍如何部署饿了么SpringCloud系统的基础设施，包括Nacos注册中心、MySQL高可用集群、Redis高可用集群和Sentinel熔断降级组件。

## 架构概述

### 基础组件
- **Nacos**: 注册中心和配置中心
- **MySQL**: 主从复制高可用集群（1主2从）
- **Redis**: 主从复制 + Sentinel高可用集群
- **Sentinel**: 熔断降级和流量控制

### 服务端口分配
- Nacos: 8848, 9848
- MySQL Master: 3306
- MySQL Slave1: 3307
- MySQL Slave2: 3308
- Redis Master: 6379
- Redis Slave1: 6380
- Redis Slave2: 6381
- Redis Sentinel1: 26379
- Redis Sentinel2: 26380
- Redis Sentinel3: 26381
- Sentinel Dashboard: 8080

## 部署步骤

### 1. 准备工作

确保已安装以下软件：
- Docker
- Docker Compose

### 2. 创建目录结构

```bash
mkdir -p elemeSpringCloud/infrastructure
cd elemeSpringCloud/infrastructure

# 创建各组件的数据目录
mkdir -p nacos/{logs,data}
mkdir -p mysql/{master,slave1,slave2}/{data,conf,logs}
mkdir -p mysql/init
mkdir -p redis/{master,slave1,slave2}/{data,conf}
mkdir -p redis/{sentinel1,sentinel2,sentinel3}/conf
```

### 3. 启动基础设施

```bash
# 启动所有服务
docker-compose up -d

# 查看服务状态
docker-compose ps

# 查看日志
docker-compose logs -f [service_name]
```

### 4. 配置MySQL主从复制

#### 4.1 配置主节点

```bash
# 进入MySQL主节点
docker exec -it mysql-master mysql -uroot -proot123

# 创建复制用户
CREATE USER 'replication'@'%' IDENTIFIED BY 'replication123';
GRANT REPLICATION SLAVE ON *.* TO 'replication'@'%';
FLUSH PRIVILEGES;

# 查看主节点状态
SHOW MASTER STATUS;
```

#### 4.2 配置从节点

```bash
# 进入MySQL从节点1
docker exec -it mysql-slave1 mysql -uroot -proot123

# 配置主从复制
CHANGE MASTER TO
  MASTER_HOST='mysql-master',
  MASTER_USER='replication',
  MASTER_PASSWORD='replication123',
  MASTER_AUTO_POSITION=1;

# 启动复制
START SLAVE;

# 查看从节点状态
SHOW SLAVE STATUS\G;
```

对slave2重复相同操作。

### 5. 验证Redis高可用

```bash
# 连接Redis主节点
docker exec -it redis-master redis-cli -a redis123

# 设置测试数据
SET test_key "test_value"

# 连接Redis从节点验证数据同步
docker exec -it redis-slave1 redis-cli -a redis123
GET test_key

# 查看Sentinel状态
docker exec -it redis-sentinel1 redis-cli -p 26379
SENTINEL masters
SENTINEL slaves mymaster
```

### 6. 访问管理界面

- **Nacos控制台**: http://localhost:8848/nacos
  - 用户名: nacos
  - 密码: nacos
  
- **Sentinel Dashboard**: http://localhost:8080
  - 用户名: sentinel
  - 密码: sentinel

## 配置说明

### Nacos配置

Nacos使用MySQL作为数据存储，配置信息如下：
- 数据库: nacos_config
- 用户名: nacos
- 密码: nacos123

### MySQL配置

- **主节点**: server-id=1, 开启binlog
- **从节点**: server-id=2/3, 开启relay-log, 只读模式
- **数据库**: eleme_db
- **用户**: eleme/eleme123

### Redis配置

- **主节点**: 端口6379, 密码redis123
- **从节点**: 端口6380/6381, 从master复制数据
- **Sentinel**: 监控主节点, 自动故障转移

## 数据备份

### MySQL备份

```bash
# 备份所有数据库
docker exec mysql-master mysqldump -uroot -proot123 --all-databases > backup_$(date +%Y%m%d).sql

# 备份指定数据库
docker exec mysql-master mysqldump -uroot -proot123 eleme_db > eleme_db_backup_$(date +%Y%m%d).sql
```

### Redis备份

```bash
# 备份Redis数据
docker exec redis-master redis-cli -a redis123 BGSAVE

# 复制RDB文件
docker cp redis-master:/data/dump.rdb ./redis_backup_$(date +%Y%m%d).rdb
```

## 监控和日志

### 查看日志

```bash
# 查看所有服务日志
docker-compose logs -f

# 查看指定服务日志
docker-compose logs -f nacos
docker-compose logs -f mysql-master
docker-compose logs -f redis-master
```

### 监控指标

- **MySQL**: 主从延迟、连接数、慢查询
- **Redis**: 内存使用率、命中率、连接数
- **Nacos**: 服务注册数量、配置变更频率

## 故障处理

### MySQL故障

```bash
# 检查主从复制状态
docker exec mysql-slave1 mysql -uroot -proot123 -e "SHOW SLAVE STATUS\G"

# 重启复制
docker exec mysql-slave1 mysql -uroot -proot123 -e "STOP SLAVE; START SLAVE;"
```

### Redis故障

```bash
# 查看Sentinel状态
docker exec redis-sentinel1 redis-cli -p 26379 SENTINEL masters

# 手动故障转移
docker exec redis-sentinel1 redis-cli -p 26379 SENTINEL failover mymaster
```

## 扩容说明

### 添加MySQL从节点

1. 修改docker-compose.yml，添加新的从节点配置
2. 启动新节点
3. 配置主从复制

### 添加Redis从节点

1. 修改docker-compose.yml，添加新的从节点配置
2. 启动新节点，自动从主节点同步数据

## 安全配置

### 密码策略

所有组件都配置了密码验证：
- MySQL root密码: root123
- MySQL业务用户密码: eleme123
- Redis密码: redis123
- Nacos密码: nacos123

### 网络隔离

使用Docker自定义网络eleme-network，确保服务间通信安全。

### 防火墙配置

生产环境建议配置防火墙规则：
```bash
# 仅允许内网访问数据库端口
sudo ufw allow from 10.0.0.0/8 to any port 3306
sudo ufw allow from 10.0.0.0/8 to any port 6379

# 允许外网访问管理端口
sudo ufw allow 8848
sudo ufw allow 8080
```

## 性能优化

### MySQL优化

```ini
# mysql/master/conf/my.cnf
[mysqld]
innodb_buffer_pool_size = 1G
innodb_log_file_size = 256M
max_connections = 1000
slow_query_log = 1
long_query_time = 2
```

### Redis优化

```conf
# redis/master/conf/redis.conf
maxmemory 512mb
maxmemory-policy allkeys-lru
save 900 1
save 300 10
save 60 10000
```

## 维护建议

1. **定期备份**: 每天备份MySQL和Redis数据
2. **日志轮转**: 配置日志轮转，防止磁盘空间不足
3. **监控告警**: 设置关键指标的监控告警
4. **定期更新**: 定期更新组件版本，修复安全漏洞
5. **压力测试**: 定期进行压力测试，验证系统稳定性

## 联系方式

如有问题，请联系运维团队或查看相关文档。

================
File: scripts/check-services.sh
================
#!/bin/bash

# 饿了么微服务状态检查脚本
# 使用说明：./check-services.sh

echo "=========================================="
echo "       饿了么微服务状态检查"
echo "=========================================="

# 切换到项目根目录
cd "$(dirname "$0")/.."

echo "1. 基础设施服务状态："
echo "----------------------------------------"

# 检查Nacos
if curl -f http://localhost:8848/ > /dev/null 2>&1; then
    echo "Nacos (8848):              ✓ 正常运行"
else
    echo "Nacos (8848):              ✗ 未运行"
fi

# 检查MySQL
if docker ps | grep mysql-master > /dev/null 2>&1; then
    echo "MySQL (3306):              ✓ 正常运行"
else
    echo "MySQL (3306):              ✗ 未运行"
fi

# 检查Redis
if docker ps | grep redis-server > /dev/null 2>&1; then
    echo "Redis (6379):              ✓ 正常运行"
else
    echo "Redis (6379):              ✗ 未运行"
fi

# 检查Sentinel
if curl -f http://localhost:8080 > /dev/null 2>&1; then
    echo "Sentinel (8080):           ✓ 正常运行"
else
    echo "Sentinel (8080):           ✗ 未运行"
fi

# 检查Elasticsearch
if curl -f http://localhost:9200 > /dev/null 2>&1; then
    echo "Elasticsearch (9200):      ✓ 正常运行"
else
    echo "Elasticsearch (9200):      ✗ 未运行"
fi

# 检查Kibana
if curl -f http://localhost:5601 > /dev/null 2>&1; then
    echo "Kibana (5601):             ✓ 正常运行"
else
    echo "Kibana (5601):             ✗ 未运行"
fi

echo ""
echo "2. 微服务状态："
echo "----------------------------------------"

# 检查微服务
services=("eleme-gateway:8888" "eleme-user-service:8001" "eleme-business-service:8002" 
          "eleme-food-service:8003" "eleme-order-service:8004" "eleme-payment-service:8005" 
          "eleme-notification-service:8006" "eleme-captcha-service:8007" "eleme-monitor:8009")

for service_port in "${services[@]}"; do
    service="${service_port%:*}"
    port="${service_port#*:}"
    
    # 格式化服务名显示
    service_display=$(echo $service | sed 's/eleme-//' | sed 's/-service//')
    
    # 检查健康状态
    if curl -f http://localhost:$port/actuator/health > /dev/null 2>&1; then
        echo "$(printf "%-20s" "$service_display") ($port): ✓ 正常运行"
    else
        # 检查端口是否占用
        if lsof -i :$port > /dev/null 2>&1; then
            echo "$(printf "%-20s" "$service_display") ($port): ⚠ 启动中..."
        else
            echo "$(printf "%-20s" "$service_display") ($port): ✗ 未运行"
        fi
    fi
done

echo ""
echo "3. 快速访问链接："
echo "----------------------------------------"
echo "网关服务:     http://localhost:8888"
echo "Swagger文档:  http://localhost:8888/swagger-ui.html"
echo "Nacos控制台:  http://localhost:8848/nacos"
echo "Sentinel控制台: http://localhost:8080"
echo "Kibana日志:   http://localhost:5601"

echo ""
echo "4. 日志查看："
echo "----------------------------------------"
if [ -d "logs" ]; then
    echo "日志文件目录: logs/"
    for log_file in logs/*.log; do
        if [ -f "$log_file" ]; then
            service_name=$(basename "$log_file" .log)
            echo "  $service_name: tail -f logs/$service_name.log"
        fi
    done
fi

echo ""
echo "=========================================="
echo "管理命令:"
echo "  启动所有服务: ./scripts/start-services.sh"
echo "  停止所有服务: ./scripts/stop-services.sh"
echo "  重启所有服务: ./scripts/restart-services.sh"
echo "=========================================="

================
File: scripts/restart-services.sh
================
#!/bin/bash

# 饿了么微服务重启脚本
# 使用说明：./restart-services.sh

echo "=========================================="
echo "       饿了么微服务重启脚本"
echo "=========================================="

# 切换到项目根目录
cd "$(dirname "$0")/.."

echo "1. 停止所有微服务..."
./scripts/stop-services.sh

echo ""
echo "2. 等待服务完全停止..."
sleep 5

echo ""
echo "3. 重新启动所有微服务..."
./scripts/start-services.sh

echo ""
echo "=========================================="
echo "       重启完成"
echo "=========================================="
echo "检查服务状态: ./scripts/check-services.sh"
echo "=========================================="

================
File: scripts/start-all.sh
================
#!/bin/bash

# 饿了么微服务启动脚本
# 使用说明：./start-all.sh

echo "=========================================="
echo "       饿了么微服务启动脚本"
echo "=========================================="

# 检查Docker是否运行
if ! docker info > /dev/null 2>&1; then
    echo "错误：Docker未运行，请启动Docker服务"
    exit 1
fi

# 检查Maven是否可用
if ! mvn --version > /dev/null 2>&1; then
    echo "错误：Maven未安装或未配置环境变量"
    exit 1
fi

# 切换到项目根目录
cd "$(dirname "$0")/.."

echo "1. 启动基础设施服务..."
echo "   - 启动Nacos..."
docker-compose -f infrastructure/docker-compose.yml up -d nacos

echo "   - 启动MySQL..."
docker-compose -f infrastructure/docker-compose.yml up -d mysql-master

echo "   - 启动Redis..."
docker-compose -f infrastructure/docker-compose.yml up -d redis

echo "   - 启动Sentinel Dashboard..."
docker-compose -f infrastructure/docker-compose.yml up -d sentinel-dashboard

echo "   - 启动ELK Stack..."
docker-compose -f infrastructure/elk/docker-compose.yml up -d elasticsearch
sleep 10
docker-compose -f infrastructure/elk/docker-compose.yml up -d logstash
sleep 5
docker-compose -f infrastructure/elk/docker-compose.yml up -d kibana

echo "   等待基础设施服务启动完成..."
sleep 30

echo "2. 编译项目..."
mvn clean compile -DskipTests

echo "3. 启动微服务..."

# 启动顺序：公共模块 -> 网关 -> 各个服务 -> 监控
services=(
    "eleme-gateway:8888"
    "eleme-user-service:8001"
    "eleme-business-service:8002"
    "eleme-food-service:8003"
    "eleme-order-service:8004"
    "eleme-payment-service:8005"
    "eleme-notification-service:8006"
    "eleme-captcha-service:8007"
    "eleme-monitor:8009"
)

for service_port in "${services[@]}"; do
    service="${service_port%:*}"
    port="${service_port#*:}"
    
    echo "   启动 $service (端口: $port)..."
    cd $service
    
    # 后台启动服务
    nohup mvn spring-boot:run > ../logs/${service}.log 2>&1 &
    
    # 记录进程ID
    echo $! > ../logs/${service}.pid
    
    cd ..
    
    # 等待服务启动
    echo "   等待 $service 启动完成..."
    sleep 15
    
    # 检查服务健康状态
    if curl -f http://localhost:$port/actuator/health > /dev/null 2>&1; then
        echo "   ✓ $service 启动成功"
    else
        echo "   ✗ $service 启动失败或未完全启动"
    fi
done

echo "4. 服务启动完成！"
echo ""
echo "=========================================="
echo "           服务访问地址"
echo "=========================================="
echo "网关服务:           http://localhost:8888"
echo "用户服务:           http://localhost:8001"
echo "商家服务:           http://localhost:8002"
echo "食物服务:           http://localhost:8003"
echo "订单服务:           http://localhost:8004"
echo "支付服务:           http://localhost:8005"
echo "通知服务:           http://localhost:8006"
echo "验证码服务:         http://localhost:8007"
echo "监控服务:           http://localhost:8009"
echo ""
echo "=========================================="
echo "           基础设施服务"
echo "=========================================="
echo "Nacos控制台:        http://localhost:8848/"
echo "MySQL数据库:        localhost:3306"
echo "Redis缓存:          localhost:6379"
echo "Sentinel控制台:     http://localhost:8080"
echo "Elasticsearch:      http://localhost:9200"
echo "Kibana:             http://localhost:5601"
echo ""
echo "=========================================="
echo "           前端应用"
echo "=========================================="
echo "请手动启动前端应用："
echo "cd ../elemeVue"
echo "npm install"
echo "npm run dev"
echo ""
echo "默认用户名/密码："
echo "  - Nacos:     nacos/nacos"
echo "  - 监控中心:   admin/admin"
echo "=========================================="

echo "所有服务已启动！请检查各服务状态。"
echo "查看日志: tail -f logs/服务名.log"
echo "停止服务: ./stop-all.sh"

================
File: scripts/start-services.sh
================
#!/bin/bash

# 饿了么微服务启动脚本（改进版）
# 使用说明：./start-services.sh

echo "=========================================="
echo "       饿了么微服务启动脚本 (改进版)"
echo "=========================================="

# 切换到项目根目录
cd "$(dirname "$0")/.."

# 创建logs目录
mkdir -p logs

# 检查并停止已有的服务
echo "1. 停止已有的服务..."
pkill -f "spring-boot:run" || true

# 等待服务完全停止
sleep 3

# 清理旧的pid文件
rm -f logs/*.pid

echo "2. 检查基础设施服务状态..."

# 检查Nacos
if curl -f http://localhost:8848/ > /dev/null 2>&1; then
    echo "   ✓ Nacos 正常运行"
else
    echo "   ✗ Nacos 未运行，请先启动基础设施服务"
    exit 1
fi

# 检查MySQL
if nc -z localhost 3306 > /dev/null 2>&1; then
    echo "   ✓ MySQL 正常运行"
else
    echo "   ✗ MySQL 未运行，请先启动基础设施服务"
    exit 1
fi

# 检查Redis
if nc -z localhost 6379 > /dev/null 2>&1; then
    echo "   ✓ Redis 正常运行"
else
    echo "   ✗ Redis 未运行，请先启动基础设施服务"
    exit 1
fi

echo "3. 启动微服务..."

# 启动顺序：网关 -> 各个服务 -> 监控
services=(
    "eleme-gateway:8888"
    "eleme-user-service:8001"
    "eleme-business-service:8002"
    "eleme-food-service:8003"
    "eleme-order-service:8004"
    "eleme-payment-service:8005"
    "eleme-notification-service:8006"
    "eleme-captcha-service:8007"
    "eleme-monitor:8009"
)

# 启动函数
start_service() {
    local service_port=$1
    local service="${service_port%:*}"
    local port="${service_port#*:}"
    
    echo "   启动 $service (端口: $port)..."
    
    # 检查端口是否被占用
    if lsof -i :$port > /dev/null 2>&1; then
        echo "   ! 端口 $port 已被占用，跳过 $service"
        return 0
    fi
    
    cd $service
    
    # 后台启动服务
    nohup mvn spring-boot:run > ../logs/${service}.log 2>&1 &
    
    # 记录进程ID
    echo $! > ../logs/${service}.pid
    
    cd ..
    
    # 等待服务启动
    echo "   等待 $service 启动完成..."
    local attempts=0
    local max_attempts=30
    
    while [ $attempts -lt $max_attempts ]; do
        if curl -f http://localhost:$port/actuator/health > /dev/null 2>&1; then
            echo "   ✓ $service 启动成功"
            return 0
        fi
        sleep 2
        attempts=$((attempts + 1))
    done
    
    echo "   ✗ $service 启动失败或超时"
    echo "   查看日志: tail -f logs/${service}.log"
    return 1
}

# 启动所有服务
for service_port in "${services[@]}"; do
    start_service $service_port
done

echo "4. 服务启动完成！"
echo ""
echo "=========================================="
echo "           服务访问地址"
echo "=========================================="
echo "网关服务 (统一入口):    http://localhost:8888"
echo "Swagger文档 (网关):     http://localhost:8888/swagger-ui.html"
echo "用户服务:              http://localhost:8001"
echo "商家服务:              http://localhost:8002"
echo "食物服务:              http://localhost:8003"
echo "订单服务:              http://localhost:8004"
echo "支付服务:              http://localhost:8005"
echo "通知服务:              http://localhost:8006"
echo "验证码服务:            http://localhost:8007"
echo "监控服务:              http://localhost:8009"
echo ""
echo "=========================================="
echo "           基础设施服务"
echo "=========================================="
echo "Nacos控制台:           http://localhost:8848/nacos"
echo "Sentinel控制台:        http://localhost:8080"
echo "Kibana日志:            http://localhost:5601"
echo ""
echo "=========================================="
echo "           管理命令"
echo "=========================================="
echo "查看服务状态: ./scripts/check-services.sh"
echo "查看日志: tail -f logs/服务名.log"
echo "停止服务: ./scripts/stop-services.sh"
echo "重启服务: ./scripts/restart-services.sh"
echo "=========================================="

================
File: scripts/stop-all.sh
================
#!/bin/bash

# 饿了么微服务停止脚本
# 使用说明：./stop-all.sh

echo "=========================================="
echo "       饿了么微服务停止脚本"
echo "=========================================="

# 切换到项目根目录
cd "$(dirname "$0")/.."

echo "1. 停止微服务..."

# 所有服务列表
services=(
    "eleme-gateway"
    "eleme-user-service"
    "eleme-business-service"
    "eleme-food-service"
    "eleme-order-service"
    "eleme-payment-service"
    "eleme-notification-service"
    "eleme-captcha-service"
    "eleme-monitor"
)

# 创建logs目录（如果不存在）
mkdir -p logs

for service in "${services[@]}"; do
    echo "   停止 $service..."
    
    # 检查PID文件是否存在
    if [ -f "logs/${service}.pid" ]; then
        pid=$(cat "logs/${service}.pid")
        
        # 检查进程是否存在
        if ps -p $pid > /dev/null 2>&1; then
            echo "   正在停止进程 $pid..."
            kill $pid
            
            # 等待进程停止
            sleep 5
            
            # 如果进程仍在运行，强制杀死
            if ps -p $pid > /dev/null 2>&1; then
                echo "   强制停止进程 $pid..."
                kill -9 $pid
            fi
            
            echo "   ✓ $service 已停止"
        else
            echo "   ✗ $service 进程不存在"
        fi
        
        # 删除PID文件
        rm -f "logs/${service}.pid"
    else
        echo "   ✗ $service PID文件不存在"
    fi
done

echo "2. 停止基础设施服务..."

echo "   - 停止ELK Stack..."
docker-compose -f infrastructure/elk/docker-compose.yml down

echo "   - 停止基础设施服务..."
docker-compose -f infrastructure/docker-compose.yml down

echo "3. 清理临时文件..."
echo "   - 清理日志文件..."
find logs -name "*.log" -type f -delete 2>/dev/null || true

echo "   - 清理PID文件..."
find logs -name "*.pid" -type f -delete 2>/dev/null || true

echo "4. 显示剩余Java进程..."
echo "   当前Java进程："
ps aux | grep java | grep -v grep | awk '{print $2, $11}' || echo "   没有Java进程运行"

echo ""
echo "=========================================="
echo "           停止完成"
echo "=========================================="
echo "所有服务已停止！"
echo ""
echo "如果有进程仍在运行，可以使用以下命令手动停止："
echo "ps aux | grep java | grep -v grep"
echo "kill -9 <进程ID>"
echo ""
echo "重新启动服务: ./start-all.sh"
echo "=========================================="

================
File: scripts/stop-services.sh
================
#!/bin/bash

# 饿了么微服务停止脚本
# 使用说明：./stop-services.sh

echo "=========================================="
echo "       饿了么微服务停止脚本"
echo "=========================================="

# 切换到项目根目录
cd "$(dirname "$0")/.."

echo "1. 停止所有微服务..."

# 停止所有Spring Boot服务
pkill -f "spring-boot:run"

# 等待服务完全停止
sleep 3

# 通过PID文件停止服务
if [ -d "logs" ]; then
    for pid_file in logs/*.pid; do
        if [ -f "$pid_file" ]; then
            service_name=$(basename "$pid_file" .pid)
            pid=$(cat "$pid_file")
            
            if kill -0 $pid > /dev/null 2>&1; then
                echo "   停止 $service_name (PID: $pid)..."
                kill $pid
            fi
            
            # 删除PID文件
            rm -f "$pid_file"
        fi
    done
fi

echo "2. 检查服务状态..."

# 检查端口是否还在使用
ports=(8888 8001 8002 8003 8004 8005 8006 8007 8009)
for port in "${ports[@]}"; do
    if lsof -i :$port > /dev/null 2>&1; then
        echo "   ! 端口 $port 仍在使用，强制停止..."
        lsof -ti :$port | xargs kill -9
    fi
done

echo "3. 清理临时文件..."
rm -f logs/*.pid

echo "4. 所有微服务已停止！"
echo ""
echo "=========================================="
echo "           服务状态"
echo "=========================================="

# 显示服务状态
services=("eleme-gateway:8888" "eleme-user-service:8001" "eleme-business-service:8002" 
          "eleme-food-service:8003" "eleme-order-service:8004" "eleme-payment-service:8005" 
          "eleme-notification-service:8006" "eleme-captcha-service:8007" "eleme-monitor:8009")

for service_port in "${services[@]}"; do
    service="${service_port%:*}"
    port="${service_port#*:}"
    
    if lsof -i :$port > /dev/null 2>&1; then
        echo "$service (端口: $port): ✗ 仍在运行"
    else
        echo "$service (端口: $port): ✓ 已停止"
    fi
done

echo "=========================================="
echo "启动服务命令: ./scripts/start-services.sh"
echo "=========================================="

================
File: test-simple-service/src/main/java/org/example/TestSimpleApplication.java
================
package org.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

@SpringBootApplication
@EnableDiscoveryClient
public class TestSimpleApplication {
    public static void main(String[] args) {
        SpringApplication.run(TestSimpleApplication.class, args);
    }
}

================
File: test-simple-service/src/main/resources/application.yml
================
server:
  port: 8901

spring:
  application:
    name: test-simple-service
  
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: public

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

================
File: test-simple-service/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.example</groupId>
        <artifactId>eleme-spring-cloud</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>test-simple-service</artifactId>
    <packaging>jar</packaging>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Nacos 服务发现 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!-- Spring Boot Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>
</project>

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>eleme-spring-cloud</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>eleme-common</module>
        <module>eleme-gateway</module>
        <module>eleme-user-service</module>
        <module>eleme-business-service</module>
        <module>eleme-food-service</module>
        <module>eleme-order-service</module>
        <module>eleme-payment-service</module>
        <module>eleme-notification-service</module>
        <module>eleme-captcha-service</module>
        <module>eleme-monitor</module>
        <module>test-simple-service</module>
    </modules>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <spring-boot.version>3.1.5</spring-boot.version>
        <spring-cloud.version>2022.0.4</spring-cloud.version>
        <spring-cloud-alibaba.version>2022.0.0.0</spring-cloud-alibaba.version>
        <mysql-connector.version>8.0.33</mysql-connector.version>
        <mybatis-plus.version>3.5.5</mybatis-plus.version>
        <druid.version>1.2.20</druid.version>
        <fastjson.version>2.0.43</fastjson.version>
        <lombok.version>1.18.30</lombok.version>
        <hutool.version>5.8.24</hutool.version>
        <swagger.version>2.2.0</swagger.version>
        <jwt.version>4.4.0</jwt.version>
        <redis.version>3.2.0</redis.version>
        <sentinel.version>1.8.6</sentinel.version>
        <spring-boot-admin.version>3.2.0</spring-boot-admin.version>
        <micrometer.version>1.12.0</micrometer.version>
        <logstash-encoder.version>7.4</logstash-encoder.version>
        <httpclient.version>4.5.14</httpclient.version>
        <mysql-connector-java.version>8.0.33</mysql-connector-java.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Spring Boot 依赖管理 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Spring Cloud 依赖管理 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Spring Cloud Alibaba 依赖管理 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- MySQL 驱动 -->
            <dependency>
                <groupId>com.mysql</groupId>
                <artifactId>mysql-connector-j</artifactId>
                <version>${mysql-connector.version}</version>
            </dependency>

            <!-- MySQL 驱动 (旧版本兼容) -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql-connector-java.version}</version>
            </dependency>

            <!-- Apache HttpClient -->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${httpclient.version}</version>
            </dependency>

            <!-- MyBatis Plus -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <!-- Druid 数据库连接池 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!-- JSON 处理 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <!-- Lombok -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <!-- Hutool 工具包 -->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>

            <!-- Swagger -->
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
                <version>${swagger.version}</version>
            </dependency>

            <!-- JWT -->
            <dependency>
                <groupId>com.auth0</groupId>
                <artifactId>java-jwt</artifactId>
                <version>${jwt.version}</version>
            </dependency>

            <!-- Redis -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-redis</artifactId>
                <version>${redis.version}</version>
            </dependency>

            <!-- Sentinel 熔断降级 -->
            <dependency>
                <groupId>com.alibaba.csp</groupId>
                <artifactId>sentinel-core</artifactId>
                <version>${sentinel.version}</version>
            </dependency>

            <!-- Spring Boot Admin Server -->
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-server</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>

            <!-- Spring Boot Admin Client -->
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>

            <!-- Micrometer Prometheus -->
            <dependency>
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-registry-prometheus</artifactId>
                <version>${micrometer.version}</version>
            </dependency>

            <!-- Logstash Logback Encoder -->
            <dependency>
                <groupId>net.logstash.logback</groupId>
                <artifactId>logstash-logback-encoder</artifactId>
                <version>${logstash-encoder.version}</version>
            </dependency>

            <!-- Spring Boot Validation -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
            </plugin>
            
            <!-- Maven编译器插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <encoding>UTF-8</encoding>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

================
File: README.md
================
# 饿了么微服务项目总结

## 项目概述

本项目是一个基于Spring Cloud微服务架构的饿了么类外卖平台，实现了从单体SpringBoot应用到分布式微服务架构的完整迁移。项目采用了主流的微服务技术栈，包括服务注册与发现、API网关、服务治理、分布式缓存、监控与日志等完整的微服务解决方案。

### 项目特点

- 🚀 **完整的微服务架构**: 从单体应用拆分为9个独立的微服务
- 🔧 **企业级技术栈**: 使用Spring Cloud生态系统构建
- 🛡️ **高可用性**: 集成Sentinel熔断降级、负载均衡、分布式缓存
- 📊 **完善的监控体系**: Spring Boot Admin + ELK Stack
- 🔐 **安全认证**: JWT令牌认证、验证码服务
- 📱 **现代化前端**: Vue3 + TypeScript + Vant UI
- 🐳 **容器化部署**: Docker + Docker Compose
- 📖 **详细文档**: 完整的配置指南和API文档

## 技术架构

### 整体架构图

```
┌─────────────────────────────────────────────────────────────────┐
│                          前端应用                                │
│                      Vue3 + TypeScript                        │
└─────────────────────┬───────────────────────────────────────────┘
                      │
┌─────────────────────▼───────────────────────────────────────────┐
│                     API网关                                     │
│               Spring Cloud Gateway                             │
│                    (端口: 8888)                                │
└─────────────────────┬───────────────────────────────────────────┘
                      │
      ┌───────────────┼───────────────┐
      │               │               │
┌─────▼─────┐  ┌─────▼─────┐  ┌─────▼─────┐
│  用户服务  │  │  商家服务  │  │  食物服务  │
│  (8001)   │  │  (8002)   │  │  (8003)   │
└───────────┘  └───────────┘  └───────────┘
      │               │               │
      └───────────────┼───────────────┘
                      │
┌─────▼─────┐  ┌─────▼─────┐  ┌─────▼─────┐
│  订单服务  │  │  支付服务  │  │  通知服务  │
│  (8004)   │  │  (8005)   │  │  (8006)   │
└───────────┘  └───────────┘  └───────────┘
      │               │               │
      └───────────────┼───────────────┘
                      │
┌─────▼─────┐  ┌─────▼─────┐
│ 验证码服务 │  │  监控服务  │
│  (8007)   │  │  (8009)   │
└───────────┘  └───────────┘
      │               │
      └───────────────┼───────────────┐
                      │               │
┌─────▼─────────────────────────────────▼─────┐
│              基础设施服务                     │
│  Nacos | MySQL | Redis | ELK | Sentinel   │
└─────────────────────────────────────────────┘
```

### 技术栈详情

#### 后端技术栈

| 技术 | 版本 | 说明 |
|------|------|------|
| Spring Boot | 3.2.0 | 微服务框架 |
| Spring Cloud | 2023.0.0 | 微服务生态 |
| Spring Cloud Alibaba | 2023.0.1.0 | 阿里云微服务组件 |
| Nacos | 2.3.0 | 服务注册与发现、配置中心 |
| Spring Cloud Gateway | 3.1.0 | API网关 |
| Spring Cloud LoadBalancer | 4.0.0 | 客户端负载均衡 |
| Sentinel | 1.8.6 | 熔断降级、限流 |
| MyBatis Plus | 3.5.5 | ORM框架 |
| MySQL | 8.0.33 | 关系型数据库 |
| Redis | 7.0 | 分布式缓存 |
| Spring Boot Admin | 3.2.0 | 监控中心 |
| ELK Stack | 7.17.0 | 日志收集与分析 |
| Docker | 24.0+ | 容器化部署 |

#### 前端技术栈

| 技术 | 版本 | 说明 |
|------|------|------|
| Vue | 3.3.4 | 前端框架 |
| TypeScript | 5.0.2 | 类型支持 |
| Vant | 4.8.1 | 移动端UI组件库 |
| Element Plus | 2.5.6 | PC端UI组件库 |
| Axios | 1.6.0 | HTTP客户端 |
| Pinia | 2.1.7 | 状态管理 |
| Vue Router | 4.2.5 | 路由管理 |
| Vite | 5.0.8 | 构建工具 |

## 微服务详细说明

### 1. 公共模块 (eleme-common)

**职责**: 提供通用配置、工具类和基础设施支持

**主要功能**:
- Sentinel熔断降级配置
- 负载均衡策略配置
- Redis分布式缓存配置
- 分布式锁实现
- 通用异常处理

**关键配置**:
```yaml
# Sentinel配置
sentinel:
  transport:
    dashboard: localhost:8080
  datasource:
    rules:
      file:
        file: sentinel-rules.json
        rule-type: flow
```

### 2. API网关 (eleme-gateway) - 端口8888

**职责**: 统一入口，路由转发，认证授权，限流熔断

**主要功能**:
- 路由配置与转发
- 跨域处理
- 请求日志记录
- 统一异常处理
- 接口文档聚合

**路由配置**:
```yaml
spring:
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: lb://eleme-user-service
          predicates:
            - Path=/api/user/**
        - id: business-service
          uri: lb://eleme-business-service
          predicates:
            - Path=/api/business/**
        # ... 其他路由
```

### 3. 用户服务 (eleme-user-service) - 端口8001

**职责**: 用户管理，认证授权

**主要功能**:
- 用户注册与登录
- JWT令牌管理
- 用户信息维护
- 邮箱验证码发送
- 密码加密与验证

**核心API**:
```java
@RestController
@RequestMapping("/api/user")
public class UserController {
    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody UserRegisterDTO dto);
    
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody UserLoginDTO dto);
    
    @PostMapping("/sendVerifyCode")
    public ResponseEntity<?> sendVerifyCode(@RequestBody EmailDTO dto);
}
```

### 4. 商家服务 (eleme-business-service) - 端口8002

**职责**: 商家信息管理

**主要功能**:
- 商家信息查询
- 商家列表获取
- 商家搜索功能
- 商家分类管理
- 营业状态管理

**数据模型**:
```java
@Entity
@Table(name = "business")
public class Business {
    private Integer id;
    private String businessName;
    private String businessAddress;
    private String businessExplain;
    private String businessImg;
    private Integer orderTypeId;
    private Double starPrice;
    private Double deliveryPrice;
    private String remarks;
    // ... 其他字段
}
```

### 5. 食物服务 (eleme-food-service) - 端口8003

**职责**: 食物信息管理

**主要功能**:
- 食物信息查询
- 按商家查询食物
- 食物分类管理
- 食物搜索功能
- 食物库存管理

**关键接口**:
```java
@RestController
@RequestMapping("/api/food")
public class FoodController {
    @GetMapping("/business/{businessId}")
    public ResponseEntity<?> getFoodByBusinessId(@PathVariable Integer businessId);
    
    @PostMapping("/getFoodById")
    public ResponseEntity<?> getFoodById(@RequestBody Map<String, Object> request);
}
```

### 6. 订单服务 (eleme-order-service) - 端口8004

**职责**: 订单管理，订单生命周期

**主要功能**:
- 订单创建与提交
- 订单状态管理
- 订单查询与列表
- 订单支付状态更新
- 订单历史记录

**订单状态流转**:
```
待支付(0) -> 已支付(1) -> 配送中(2) -> 已完成(3)
          -> 已取消(4) -> 已退款(5)
```

### 7. 支付服务 (eleme-payment-service) - 端口8005

**职责**: 支付处理，支付状态管理

**主要功能**:
- 支付订单创建
- 支付状态查询
- 支付成功回调
- 退款处理
- 支付记录管理

**支付流程**:
```java
@Service
public class PaymentService {
    public PaymentResult createPayment(PaymentRequest request);
    public PaymentStatus queryPaymentStatus(String paymentId);
    public void handlePaymentCallback(PaymentCallback callback);
}
```

### 8. 通知服务 (eleme-notification-service) - 端口8006

**职责**: 消息通知，邮件发送

**主要功能**:
- 邮件发送服务
- 短信验证码发送
- 系统通知管理
- 消息模板管理
- 通知历史记录

**通知类型**:
- 邮件通知（简单邮件、HTML邮件、带附件邮件）
- 短信通知（验证码、营销短信）
- 系统通知（站内信、推送通知）

### 9. 验证码服务 (eleme-captcha-service) - 端口8007

**职责**: 验证码生成与验证

**主要功能**:
- 图形验证码生成
- 短信验证码生成
- 邮箱验证码生成
- 滑动验证码
- 点选验证码

**验证码类型**:
```java
public enum CaptchaType {
    IMAGE,      // 图形验证码
    SMS,        // 短信验证码
    EMAIL,      // 邮箱验证码
    SLIDE,      // 滑动验证码
    CLICK       // 点选验证码
}
```

### 10. 监控服务 (eleme-monitor) - 端口8009

**职责**: 系统监控，性能指标收集

**主要功能**:
- 应用健康检查
- 性能指标收集
- 自定义业务指标
- 告警通知
- 监控面板

**监控指标**:
- JVM指标（内存、GC、线程）
- 系统指标（CPU、磁盘、网络）
- 业务指标（订单数量、用户数量、错误率）
- 自定义指标

## 服务治理

### 1. 服务注册与发现

使用Nacos作为注册中心，所有微服务在启动时自动注册到Nacos：

```yaml
spring:
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: eleme-dev
        group: DEFAULT_GROUP
```

### 2. 负载均衡

基于Spring Cloud LoadBalancer实现客户端负载均衡：

**支持的负载均衡策略**:
- 轮询（Round Robin）
- 随机（Random）
- 权重（Weighted）
- 健康检查（Health Check）

### 3. 熔断降级

使用Sentinel实现熔断降级：

**熔断规则**:
```json
{
  "resource": "eleme-user-service",
  "grade": 1,
  "count": 10,
  "timeWindow": 10,
  "minRequestAmount": 5,
  "statIntervalMs": 1000,
  "slowRatioThreshold": 0.6
}
```

### 4. 分布式缓存

使用Redis实现分布式缓存：

**缓存策略**:
- 用户信息缓存：30分钟
- 商家信息缓存：1小时
- 食物信息缓存：30分钟
- 验证码缓存：5分钟

**分布式锁**:
```java
@Component
public class DistributedLock {
    public boolean tryLock(String key, long expireTime);
    public void unlock(String key);
}
```

## 监控与日志

### 1. 应用监控

使用Spring Boot Admin进行应用监控：

**监控功能**:
- 应用状态监控
- 健康检查
- 性能指标
- 日志级别动态调整
- 内存和线程监控

**访问地址**: http://localhost:8009
**登录凭证**: admin/admin

### 2. 日志系统

使用ELK Stack进行日志收集和分析：

**组件说明**:
- **Elasticsearch**: 日志存储和搜索
- **Logstash**: 日志收集和处理
- **Kibana**: 日志可视化分析
- **Filebeat**: 日志文件收集

**日志格式**:
```json
{
  "@timestamp": "2024-01-15T10:30:45.123Z",
  "level": "INFO",
  "logger": "org.example.controller.UserController",
  "message": "用户登录成功: user123",
  "service": "eleme-user-service",
  "environment": "dev"
}
```

### 3. 链路追踪

集成Zipkin进行分布式链路追踪：

```yaml
zipkin:
  base-url: http://localhost:9411
sleuth:
  sampler:
    probability: 1.0
```

## 部署与运行

### 1. 环境要求

- **Java**: JDK 17+
- **Maven**: 3.6+
- **Docker**: 20.0+
- **Docker Compose**: 1.29+
- **Node.js**: 16+ (前端)
- **npm**: 8+ (前端)

### 2. 快速启动

#### 方法一：使用启动脚本（推荐）

```bash
# 进入项目目录
cd elemeSpringCloud

# 启动所有服务
./scripts/start-all.sh

# 停止所有服务
./scripts/stop-all.sh
```

#### 方法二：手动启动

```bash
# 1. 启动基础设施
docker-compose -f infrastructure/docker-compose.yml up -d

# 2. 启动ELK Stack
docker-compose -f infrastructure/elk/docker-compose.yml up -d

# 3. 编译项目
mvn clean compile -DskipTests

# 4. 启动各个服务
cd eleme-gateway && mvn spring-boot:run &
cd eleme-user-service && mvn spring-boot:run &
# ... 启动其他服务
```

### 3. 前端启动

```bash
# 进入前端目录
cd elemeVue

# 安装依赖
npm install

# 启动开发服务器
npm run dev

# 构建生产版本
npm run build
```

### 4. 服务访问地址

| 服务 | 地址 | 说明 |
|------|------|------|
| 前端应用 | http://localhost:5173 | Vue前端应用 |
| API网关 | http://localhost:8888 | 统一API入口 |
| 用户服务 | http://localhost:8001 | 用户管理 |
| 商家服务 | http://localhost:8002 | 商家管理 |
| 食物服务 | http://localhost:8003 | 食物管理 |
| 订单服务 | http://localhost:8004 | 订单管理 |
| 支付服务 | http://localhost:8005 | 支付处理 |
| 通知服务 | http://localhost:8006 | 消息通知 |
| 验证码服务 | http://localhost:8007 | 验证码服务 |
| 监控服务 | http://localhost:8009 | 监控中心 |
| Nacos控制台 | http://localhost:8848/nacos | 服务注册中心 |
| Sentinel控制台 | http://localhost:8080 | 熔断降级控制台 |
| Kibana | http://localhost:5601 | 日志分析 |

## 项目亮点

### 1. 架构设计

- **微服务拆分合理**: 按业务域进行服务拆分，职责清晰
- **技术选型先进**: 使用最新版本的Spring Cloud生态
- **扩展性良好**: 服务间松耦合，易于扩展和维护

### 2. 服务治理

- **完善的服务治理**: 包含注册发现、负载均衡、熔断降级
- **分布式缓存**: Redis集群支持，提高系统性能
- **分布式锁**: 解决并发问题，保证数据一致性

### 3. 监控体系

- **全方位监控**: 应用监控、日志监控、链路追踪
- **实时告警**: 支持多种告警方式，及时发现问题
- **可视化展示**: 丰富的监控面板和日志分析

### 4. 开发体验

- **统一配置**: 配置集中管理，环境隔离
- **自动化部署**: 一键启动脚本，简化部署流程
- **详细文档**: 完整的配置指南和使用说明

### 5. 安全性

- **JWT认证**: 无状态认证，支持分布式
- **多重验证**: 图形验证码、短信验证码、邮箱验证
- **接口限流**: 防止恶意请求，保护系统稳定

## 性能优化

### 1. 缓存优化

- **多级缓存**: 本地缓存 + Redis分布式缓存
- **缓存预热**: 系统启动时预加载热点数据
- **缓存穿透**: 布隆过滤器防止缓存穿透

### 2. 数据库优化

- **读写分离**: 主从复制，读写分离
- **分库分表**: 按业务域分库，按时间分表
- **索引优化**: 合理创建索引，提高查询效率

### 3. 接口优化

- **异步处理**: 耗时操作异步处理，提高响应速度
- **批量操作**: 减少数据库交互次数
- **分页查询**: 大数据量分页查询，避免内存溢出

## 测试策略

### 1. 单元测试

- **JUnit 5**: 单元测试框架
- **Mockito**: Mock框架
- **TestContainers**: 集成测试容器

### 2. 集成测试

- **Spring Boot Test**: 集成测试支持
- **WireMock**: HTTP服务Mock
- **TestRestTemplate**: REST API测试

### 3. 性能测试

- **JMeter**: 性能测试工具
- **压力测试**: 系统负载测试
- **监控分析**: 性能瓶颈分析

## 部署架构

### 1. 开发环境

- **本地部署**: Docker Compose单机部署
- **快速启动**: 一键启动脚本
- **热部署**: 支持代码热更新

### 2. 测试环境

- **容器化部署**: Docker + Kubernetes
- **持续集成**: Jenkins + GitLab CI
- **自动化测试**: 单元测试 + 集成测试

### 3. 生产环境

- **高可用部署**: 多节点集群部署
- **负载均衡**: Nginx + Spring Cloud Gateway
- **监控告警**: Prometheus + Grafana + AlertManager

## 安全考虑

### 1. 认证授权

- **JWT令牌**: 无状态认证
- **权限控制**: RBAC基于角色的访问控制
- **接口鉴权**: 统一鉴权中心

### 2. 数据安全

- **敏感信息加密**: 密码加密存储
- **传输加密**: HTTPS传输
- **数据脱敏**: 日志脱敏处理

### 3. 系统安全

- **防SQL注入**: 参数化查询
- **XSS防护**: 输入验证和输出编码
- **CSRF防护**: Token验证

## 后续扩展计划

### 1. 功能扩展

- **商家入驻**: 商家自主入驻和管理
- **优惠券系统**: 优惠券发放和使用
- **积分系统**: 用户积分和等级管理
- **评价系统**: 用户评价和商家评分

### 2. 技术升级

- **服务网格**: 集成Istio服务网格
- **消息队列**: 集成RabbitMQ或Kafka
- **分布式事务**: 集成Seata分布式事务
- **搜索引擎**: 集成Elasticsearch搜索

### 3. 运维优化

- **自动化运维**: 集成Ansible或Terraform
- **容器编排**: 迁移到Kubernetes
- **CI/CD**: 完善持续集成和部署流程
- **监控告警**: 集成Prometheus + Grafana

## 常见问题

### 1. 服务启动失败

**问题**: 服务无法启动或注册失败
**解决方案**:
1. 检查Nacos是否正常运行
2. 确认端口是否被占用
3. 查看服务日志排查错误

### 2. 前端API调用失败

**问题**: 前端无法调用后端API
**解决方案**:
1. 确认网关服务正常运行
2. 检查API地址配置
3. 确认服务注册状态

### 3. 数据库连接失败

**问题**: 服务无法连接数据库
**解决方案**:
1. 检查MySQL容器状态
2. 确认数据库配置信息
3. 验证网络连接

### 4. 缓存不生效

**问题**: Redis缓存不生效
**解决方案**:
1. 检查Redis服务状态
2. 确认缓存配置
3. 验证缓存注解使用

## 贡献指南

### 1. 代码规范

- **Java编码规范**: 遵循阿里巴巴Java开发手册
- **前端编码规范**: 遵循Vue官方风格指南
- **Git提交规范**: 使用conventional commits

### 2. 开发流程

1. Fork项目到个人仓库
2. 创建功能分支
3. 编写代码和测试
4. 提交Pull Request
5. 代码审查和合并

### 3. 文档维护

- **API文档**: 及时更新Swagger文档
- **架构文档**: 重要变更需要更新架构图
- **部署文档**: 部署步骤变更需要更新文档

## 总结

本项目成功实现了从单体SpringBoot应用到分布式微服务架构的迁移，建立了完整的微服务生态系统。项目具有以下特点：

1. **架构完整**: 包含服务注册发现、API网关、服务治理等完整的微服务组件
2. **技术先进**: 使用最新版本的Spring Cloud技术栈
3. **功能丰富**: 实现了用户管理、商家管理、订单处理等完整的业务功能
4. **监控完善**: 集成监控、日志、链路追踪等完整的可观测性体系
5. **部署简便**: 提供一键启动脚本，支持快速部署

项目为后续的扩展和维护打下了坚实的基础，可以支持更大规模的业务发展和技术演进。

## 联系方式

如有问题或建议，请通过以下方式联系：

- **项目地址**: https://github.com/your-org/eleme-microservice
- **文档地址**: https://your-org.github.io/eleme-microservice-docs
- **邮箱**: dev-team@eleme.com
- **QQ群**: 123456789

---

*最后更新时间: 2024年1月15日*
*版本: v1.0.0*




================================================================
End of Codebase
================================================================
